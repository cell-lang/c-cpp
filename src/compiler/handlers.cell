implicit prg_data : PrgData, rel_vars_perm_map : [DBSymbol -> [RelVar -> [+Nat -> Nat]]], context : <core>, block : StaticBlock, debug_mode : Bool, skip_integrity_checks : Bool {
  Instr* native_optimized_handler_code(HandlerId handler_id, NeType msg_type, Instr* body) {
    effects_info = instrs_effects_info(body);
    mutated_table_vars = keys(effects_info.tables);

    table_var_aux_vars_map, memb_var_aux_vars_map, dependee_aux_vars_map = reserve_aux_vars(handler_id, msg_type, body, effects_info, mutated_table_vars);

    opt_table_vars = optimizable_table_vars(effects_info, table_var_aux_vars_map);
    non_opt_table_vars = mutated_table_vars - opt_table_vars;

    table_var_aux_vars_map = [v -> vs : v vs <- table_var_aux_vars_map, opt_table_vars(v)];

    code = join((rewrite_handler_instr(instr, table_var_aux_vars_map, memb_var_aux_vars_map, dependee_aux_vars_map) : instr <- body));

    insertion_value_stores = value_stores_with_insertions(block.handlers(handler_id));

    assert {
      insertion_tables = [t : t <- table_vars_with_insertions(handler_id, ?)];
      update_tables = [t : t <- table_vars_with_updates(handler_id, ?)];
      deletion_tables = [t : t <- table_vars_with_deletions(handler_id, ?)];
      mutated_tables = insertion_tables & update_tables & deletion_tables;
      return union(opt_table_vars, non_opt_table_vars) == mutated_tables;
    };

    status_vars = [sv : _ vs <- table_var_aux_vars_map | _ vs <- memb_var_aux_vars_map | _ vs <- dependee_aux_vars_map, (_, just(sv?)) ?= vs];
    code = (set_bvar(v, false) : v <- isort(status_vars)) & code;

    if not skip_integrity_checks {
      let block = block, table_var_aux_vars_map = table_var_aux_vars_map, effects_info = effects_info {
        code = code & keys_checking_code(opt_table_vars, non_opt_table_vars);
        code = code & foreign_keys_checking_code(opt_table_vars, non_opt_table_vars);
      }
    }

    code = code & send_internal_msgs_code(block, body, dependee_aux_vars_map, effects_info);

    code = code & updates_apply_code(block, insertion_value_stores, opt_table_vars, non_opt_table_vars, table_var_aux_vars_map, memb_var_aux_vars_map, effects_info);
    code = code & updates_reset_code(block, insertion_value_stores, non_opt_table_vars);

    code = (code | :empty_line, ret_val(true));

    return code;
  }


  ([TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], [MembVar -> (LocVar, Maybe[LocBoolVar])], [LinkedDBVar -> (LocVar, Maybe[LocBoolVar])])
  reserve_aux_vars(HandlerId handler_id, NeType msg_type, Instr* body, EffectsInfo effects_info, [TableVar] table_vars) {
    tables_types = prg_data.tables(block.name);
    unavailable_vars = temp_table_col_vars_in_use(body);

    table_var_aux_vars_map = [];
    for table_var <- table_vars {
      table_effects_info = effects_info.tables(table_var);
      if |table_effects_info| == 1 {
        instr_id, action = only_pair(table_effects_info);
        instr = get_instr_by_id(instr_id, body);
        table_type = tables_types(table_var);
        aux_vars, unavailable_vars = match (action)
          insertion     |
          update        = reserve_insertion_aux_vars(table_type, instr, unavailable_vars),
          deletion(as?) = reserve_deletion_aux_vars(as, table_type, unavailable_vars);
        maybe_status_var, unavailable_vars = reserve_maybe_loc_bool_var(not instr_is_always_exec_once(instr_id), unavailable_vars);
        table_var_aux_vars_map = _put_(table_var_aux_vars_map, table_var, (aux_vars, maybe_status_var));
      }
    }

    memb_var_aux_vars_map = [];
    for memb_var instr_ids <- effects_info.memb_vars {
      aux_vars, unavailable_vars = reserve_any_available_loc_var(unavailable_vars);
      maybe_status_var, unavailable_vars = reserve_maybe_loc_bool_var(not memb_var_is_always_set_once(instr_ids), unavailable_vars);
      memb_var_aux_vars_map = _put_(memb_var_aux_vars_map, memb_var, (aux_vars, maybe_status_var));
    }

    dependee_aux_vars_map = [];
    for auto_var instr_ids <- effects_info.dependees {
      aux_vars, unavailable_vars = reserve_any_available_loc_var(unavailable_vars);
      maybe_status_var, unavailable_vars = reserve_maybe_loc_bool_var(not msg_is_always_sent_once(instr_ids), unavailable_vars);
      dependee_aux_vars_map = _put_(dependee_aux_vars_map, auto_var, (aux_vars, maybe_status_var));
    }

    return (table_var_aux_vars_map, memb_var_aux_vars_map, dependee_aux_vars_map);

    ////////////////////////////////////////////////////////////////////////////

    (LocInt32Var+, [AuxTableVar]) reserve_insertion_aux_vars(Table table_type, Instr, [AuxTableVar] unavailable_vars) =
      reserve_any_available_loc_int32_vars(arity(table_type), unavailable_vars);


    (LocInt32Var+, [AuxTableVar]) reserve_insertion_aux_vars(MasterBinTable table_type, Instr, [AuxTableVar] unavailable_vars) =
      reserve_any_available_loc_int32_vars(3, unavailable_vars);


    (LocInt32Var+, [AuxTableVar]) reserve_insertion_aux_vars(SlaveTernTable table_type, Instr instr, [AuxTableVar] unavailable_vars) {
      num_args = match (instr) queue_insert_tuple() = |instr.tuple|;
      return reserve_any_available_loc_int32_vars(num_args, unavailable_vars);
    }


    ((LocInt32Var, LocColValueAuxVar), [AuxTableVar]) reserve_insertion_aux_vars(<Column, MandatoryColumn> col_type, Instr, [AuxTableVar] init_unavailable_vars) {
      key_var, unavailable_vars = reserve_any_available_loc_int32_var(init_unavailable_vars);
      value_var, unavailable_vars = reserve_any_available_loc_var(col_type.repr, unavailable_vars);
      return ((key_var, value_var), unavailable_vars);
    }


    (<(LocInt32Var, LocColValueAuxVar), (LocInt32Var, LocInt32Var, LocColValueAuxVar)>, [AuxTableVar]) reserve_insertion_aux_vars(SlaveColumn col_type, Instr instr, [AuxTableVar] init_unavailable_vars) {
      aux_var_1, unavailable_vars = reserve_any_available_loc_int32_var(init_unavailable_vars);
      value_var, unavailable_vars = reserve_any_available_loc_var(col_type.repr, unavailable_vars);
      is_slave_op = match (instr) column_insert_deferred() = instr.args_surrs != nothing;
      if is_slave_op {
        aux_var_2, unavailable_vars = reserve_any_available_loc_int32_var(unavailable_vars);
        vars = (aux_var_1, aux_var_2, value_var);
      }
      else
        vars = (aux_var_1, value_var);
      return (vars, unavailable_vars);
    }

    ////////////////////////////////////////////////////////////////////////////

    (OptLocInt32Var+, [AuxTableVar]) reserve_deletion_aux_vars(Bool+ set_args, <Table, MasterBinTable, SlaveTernTable> table_type, [AuxTableVar] unavailable_vars) =
      reserve_any_available_loc_int32_vars(set_args, unavailable_vars);


    ((OptLocInt32Var, OptLocColValueAuxVar), [AuxTableVar]) reserve_deletion_aux_vars(Bool+ set_args, <Column, MandatoryColumn> col_type, [AuxTableVar] init_unavailable_vars) {
      assert |set_args| == 2;
      key_var, unavailable_vars = reserve_any_available_loc_int32_var(set_args(0), init_unavailable_vars);
      value_var, unavailable_vars = reserve_any_available_loc_var(set_args(1), col_type.repr, unavailable_vars);
      return ((key_var, value_var), unavailable_vars);
    }


    (<(OptLocInt32Var, OptLocColValueAuxVar), (OptLocInt32Var, OptLocInt32Var, <none, LocVar, LocIntVar, LocFloatVar>)>, [AuxTableVar])
    reserve_deletion_aux_vars(Bool+ set_args, SlaveColumn col_type, [AuxTableVar] init_unavailable_vars) {
      aux_var_1, unavailable_vars = reserve_any_available_loc_int32_var(set_args(0), init_unavailable_vars);
      aux_value_var, unavailable_vars = reserve_any_available_loc_var(col_type.repr, unavailable_vars);
      if |set_args| == 3 {
        aux_var_2, unavailable_vars = reserve_any_available_loc_int32_var(set_args(1), unavailable_vars);
        vars = (aux_var_1, aux_var_2, aux_value_var);
      }
      else
        vars = (aux_var_1, aux_value_var);
      return (vars, unavailable_vars);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Instr* rewrite_handler_instr(Instr instr, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map,
                             [MembVar -> (LocVar, Maybe[LocBoolVar])] memb_var_aux_vars_map, [LinkedDBVar -> (LocVar, Maybe[LocBoolVar])] dependee_aux_vars_map) {
  skip_optimization = match (instr)
    queue_deletes()                 |
    queue_insert_tuple()            |
    queue_insert_master_tuple()     |
    column_insert_deferred()        = not table_var_aux_vars_map(instr.table_var, _),
    _                               = false;

  return (instr) if skip_optimization;

  return match (instr)
    // lookup_or_queue_insert_value() = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT
    queue_deletes()                 = rewrite_queue_deletes(instr.table_var, instr.table, instr.args, table_var_aux_vars_map),
    queue_insert_tuple()            = rewrite_queue_insert_tuple(instr.table_var, instr.tuple, instr.forced, table_var_aux_vars_map),
    queue_insert_master_tuple()     = rewrite_queue_insert_master_tuple(instr.assoc_surr_var, instr.table_var, instr.table, instr.tuple, table_var_aux_vars_map),
    column_insert_deferred()        = rewrite_column_insert_deferred(instr.table_var, instr.column, instr.key_surr, instr.args_surrs, instr.value, instr.forced, table_var_aux_vars_map),
    set_var()                       = if instr.var :: PendingStateVar
                                        then rewrite_set_memb_var(instr.var, instr.value, memb_var_aux_vars_map(corresponding_memb_var(instr.var)))
                                        else (instr),
    send_internal_msg()             = rewrite_send_internal_msg(instr.db_var, instr.type, instr.msg, instr.handler_id, dependee_aux_vars_map(instr.db_var)),
    branch()                        = if instr.cond :: <neg(is_blank(PendingStateVar))>
                                        then instr.when_false
                                        else rewrite_nested_one_to_many(instr, rewrite_handler_instr($, table_var_aux_vars_map, memb_var_aux_vars_map, dependee_aux_vars_map), $),
    _                               = rewrite_nested_one_to_many(instr, rewrite_handler_instr($, table_var_aux_vars_map, memb_var_aux_vars_map, dependee_aux_vars_map), $);


  // send_internal_msg(db_var: LinkedDBVar, type: DBSymbol, msg: AtomicExpr, handler_id: Maybe[HandlerId]),
  Instr* rewrite_send_internal_msg(LinkedDBVar auto_var, DBSymbol type, AtomicExpr msg, Maybe[HandlerId] handler_id, (LocVar, Maybe[LocBoolVar]) aux_vars) {
    msg_aux_var, maybe_status_var = aux_vars;
    comment = send_internal_msg_rewrite_descr(type, maybe_status_var);
    set_var_instr = set_var(msg_aux_var, msg);
    return (comment, set_var_instr) if maybe_status_var == nothing;
    status_var = value(maybe_status_var);
    return (
      comment,
      do_if(is_true(status_var), ret_val(false)), ## TODO: ADD ERROR MESSAGE
      set_bvar(status_var, true),
      set_var_instr
    );
  }


  // queue_deletes(table_var: TableVar, table: AnyTable, args: Maybe[Int32Var]+)
  Instr* rewrite_queue_deletes(TableVar table_var, AnyTable table, Maybe[Int32Var]+ args, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map) {
    aux_vars, maybe_status_var = table_var_aux_vars_map(table_var);
    comment = column_queue_deletes_rewrite_descr(table_var, args, aux_vars, maybe_status_var);
    code = (comment) & (set_ivar32(cast_int32_var(aux_vars(i)), value(a)) : a @ i <- args, a != nothing);
    if maybe_status_var != nothing {
      status_var = value(maybe_status_var);
      code = (code | set_bvar(status_var, true));
    }
    return code;
  }


  Instr* rewrite_set_memb_var(PendingStateVar var, ObjExpr value_expr, (LocVar, Maybe[LocBoolVar]) aux_vars) {
    aux_var, maybe_status_var = aux_vars;
    set_var_instr = set_var(aux_var, value_expr);
    if maybe_status_var == nothing
      return (set_var_instr);
    status_var = value(maybe_status_var);
    return (
      do_if(is_true(status_var), ret_val(false)), ## TODO: ADD ERROR MESSAGE
      set_bvar(status_var, true),
      set_var_instr
    );
  }


  Instr* rewrite_queue_insert_tuple(TableVar table_var, Int32Var+ tuple, Bool forced, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map) {
    aux_vars, maybe_status_var = table_var_aux_vars_map(table_var);
    assert |aux_vars| == |tuple|;
    aux_vars = cast_int32_var_seq(aux_vars);
    code = (queue_insert_tuple_rewrite_descr(table_var, aux_vars, maybe_status_var, forced));
    ## MAYBE WE COULD CHECK TO SEE IF THE TABLE ALREADY CONTAINS THE TUPLE WE'RE INSERTING
    code = code & (set_ivar32(aux_vars(i), v) : v @ i <- tuple);
    if maybe_status_var != nothing {
      status_var = value(maybe_status_var);
      code = (code | set_bvar(status_var, true));
    }
    return code;
  }


  Instr* rewrite_queue_insert_master_tuple(Int32Var assoc_surr_var, TableVar table_var, MasterBinTable table, (Int32Var, Int32Var) tuple, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map) {
    aux_vars, maybe_status_var = table_var_aux_vars_map(table_var);
    aux_vars = cast_int32_var_seq(aux_vars);
    assert |aux_vars| == 3;
    return (
      set_ivar32(assoc_surr_var, get_assoc_surr(table_var, table, tuple)),
      do_if(
        are_eq(assoc_surr_var, -1),
        ( set_ivar32(assoc_surr_var, get_first_free_assoc_surr(table_var)),
          set_bvar(value(maybe_status_var), true) if maybe_status_var != nothing
        )
      ),
      queue_insert_master_tuple_rewrite_descr(table_var, aux_vars, maybe_status_var),
      set_ivar32(aux_vars(0), tuple(0)),
      set_ivar32(aux_vars(1), tuple(1)),
      set_ivar32(aux_vars(2), assoc_surr_var)
    );
  }


  Instr* rewrite_column_insert_deferred(TableVar table_var, AnyColumn column, Int32Var key_surr, Maybe[(Int32Var, Int32Var)] args_surrs, AnyTypeExpr value_expr, Bool forced, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map) {
    if args_surrs == nothing {
      aux_vars, maybe_status_var = table_var_aux_vars_map(table_var);
      fail if not aux_vars :: (Int32Var, <LocVar, LocIntVar, LocFloatVar>);
      tmp_key_var, tmp_value_var = aux_vars;
      return (
        column_insert_deferred_rewrite_descr(table_var, aux_vars, maybe_status_var, forced),
        set_ivar32(tmp_key_var, key_surr),
        set_any_var(tmp_value_var, obj_expr(value_expr)),
        set_bvar(value(maybe_status_var), true) if maybe_status_var != nothing
      );
    }
    else {
      fail if not column :: SlaveColumn;
      aux_vars, maybe_status_var = table_var_aux_vars_map(table_var);
      fail if not aux_vars :: (Int32Var, Int32Var, <LocVar, LocIntVar, LocFloatVar>);
      tmp_arg1_var, tmp_arg2_var, tmp_value_var = aux_vars;
      arg1_surr, arg2_surr = value(args_surrs);
      return (
        column_insert_deferred_rewrite_descr(table_var, aux_vars, maybe_status_var, forced),
        set_ivar32(tmp_arg1_var, arg1_surr),
        set_ivar32(tmp_arg2_var, arg2_surr),
        set_any_var(tmp_value_var, obj_expr(value_expr)),
        set_bvar(value(maybe_status_var), true) if maybe_status_var != nothing
      );
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg_data : PrgData, rel_vars_perm_map : [DBSymbol -> [RelVar -> [+Nat -> Nat]]], context : <core>, debug_mode : Bool, skip_integrity_checks : Bool {
  Instr* send_internal_msgs_code(StaticBlock block, Instr* body, [LinkedDBVar -> (LocVar, Maybe[LocBoolVar])] dependee_aux_vars_map, EffectsInfo effects_info) {
    dependees = effects_info.dependees;
    return () if dependees == [];

    msgs_infos = [{
      msg_var, maybe_status_var = dependee_aux_vars_map(auto_var);
      instrs = [get_instr_by_id(iid, body) : iid <- instr_ids];
      instrs = [match (i) send_internal_msg() = i : i <- instrs];
      assert not (i <- instrs : i.db_var != auto_var);
      auto_type = only([i.type : i <- instrs]);
      handler_ids = [i.handler_id : i <- instrs];
      rewritten_handler_id = nothing;
      if |handler_ids| == 1 {
        handler_id = only(handler_ids);
        rewritten_handler_id = handler_id if handler_id != nothing;
      }
      return (auto_var: auto_var, auto_type: auto_type, msg_var: msg_var, handler_id: rewritten_handler_id, maybe_status_var: maybe_status_var);
    } : auto_var instr_ids <- dependees];

    apply_instr = internal_msgs_apply(nonempty(msgs_infos));
    return (:empty_line, comment("Sending messages to dependees"), apply_instr);
  }


  Instr* updates_apply_code(StaticBlock block, [ValueStoreId] insertion_value_stores, [TableVar] opt_table_vars, [TableVar] non_opt_table_vars,
                            [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map,
                            [MembVar -> (LocVar, Maybe[LocBoolVar])] memb_var_aux_vars_map, EffectsInfo effects_info) {
    ord_value_stores = isort(insertion_value_stores);
    ord_table_vars = sort_set(opt_table_vars & non_opt_table_vars, arity(block.tables($a)) < arity(block.tables($b)));
    ord_memb_vars = isort(keys(memb_var_aux_vars_map));

    code = ();

    if ord_value_stores != () {
      code = (code | :empty_line, comment("Applying value store insertions"));
      for vs <- ord_value_stores {
        instr = value_store_apply(vs, block.value_stores(vs));
        code = (code | instr);
      }
    }

    if ord_table_vars != () {
      code = (code | :empty_line, comment("Applying table updates"));
      for v <- ord_table_vars {
        table_type = block.tables(v);
        effects = effects_info.tables(v);
        if opt_table_vars(v) {
          aux_vars, maybe_status_var = table_var_aux_vars_map(v);
          instr_id, action = only_pair(effects);
          instrs = match (action)
            insertion     = immediate_insert_instrs(block, v, block.tables(v), aux_vars, false),
            update        = immediate_insert_instrs(block, v, block.tables(v), aux_vars, true),
            deletion(as?) = immediate_delete_instrs(block, v, block.tables(v), aux_vars, as);
          if maybe_status_var != nothing {
            status_var = value(maybe_status_var);
            instrs = (do_if(status_var, instrs));
          }
        }
        else {
          value_stores = owned_value_stores(v, table_type, block);
          actions = [
              match (a)
                insertion     = :insertion,
                update        = :update,
                deletion()    = :deletion
            : _ a <- effects
          ];
          apply_instr = table_apply(v, block.tables(v), value_stores, nonempty(actions));
          instrs = (apply_instr);

          if arity(table_type) == 1 {
            masters_raw_columns = prg_data.masters_raw_columns(block.name);
            if masters_raw_columns(v, _) {
              capacity_var = new_unique_int32_var(:unused);
              new_capacity_var = new_unique_int32_var(:unused);
              capacity_expr = get_capacity(v, table_type);
              resize_instrs = (
                resize_mandatory_column(c, cast_mandatory_column(block.tables(c)), capacity_var, new_capacity_var)
                : c <- isort([c : c <- masters_raw_columns(v, ?)])
              );
              instrs = (
                set_ivar32(capacity_var, capacity_expr),
                apply_instr,
                set_ivar32(new_capacity_var, capacity_expr),
                do_if_not(are_eq(capacity_var, new_capacity_var), resize_instrs)
              );
            }
          }
        }
        code = code & instrs;
      }
    }

    if ord_memb_vars != () {
      code = (code | :empty_line, comment("Applying member var updates"));
      for v <- ord_memb_vars {
        aux_var, maybe_status_var = memb_var_aux_vars_map(v);
        instr = set_var(v, aux_var);
        if maybe_status_var != nothing {
          status_var = value(maybe_status_var);
          instr = do_if(status_var, (instr));
        }
        code = (code | instr);
      }
    }

    return code;


    Maybe[(ValueStoreId, ValueStoreType)]+ owned_value_stores(TableVar table_var, AnySurrTable table, StaticBlock block) = (
      { owner = block.value_stores_owners(vs);
        if owner == phys_col(original_rel_var(table_var), i) {
          store_type = block.value_stores(vs);
          return just((vs, store_type));
        }
        else
          return nothing;
      } : vs @ i <- table.value_stores
    );


    Maybe[(ValueStoreId, ValueStoreType)]+ owned_value_stores(TableVar table_var, Column column, StaticBlock block) {
      store = column.value_store;
      store_type = block.value_stores(store);
      owner = block.value_stores_owners(store);
      first_col = phys_col(original_rel_var(table_var), 0);
      return (maybe((store, store_type), owner == first_col), nothing);
    }


    Maybe[(ValueStoreId, ValueStoreType)]+ owned_value_stores(TableVar, <MandatoryColumn, SlaveColumn> column, StaticBlock) =
      (nothing : _ < arity(column));


    Instr* immediate_delete_instrs(StaticBlock block, TableVar table_var, <Table, MasterBinTable> table, OptAuxTableVar+ aux_vars, Bool+ known_args) {
      fail if not aux_vars :: OptLocInt32Var+;

      arity = arity(table);
      assert |known_args| == arity;

      owned_value_stores = owned_value_stores(table_var, table, block);
      assert |owned_value_stores| == arity;
      args = (if is_known then just(cast_int32_var(aux_vars(i))) else nothing : is_known @ i <- known_args);

      code = ();

      // Releasing unknow arguments before the delete
      if (a <- args : a != nothing) {
        for arg @ i <- args
          if arg == nothing {
            value_store_info = owned_value_stores(i);
            if value_store_info != nothing {
              store, store_type = value(value_store_info);
              code = (code | release_before_delete(table_var, table, args, i, store, store_type));
            }
          }
      }

      // Deleting from the table
      code = (code | immediate_delete_tuple(table_var, table, args));

      // Releasing know arguments after the delete
      for maybe_arg @ i <- args {
        value_store_info = owned_value_stores(i);
        if maybe_arg != nothing and value_store_info != nothing {
          arg = value(maybe_arg);
          store, store_type = value(value_store_info);
          retain_cond = table_contains(table_var, table, (maybe(arg, i == j) : j < arity));
          release_instr = value_store_release(store, store_type, arg);
          code = (code | do_if_not(retain_cond, (release_instr)));
        }
      }

      // Clearing everything after deleting the entire content of the table
      if not (a <- args : a != nothing) {
        for vs_info @ i <- owned_value_stores
          if vs_info != nothing {
            store, store_type = value(vs_info);
            code = (code | value_store_clear(store, store_type));
          }
      }

      return code;
    }


    Instr* immediate_delete_instrs(StaticBlock block, TableVar table_var, SlaveTernTable table, OptAuxTableVar+ aux_vars, Bool+ known_args) {
      assert owned_value_stores(table_var, table, block) :: (Nothing, Nothing, Maybe[(ValueStoreId, ValueStoreType)]);
      assert in(known_args, [(true, false), (false, true), (false, false)]); ## WHAT ABOUT (true, true)?

      args = (maybe(cast_int32_var(aux_vars(i)), is_known) : is_known @ i <- known_args);
      code = (immediate_delete_tuple(table_var, table, args));

      value_store_3_info = owned_value_stores(table_var, table, block)(2);
      if value_store_3_info != nothing {
        store, store_type = value(value_store_3_info);
        if known_args == (true, false) {
          release_instr = release_before_delete(table_var, table, args, 2, store, store_type);
          code = (release_instr) & code;
        }
        else if known_args == (false, true) {
          arg3 = cast_int32_var(aux_vars(1));
          code = (code | value_store_release(store, store_type, arg3));
        }
        else {
          assert known_args == (false, false);
          code = (code | value_store_clear(store, store_type));
        }
      }

      return code;
    }


    Instr* immediate_delete_instrs(StaticBlock block, TableVar table_var, Column column, OptAuxTableVar+ aux_vars, Bool+ known_args) {
      assert owned_value_stores(table_var, column, block) :: (Maybe[(ValueStoreId, ValueStoreType)], Nothing);
      assert known_args == (true, false) or known_args == (false, false);

      args = (if is_known then just(cast_int32_var(aux_vars(i))) else nothing : is_known @ i <- known_args);
      code = (immediate_delete_tuple(table_var, column, args));

      value_store_1_info = owned_value_stores(table_var, column, block)(0);
      if value_store_1_info != nothing {
        store, store_type = value(value_store_1_info);
        if known_args == (true, false) {
          arg1 = cast_int32_var(aux_vars(0));
          code = (code | value_store_release(store, store_type, arg1));
        }
        else {
          assert known_args == (false, false);
          code = (code | value_store_clear(store, store_type));
        }
      }

      return code;
    }


    Instr* immediate_delete_instrs(StaticBlock block, TableVar table_var, <MandatoryColumn, SlaveColumn> column, OptAuxTableVar+ aux_vars, Bool+ known_args) {
      assert known_args == (true, true) or known_args == (true, false) or known_args == (false, false);

      args = (if is_known then just(cast_int32_var(aux_vars(i))) else nothing : is_known @ i <- known_args);
      return (immediate_delete_tuple(table_var, column, args));
    }

    ////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////

    ## BUG BUG BUG: TEST THIS BETTER WITH SLAVE TERNARY TABLES, WITH BOTH TWO AND THREE ARGUMENTS
    Instr* immediate_insert_instrs(StaticBlock block, TableVar table_var, <Table, MasterBinTable, SlaveTernTable> table, OptAuxTableVar+ aux_vars, Bool is_forced) {
      aux_surr_vars = cast_int32_var_seq(aux_vars);

      if is_forced and table.keys != [] {
        owned_value_stores = owned_value_stores(table_var, table, block);
        instr = immediate_update_tuple(table_var, table, aux_surr_vars, owned_value_stores);
      }
      else
        instr = immediate_insert_tuple(table_var, table, aux_surr_vars);

      if arity(table) == 1 {
        masters_raw_columns = prg_data.masters_raw_columns(block.name);
        if masters_raw_columns(table_var, _) {
          raw_cols = isort([v : v <- masters_raw_columns(table_var, ?)]);
          capacity_var = new_unique_int32_var(:unused);
          new_capacity_var = new_unique_int32_var(:unused);
          capacity_expr = get_capacity(table_var, table);
          resize_instrs = (resize_mandatory_column(v, cast_mandatory_column(block.tables(v)), capacity_var, new_capacity_var) : v <- raw_cols);
          return (
            set_ivar32(capacity_var, capacity_expr),
            instr,
            set_ivar32(new_capacity_var, capacity_expr),
            do_if_not(are_eq(capacity_var, new_capacity_var), resize_instrs)
          );
        }
      }

      return (instr);
    }


    Instr* immediate_insert_instrs(StaticBlock block, TableVar table_var, <Column, MandatoryColumn> column, OptAuxTableVar+ aux_vars, Bool is_forced) {
      assert |aux_vars| == 2;
      key_var = cast_int32_var(aux_vars(0));
      value_var = cast_aux_table_var(aux_vars(1));
      return (column_insert_immediate(table_var, column, key_var, value_var, is_forced));
    }


    Instr* immediate_insert_instrs(StaticBlock block, TableVar table_var, SlaveColumn column, OptAuxTableVar+ aux_vars, Bool is_forced) {
      assert |aux_vars| == 2 or |aux_vars| == 3;
      if |aux_vars| == 2 {
        key_var = cast_int32_var(aux_vars(0));
        value_var = cast_aux_table_var(aux_vars(1));
        return (column_insert_immediate(table_var, column, key_var, value_var, is_forced));
      }
      else {
        arg1_var = cast_int32_var(aux_vars(0));
        arg2_var = cast_int32_var(aux_vars(1));
        value_var = cast_aux_table_var(aux_vars(2));
        assoc_surr_var = new_unique_int32_var(:unused);
        master_type = cast_master_bin_table(prg_data.tables(block.name)(column.master));
        return (
          // get_assoc_surr(table_var: AnyTableVar, table_type: MasterBinTable, args: (Int32Var, Int32Var)),
          set_ivar32(assoc_surr_var, get_assoc_surr(column.master, master_type, (arg1_var, arg2_var))),
          column_insert_immediate(table_var, column, assoc_surr_var, value_var, is_forced)
        );
      }
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Instr* updates_reset_code(StaticBlock block, [ValueStoreId] insertion_value_stores, [TableVar] non_opt_table_vars) {
  code = ();

  if insertion_value_stores != [] {
    code = (code | :empty_line, comment("Resetting auxiliary structures of value stores"));
    for vs <- insertion_value_stores
      code = (code | value_store_reset(vs, block.value_stores(vs)));
  }

  if non_opt_table_vars != [] {
    code = (code | :empty_line, comment("Resetting auxiliary structures of non-optimized tables"));
    for v <- isort(non_opt_table_vars)
      code = (code | table_reset(v, block.tables(v)));
  }

  ## BUG BUG BUG: DO I NEED TO RESET MEMBER VARIABLES HERE?
  // memb_vars_code = (
  //   native_var_ref_name(pending_state_var(bare_id(v))) & " = make_blank_obj();"
  //   : v <- isort(memb_vars)
  // );

  ## BUG BUG BUG: DO I NEED TO RESET THE MASTERS? I THINK SO
  // ## BAD BAD BAD AND MAYBE ALSO BUGGY
  // masters_to_partially_reset = isort([t.master : _ t <- tables, t :: <SlaveTernTable, SlaveColumn>, not tables(t.master, _)]);
  // masters_partial_reset_code = (native_call("master_bin_table_aux_partial_reset", (pending_updates_var_ref_name(t))) : t <- masters_to_partially_reset);

  return code;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit block : StaticBlock {
  [TableVar] optimizable_table_vars(EffectsInfo effects_info, [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])] table_var_aux_vars_map) {
    updated_tables = keys(effects_info.tables);
    opt_tables = [t : t es <- effects_info.tables, is_optimizable(es)];
    let table_var_aux_vars_map = table_var_aux_vars_map, effects_info = effects_info
      optimizable_foreign_keys = [
        key : key info <- block.foreign_keys, foreign_key_checking_can_be_optimized(key, info.insertion_checked, info.deletion_checked)
      ];
    loop {
      excluded_tables = [];
      for key info <- block.foreign_keys {
        if not optimizable_foreign_keys(key) {
          excluded_tables = _insert_(excluded_tables, key.origin) if opt_tables(key.origin);
          excluded_tables = _insert_(excluded_tables, key.target) if opt_tables(key.target);
        }
        if opt_tables(key.origin) and updated_tables(key.target) and not opt_tables(key.target)
          excluded_tables = _insert_(excluded_tables, key.origin);
        if opt_tables(key.target) and updated_tables(key.origin) and not opt_tables(key.origin)
          excluded_tables = _insert_(excluded_tables, key.target);
      }
      assert subset(excluded_tables, opt_tables);
      break if excluded_tables == [];
      opt_tables = opt_tables - excluded_tables;
    }
    return opt_tables;


    Bool is_optimizable([+InstrId -> TableAction] instrs_info) {
      return false if |instrs_info| != 1;
      instr_id, action = only_pair(instrs_info);
      status = instr_status(instr_id);
      return not status.multiple;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THIS IS NOT A GOOD WAY TO DO IT. IT SHOULD BE DECIDED WHILE FIGURING OUT THE EFFECTS, BECAUSE BY DOING SO
## WE COULD FOR EXAMPLE DEAL WITH THE CASE OF A MEMBER VARIABLES THAT IS SET IN BOTH BRANCHES OF AN IF STATEMENT

Bool instr_is_always_exec_once(InstrId instr_id) {
  status = instr_status(instr_id);
  return not status.optional and not status.multiple;
}


Bool memb_var_is_always_set_once([+InstrId] instr_ids) = |instr_ids| == 1 and instr_is_always_exec_once(only(instr_ids));
Bool msg_is_always_sent_once([+InstrId] instr_ids)     = |instr_ids| == 1 and instr_is_always_exec_once(only(instr_ids));

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

BasicInstr column_queue_deletes_rewrite_descr(TableVar table_var, Maybe[Int32Var]+ args, OptAuxTableVar+ aux_vars, Maybe[LocBoolVar] maybe_status_var) {
  aux_vars_strs = (
    if a != nothing
      then native_var_decl_name(cast_aux_table_var(aux_vars(i)), context = :core)
      else "*"
    : a @ i <- args
  );
  text = "delete " & user_repr(original_rel_var(table_var)) & "(" & append(aux_vars_strs, ", ") & ")";
  if maybe_status_var != nothing {
    status_var = value(maybe_status_var);
    text = text & " ? " & native_var_decl_name(status_var, context=:core);
  }
  return comment(text);
}


BasicInstr queue_insert_tuple_rewrite_descr(TableVar table_var, OptAuxTableVar+ aux_vars, Maybe[LocBoolVar] maybe_status_var, Bool forced) {
  aux_vars_strs = (native_var_decl_name(cast_aux_table_var(v), context=:core) : v <- aux_vars);
  text = if forced then "update" else "insert";
  text = text & " " & user_repr(original_rel_var(table_var)) & "(" & append(aux_vars_strs, ", ") & ")";
  if maybe_status_var != nothing {
    status_var = value(maybe_status_var);
    text = text & " ? " & native_var_decl_name(status_var, context=:core);
  }
  return comment(text);
}


BasicInstr queue_insert_master_tuple_rewrite_descr(TableVar table_var, OptAuxTableVar+ aux_vars, Maybe[LocBoolVar] maybe_status_var) {
  aux_arg_vars_strs = (native_var_decl_name(cast_aux_table_var(v), context=:core) : v <- take(aux_vars, 2));
  assoc_surr_var_str = native_var_decl_name(cast_aux_table_var(aux_vars(2)), context=:core);
  text = "insert " & user_repr(original_rel_var(table_var)) & "(" & append(aux_arg_vars_strs, ", ") & " @ " & assoc_surr_var_str & ")";
  if maybe_status_var != nothing {
    status_var = value(maybe_status_var);
    text = text & " ? " & native_var_decl_name(status_var, context=:core);
  }
  return comment(text);
}


BasicInstr column_insert_deferred_rewrite_descr(TableVar table_var, OptAuxTableVar+ aux_vars, Maybe[LocBoolVar] maybe_status_var, Bool forced) {
  key_vars_str = native_var_decl_name(cast_aux_table_var(aux_vars(0)), context = :core);
  key_vars_str = key_vars_str & ", " & native_var_decl_name(cast_aux_table_var(aux_vars(1)), context = :core) if |aux_vars| == 3;
  value_var_str = native_var_decl_name(cast_aux_table_var(last(aux_vars)), context=:core);
  text = if forced then "update" else "insert";
  text = text & " " & user_repr(original_rel_var(table_var)) & "(" & key_vars_str & " -> " & value_var_str & ")";
  if maybe_status_var != nothing {
    status_var = value(maybe_status_var);
    text = text & " ? " & native_var_decl_name(status_var, context=:core);
  }
  return comment(text);
}


BasicInstr send_internal_msg_rewrite_descr(DBSymbol auto_type, Maybe[LocBoolVar] maybe_status_var) {
  type_str = user_repr(auto_type);
  text = user_repr(auto_type) & " <- ...";
  if maybe_status_var != nothing {
    status_var = value(maybe_status_var);
    text = text & " ? " & native_var_decl_name(status_var, context=:core);
  }
  return comment(text);
}