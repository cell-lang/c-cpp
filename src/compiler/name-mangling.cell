//  A     Atom integer representation
//  B     AnyRelVar
//  C     ClsVar
//  D
//  E     Cached no-positional-argument function value
//  F     Function
//  G     Aggregate function
//  H
//  I
//  J
//  K     null_locks_count_var()
//  L     Optimized record field
//  M     MembVar                                                     MethodId
//  N     Reactive automaton named nodes
//  O
//  P                                                                             ProcSymbol
//  Q
//  R     AnyAutoVar                                                              AutoSymbol
//  S     SignalVar
//  T     AnyDBVar                                                                DBSymbol
//  U     up_to_date_var()                                            UpdateId
//  V     StdVar, env. + ImplArg, internal var + description
//  W
//  X     update_source_var()
//  Y     shadow_array_var()
//  Z

type QualifiableVars    = ObjVar, PendingInputVar, BoolVar, IntVar, Int32Var, FloatVar,
                          AnyAutoVar, AnyDBVar, AnyTableVar, AnyValueStoreId;

type UnqualifiableVars  = OptTagRecVar, VecVar, ArrayVar, ItVar, StreamVar, AnyClsVar;


implicit context : NativeContext {
  String native_var_name(LocOptTagRecVar var) =
    match (var.id)
      <+>     = printed(var.id) & "_Vr_" & printed(var.tag),
      <*..*>  = "r" & printed(var.id) & "_" & printed(var.index) & "_" & printed(var.tag);

  String native_var_name(OptTagRecFnArg var) = "a" & printed(var.id);


  String native_ptr_var_name(LocOptTagRecVar var) =
    match (var.id)
      <+>     = printed(var.id) & "_Vrp_" & printed(var.tag),
      <*..*>  = "rp" & printed(var.id) & "_" & printed(var.index) & "_" & printed(var.tag);

  String native_ptr_var_name(OptTagRecFnArg var) = "ap" & printed(var.id);


  String opt_tag_rec_name(Symbol tag, Nat idx) {
    idx_str = if idx != 0 then "_" & printed(idx) else "";
    str = "OBJ_" & upper_camel_case(tag) & idx_str;
    return match (context)
      core    = str,
      wrapper = "Cell.Generated.Static." & str;
  }

  //////////////////////////////////////////////////////////////////////////////

  String symb_id_name(Atom symb) {
    str = _print_(symb) & "_A";
    return match (context)
      core    = str,
      wrapper = "Cell.Generated.Static." & str;
  }

  String symb_id_name(SymbObj symb) =
    object(a?)  = symb_id_name(a);

  //////////////////////////////////////////////////////////////////////////////

  String native_var_decl_name(QualifiableVars v) = native_var_name(v, false);
  String native_var_ref_name(QualifiableVars v)  = native_var_name(v, true);

  String native_var_decl_name(UnqualifiableVars v) = native_var_name(v);
  String native_var_ref_name(UnqualifiableVars v)  = native_var_name(v);

  //////////////////////////////////////////////////////////////////////////////

  String native_var_decl_name(MembIntVectVar v) =
    nodes_to_update_vect_var()  = "nodesToUpdate" & printed(v.level),
    changed_outputs()           = "changedOutputs";

  //////////////////////////////////////////////////////////////////////////////

  String native_var_name(VecVar v)        = "vec" & printed(v.id);
  String native_var_name(SeqItVar v)      = "seqIt" & printed(bare_id_2(v));
  String native_var_name(SetItVar v)      = "setIt" & printed(bare_id_2(v));
  String native_var_name(BinRelItVar v)   = "binRelIt" & printed(bare_id_2(v));
  String native_var_name(TernRelItVar v)  = "ternRelIt" & printed(bare_id_2(v));
  String native_var_name(StreamVar v)     = "stream" & printed(bare_id_2(v));

  String native_var_name(ArrayVar var) =
    avar()              = "y" & printed(var.id) & "_" & native_type(var.repr, context = :core),
    shadow_array_var()  = printed(var.id) & "_Y_" & native_type(var.repr, context = :core);

  String native_var_name(TableItVar v) {
    prefix = match (v.arity, v.symmetric)
      1,  false   = "unary",
      2,  false   = "bin",
      2,  true    = "symBin",
      3,  false   = "tern",
      3,  true    = "symTern";

    return prefix & "TableIt" & printed(v.id);
  }

  String native_var_name(ColumnItVar var) {
    prefix = match (var.repr)
      object  = "obj",
      int     = "int",
      float   = "float";
    return prefix & "ColIt" & printed(var.id);
  }

  String native_var_name(SlaveColumnItVar var) {
    prefix = match (var.repr)
      object  = "obj",
      int     = "int",
      float   = "float";
    return prefix & "SlaveColIt" & printed(var.id);
  }

  String native_var_name(AnyClsVar v) =
    cls_var(<+> a?)     = _print_(a) & "_C",
    cls_var(<*..*> n?)  = "cls_" & printed(n),
    capt_cls_var(n?)    = "capt_cls[" & printed(n) & "]";

  //////////////////////////////////////////////////////////////////////////////

  String obj_type_name = "OBJ";
  String env_type_name = "ENV";
  String reader_type_name = "READER";
  String writer_type_name = "WRITER";

  String env_arg_name = "env";
  String auto_or_db_arg_name = "target";
  String db_auxiliary_arg_name = "auxiliary";

  String native_dependee_name(DBSymbol, Nat index) = "dependee_" & printed(index);

  String write_str_proc_name  = "write_str";
  String write_symb_proc_name = "write_symb";
  String write_obj_proc_name  = "write_obj";

  String finish_write_proc_name = "finish_write";

  // String symb_repr_proc_name = "symb_repr";

  String target_arg_decl(DBSymbol db_type) = native_name(db_type) & " *" & auto_or_db_arg_name;
  String auxiliary_arg_decl(DBSymbol db_type) = native_updater_name(db_type) & " *" & db_auxiliary_arg_name;

  String env_arg_decl = env_type_name & " &" & env_arg_name;

  //////////////////////////////////////////////////////////////////////////////

  String native_var_name(<ObjVar, PendingInputVar> var, Bool add_prefix) {
    assert match (var)
      qual_signal_var() |
      qual_memb_var()   = add_prefix,
      _                 = true;

    prefix = if add_prefix
      then match (var)
        impl_arg()          = env_arg_name & ".",
        prev_var_value()    = auto_or_db_arg_name & "->",
        pending_state_var() = db_auxiliary_arg_name & "->",
        _                   = auto_or_db_arg_name & "->"
      else "";

    return match (var)
      var(<+> a?)                   = { match (hidden_var_id(a))
                                          just(n?)  = "h" & _print_(n),
                                          nothing   = _print_(a) & "_V"
                                      },
      fn_arg(<*..*> n?)             = "a" & printed(n),
      impl_arg(<+> a?)              = prefix & _print_(a) & "_V",
      capt_var(<*..*> n?)           = "capt_vars["  & printed(n) & "]",
      memb_var(<+> a?)              = prefix & _print_(a) & "_M",
      signal_var(a?)                = prefix & _print_(a) & "_S",
      qual_signal_var()             = native_var_name(var.auto_var, true) & "." & native_var_name(var.memb_var, false),
      qual_memb_var()               = native_var_name(var.db_var, true) & "." & native_var_name(var.memb_var, false),
      watched_signal_value_var(a?)  = prefix & _print_(a) & "_Sw",
      prev_var_value(v?)            = prefix & ad_hoc_var_name(v) & "d",
      pending_state_var(a?)         = prefix & _print_(a) & "_Mp",
      lvar(<*..*> n?)               = "v" & printed(n),
      evar()                        = "vec" & printed(var.id) & "[(int)(" & native_idx_expr(var.idx) & ")]",
      pending_input_var(<+> a?)     = prefix & _print_(a) & "_Sp";


    String ad_hoc_var_name(SignalVar var)     = native_var_decl_name(var);
    String ad_hoc_var_name(QualSignalVar var) = ad_hoc_var_name(var.auto_var) & "_" & ad_hoc_var_name(var.memb_var);
    String ad_hoc_var_name(NestedAutoVar var) = native_var_name(var, false);
    String ad_hoc_var_name(LocAutoVar)        = undefined;
  }


  String native_var_name(BoolVar var, Bool add_prefix) {
    prefix = if add_prefix then "this." else "";
    return match (var)
      bvar(<+> s?)                                  = { match (hidden_var_id(s))
                                                          just(n?)  = "hb" & _print_(n),
                                                          nothing   = printed(s) & "_Vb"
                                                      },
      bvar(<*..*> n?)                               = "b" & printed(n),
      bool_arg(n?)                                  = "a" & printed(n),
      cond_value_var(n?)                            = prefix & "cond_" & printed(n),
      cond_is_def_var(n?)                           = prefix & "cond_def_" & printed(n),
      watched_signal_up_to_date_var(a?)             = prefix & _print_(a) & "_Uw",
      up_to_date_var(std_block_node_id(a?))         = prefix & _print_(a) & "_U",
      up_to_date_var(cond_node_id(n?))              = prefix & "cond_up_to_date_" & printed(n),
      up_to_date_var(nested_auto_node_id(a?))       = prefix & _print_(a) & "_Ua",
      up_to_date_var(nested_auto_input_id() id?)    = prefix & _print_(id.auto) & "_Ua_" & _print_(id.input),
      is_new                                        = prefix & "is_new",
      qual_bool_var() = native_var_name(var.auto_var, add_prefix) & "." & native_var_name(var.memb_var, false);
  }


  String native_var_name(IntVar v, Bool add_prefix) {
    assert match (v)
      changed_output()  |
      elapsed_time()    = add_prefix,
      _                 = true;

    prefix = if add_prefix then "this." else "";
    return match (v)
      ivar(<+> s?)                        = printed(s) & "_Vl",
      ivar(<*..*> n?)                     = "l" & printed(n),
      int_arg(n?)                         = "a" & printed(n),
      curr_time                           = "curr_time",
      update_time                         = "update_time",
      update_expr_index                   = "update_expr_index",
      update_source_var(a?)               = prefix & _print_(a) & "_V_update_source",
      null_locks_count_var(a?)            = prefix & _print_(a) & "_V_null_locks_count",
      update_count_var(l?)                = prefix & "updateCount" & printed(l),
      nodes_to_update_var()               = prefix & "nodesToUpdate" & printed(v.level) & "[(int) (" & native_idx_expr(v.index) & ")]",
      next_trigger_time_var(a?)           = prefix & _print_(a) & "_V_next_trigger_time",
      curr_time_slot_var(a?)              = prefix & _print_(a) & "_V_curr_time_slot",
      time_triggers_count_var             = prefix & "time_triggers_count",
      trigger_times_heap_var(i?)          = prefix & "trigger_times_heap[" & printed(i) & "]",
      time_varying_cond_ids_heap_var(i?)  = prefix & "time_varying_cond_ids_heap[" & printed(i) & "]",
      last_update_time                    = prefix & "last_update_time",
      elapsed_time                        = prefix & "elapsed_time",
      changed_outputs_count               = prefix & "changedOutputsCount",
      changed_output()                    = prefix & "changedOutputs[(int) (" & native_idx_expr(v.index) & ")]",
      elapsed_time(av?)                   = native_var_name(av, false) & ".elapsed_time",
      nested_auto_int_var()               = native_var_name(v.auto_var, true) & "." & native_var_name(v.memb_var, false);
  }


  String native_var_name(Int32Var, Bool add_prefix) =
    ivar32(n?)                    = "i" & printed(n),
    shadow_surr_var(v?)           = _print_(bare_id(v)) & "_Vs",
    shadow_array_size_var(s?)     = _print_(s) & "_Ys",
    shadow_array_capacity_var(s?) = _print_(s) & "_Yc";


  String native_var_name(FloatVar v, Bool add_prefix) =
    fvar(<+> s?)    = printed(s) & "_Vf",
    fvar(<*..*> n?) = "f" & printed(n),
    float_arg(n?)   = "a" & printed(n);


  String native_var_name(AnyAutoVar v, Bool add_prefix) =
    loc_auto_var(a?)    = _print_(a) & "_R",
    nested_auto_var(a?) = {if add_prefix then "this." else ""} & _print_(a) & "_R";


  String native_var_name(AnyDBVar v, Bool add_prefix) =
    loc_db_var(a?)    = _print_(a) & "_T",
    linked_db_var(n?) = {if add_prefix then "this." else ""} & "linkedAuto" & printed(n),
    qual_db_var()     = native_var_name(v.outer, add_prefix) & "." & native_var_name(v.inner, false);


  String native_var_name(AnyTableVar var, Bool add_prefix) {
    return match (var)
      table_var(v?)             = {if add_prefix then "this." else ""} & native_name(v),
      qual_table_var()          = native_var_name(var.db_var, add_prefix) & "." & native_var_name(var.table_var, false),
      capt_table_var(v?)        = { assert add_prefix; return "this.capt_auto." & native_var_name(v, false);};

    String native_name(PhysRelVar) =
      phys_rel_var(s?)      = _print_(s) & "_B",
      split_rel_var(v?, n?) = native_name(v) & "_" & _print_(n);
  }


  String native_var_name(AnyValueStoreId v, Bool add_prefix) =
    value_store_id(n?)        = {if add_prefix then "this." else ""} & "valueStore" & printed(n),
    nested_value_store_id()   = { assert add_prefix;
                                  db_var_str = native_var_name(v.db_var, true);
                                  return db_var_str & "." & native_var_name(v.store_id, false);
                                },
    capt_value_store_id(id?)  = { assert add_prefix;
                                  return "this.capt_auto." & native_var_name(id, false);
                                };

  //////////////////////////////////////////////////////////////////////////////

  String native_idx_expr(Nat n)                             = printed(n);
  String native_idx_expr(IntVar v)                          = native_var_ref_name(v);
  String native_idx_expr(<add(val1: IntVar, val2: Nat)> e)  = native_var_ref_name(e.val1) & " + " & printed(e.val2);

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  String native_surr_obj_mapper_name(ValueStoreId v) =
    value_store_id(n?)  = "surrToObj" & printed(n);


  String pending_updates_var_decl_name(TableVar var) {
    return match (var)
      table_var(v?) = native_name(v);

    String native_name(PhysRelVar) =
      phys_rel_var(s?)      = _print_(s) & "_Bp",
      split_rel_var(v?, n?) = native_name(v) & "_" & _print_(n);
  }

  String pending_updates_var_ref_name(TableVar table_var) = "updater." & pending_updates_var_decl_name(table_var);

  String dependee_msg_var_decl_name(LinkedDBVar) =
    linked_db_var(i?)   = "linkedAutoMsg" & _print_(i);

  String dependee_msg_var_ref_name(LinkedDBVar var) = "updater." & dependee_msg_var_decl_name(var);

  String dependee_apply_code_var_decl_name(LinkedDBVar) =
    linked_db_var(i?) = "linkedAutoApplyCode" & _print_(i);

  String dependee_apply_code_var_ref_name(LinkedDBVar var) = "updater." & dependee_apply_code_var_decl_name(var);

  String updater_var_decl_name(LocDBVar db_var) = native_var_decl_name(db_var) & "x";

  String updater_var_decl_name(LinkedDBVar db_var) =
    linked_db_var(i?)   = "linkedUpdater" & _print_(i);

  String updater_var_ref_name(LocDBVar db_var) = updater_var_decl_name(db_var);

  String updater_var_ref_name(LinkedDBVar db_var) = "updater." & updater_var_decl_name(db_var);

  String updater_var_decl_name(ValueStoreId vs) =
    value_store_id(n?)  = "valueStoreUpdater" & printed(n);

  String updater_var_ref_name(ValueStoreId vs) = "updater." & updater_var_decl_name(vs);

  String foreign_key_checker_decl_name(BlockForeignKey key) = undefined;
  String foreign_key_checker_ref_name(BlockForeignKey key) = undefined;

  String native_foreign_key_checker_type(BlockForeignKey, AnyTable, AnyTable) = undefined;

  //////////////////////////////////////////////////////////////////////////////

  String var_decl(AnyVar v) =
    vvar() = "OBJ " & native_var_decl_name(v) & "[" & printed(v.size) & "];",
    _      = native_var_type(v) & " " & native_var_decl_name(v) & ";";

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  String time_slots_table_name(AutoSymbol auto_name, Atom table_id) =
    native_name(auto_name) & "_" & _print_(table_id) & "_Bt";


  String native_var_type(ObjVar)            = qualify("OBJ");
  String native_var_type(IntVar)            = "int64";
  String native_var_type(Int32Var)          = "int32";
  String native_var_type(MembIntVectVar)    = "int64[]";
  String native_var_type(BoolVar)           = "bool";
  String native_var_type(FloatVar)          = "double";

  String native_var_type(OptTagRecVar var) = qualify("OBJ"); // opt_tag_rec_name(var.tag, var.index);

  String native_var_type(SeqItVar v)     = qualify("SEQ_ITER");
  String native_var_type(SetItVar v)     = qualify("SET_ITER");
  String native_var_type(BinRelItVar v)  = qualify("BIN_REL_ITER");
  String native_var_type(TernRelItVar v) = qualify("TERN_REL_ITER");
  String native_var_type(StreamVar v)    = qualify("STREAM");

  String native_var_type(VecVar v)       = undefined;
  String native_var_type(ArrayVar v)     = native_elt_type(v) & "[]";

  String native_var_type(TableItVar v)        = table_it_var_type(v);
  String native_var_type(ColumnItVar v)       = column_it_var_type(v);
  String native_var_type(SlaveColumnItVar v)  = slave_column_it_var_type(v);


  String native_elt_type(ArrayVar var) = native_type(var.repr);


  String native_type(LowLevelEltRepr) =
    bool      = "bool",
    int8      = "int8",
    nat8      = "uint8",
    int16     = "int16",
    int32     = "int32",
    int       = "int64",
    float     = "double",
    symbol    |
    object    = qualify("OBJ"),
    array()   = undefined;


  String native_type(OptTagRecRepr repr) = qualify("OBJ"); // opt_tag_rec_name(repr.tag, repr.index);

  //////////////////////////////////////////////////////////////////////////////

  String native_alloc_fn(LowLevelEltRepr) =
    bool      = "new_bool_array",
    int8      = "new_int8_array",
    nat8      = "new_uint8_array",
    int16     = "new_int16_array",
    int32     = "new_int32_array",
    int       = "new_int64_array",
    float     = "new_float_array",
    symbol    |
    object    = "new_obj_array",
    array()   = undefined;

  //////////////////////////////////////////////////////////////////////////////

  String native_ptr_type(OptTagRecVar var) = opt_tag_rec_name(var.tag, var.index);

  //////////////////////////////////////////////////////////////////////////////

  String native_fn_name(<FnId, MembTestPredId, SubAggrFnId, ProcSymbol, ConvFnId> id) {
    str = native_fn_name(id);
    return match (context)
      core    = str,
      wrapper = str; // "Cell.Generated.Static." & str;


    String native_fn_name(FnId id) =
      fn_family_id()    = native_fn_symb_name(id.symbol, id.arity),
      unique_fn_id()    = native_fn_name(id.family) & uppercase_encoding(id.id),
      nested_fn_id()    = native_fn_name(id.outer) & "_" & native_fn_name(id.inner);

    String native_fn_name(MembTestPredId) =
      memb_test(<+> a?)         = "is" & upper_camel_case(a),
      memb_test(<*..*> n?)      = "is_type_" & printed(n),
      memb_test(a1?, <+> a2?)   = "is" & upper_camel_case(a2) & "_" & upper_camel_case(a1),
      memb_test(a?, <*..*> n?)  = "is" & upper_camel_case(a) & "_" & printed(n);

    String native_fn_name(SubAggrFnId) =
      red_var_init(id?, v?)   = native_fn_base_name(id) & "i_" & _print_(_untag_(v)),
      red_vars_merge(id?, v?) = native_fn_base_name(id) & "m_" & _print_(_untag_(v)),
      final_value_yield(id?)  = native_fn_base_name(id) & "f",
      null_value(id?)         = native_fn_base_name(id) & "e";

    String native_fn_name(ProcSymbol proc_symb) {
      bare_symb = match (proc_symb) proc_symbol(s?) = s;
      return upper_camel_case(bare_symb) & "_P";
    }

    String native_fn_name(ConvFnId fn_id) =
      any_tag_obj_conv          = "opt_repr",
      tag_rec_conv(t?)          = "opt_repr_" & _print_(t),
      tag_rec_repr_conv(t?, i?) = "opt_repr_" & _print_(t) & "_" & _print_(i);
  }

  //////////////////////////////////////////////////////////////////////////////

  String memo_var_name(<ProcSymbol, MembTestPredId, SubAggrFnId, ConvFnId>) = undefined;

  String memo_var_name(FnId id) =
    fn_family_id()  = native_fn_symb_name(id.symbol) & "_E",
    unique_fn_id()  = memo_var_name(id.family) & printed(id.id),
    nested_fn_id()  = native_fn_name(id.outer) & "_" & memo_var_name(id.inner);
}

////////////////////////////////////////////////////////////////////////////////

String native_fn_symb_name(FnSymbol fn_symb, Nat arity) =
  fn_symbol(symb?)    = _print_(symb) & "_F" & printed(arity),
  op_symbol(op?)      = _print_(op);

String native_fn_symb_name(FnSymbol fn_symb) =
  fn_symbol(symb?)    = _print_(symb),
  op_symbol(op?)      = _print_(op);

String native_fn_base_name(AggrFnId) =
  aggr_fn_id(s?)            = _print_(s) & "_G",
  unique_aggr_fn_id(s?, i?) = _print_(s) & "_G" & uppercase_encoding(i);

////////////////////////////////////////////////////////////////////////////////

String opt_rec_field_name(Symbol label) = printed(label) & "_L";

String opt_rec_field_nonempty_test_var(Symbol label) = printed(label) & "_Ls";

////////////////////////////////////////////////////////////////////////////////

String block_label(Int id) = "block" & printed(id);

////////////////////////////////////////////////////////////////////////////////

Bool is_nullable(LowLevelEltRepr) =
  bool      |
  int8      |
  nat8      |
  int16     |
  int32     |
  int       |
  float     = false,
  symbol    |
  object    = true,
  array()   = undefined;

Bool is_nullable(OptTagRecRepr) = true;


String native_table_type(Table table) =
  match (arity(table), table.symmetric)
    1,  false   = "UNARY_TABLE",
    2,  false   = "BIN_TABLE",
    2,  true    = "SYM_BIN_TABLE",
    3,  false   = "TERN_TABLE",
    3,  true    = "SYM12_TERN_TABLE";

String native_table_type(MasterBinTable) = "MASTER_BIN_TABLE";
String native_table_type(SlaveTernTable) = "SLAVE_TERN_TABLE";

String native_table_type(<Column, SlaveColumn> column) =
  match (column.repr)
    object    = "OBJ_COL",
    int       = "INT_COL",
    float     = "FLOAT_COL";


String native_table_base_type(<Table, MasterBinTable, SlaveTernTable> table)  = native_table_type(table);
String native_table_base_type(<Column, SlaveColumn>)                          = "ANY_COL";


String table_it_var_type(TableItVar var) =
  match (var.arity, var.symmetric)
    1,  false   = "UNARY_TABLE_ITER",
    2,  false   = "BIN_TABLE_ITER",
    2,  true    = "SYM_BIN_TABLE_ITER",
    3,  false   = "TERN_TABLE_ITER",
    3,  true    = "SYM12_TERN_TABLE_ITER";

String column_it_var_type(ColumnItVar var) =
  match (var.repr)
    object    = "OBJ_COL_ITER",
    int       = "INT_COL_ITER",
    float     = "FLOAT_COL_ITER";

String slave_column_it_var_type(SlaveColumnItVar var) =
  match (var.repr)
    object    = "OBJ_COL_ITER",
    int       = "INT_COL_ITER",
    float     = "FLOAT_COL_ITER";

String pending_updates_var_type(AnyTable) = "INVALID_TYPE_NAME";

String native_name(ValueStoreType) =
  integer               |
  mono_tagged_integer() = "INT_STORE",
  object                = "OBJ_STORE";

String native_updater_type(ValueStoreType vs) = native_name(vs) & "_UPDATER";

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String native_const(<blank>)     = "make_blank_obj()";
String native_const(<undefined>) = "make_null_obj()";

////////////////////////////////////////////////////////////////////////////////

String native_name(AutoSymbol) = auto_symbol(a?) = upper_camel_case(a) & "_R";

String native_name(DBSymbol) = db_symbol(a?) = upper_camel_case(a) & "_T";

String native_updater_name(<AutoSymbol, DBSymbol> symb) = native_name(symb) & "x";

String qualified_name(AutoSymbol db_type, String local_name)  = auto_symbol(a?) = upper_camel_case(a) & "__" & local_name;
String qualified_name(DBSymbol db_type, String local_name)    =   db_symbol(a?) = upper_camel_case(a) & "__" & local_name;

String native_name(<AutoSymbol, DBSymbol> auto_or_db_type, MethodId meth_id) {
  id_str = if meth_id.id? then uppercase_encoding(meth_id.id) else "";
  base_name = _print_(bare_id(meth_id.symbol)) & "_M" & printed(meth_id.arity) & id_str;
  return qualified_name(auto_or_db_type, base_name);
}

String native_name(DBSymbol db_type, UpdateId id) {
  base_name = match (id)
    main_handler    = "msg_handler",
    handler_id(n?)  = "msg_handler_" & uppercase_encoding(n),
    update_id()     = { id_str = if id.id? then uppercase_encoding(id.id) else "";
                        return _print_(bare_id(id.symbol)) & "_U" & printed(id.arity) & id_str;
                      };
  return qualified_name(db_type, base_name);
}

String native_apply_method_name(DBSymbol db_type, <main_handler>) = qualified_name(db_type,"msg_handler_apply");

String native_apply_method_name(DBSymbol db_type, <handler_id(Nat)> id) = qualified_name(db_type, "msg_handler_apply_" & uppercase_encoding(_untag_(id)));

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String init_method_name           (DBSymbol db_type) = qualified_name(db_type, "init");
String init_set_state_method_name (DBSymbol db_type) = qualified_name(db_type, "set_init_state");
String init_load_state_method_name(DBSymbol db_type) = qualified_name(db_type, "load_init_state");
String cleanup_method_name        (DBSymbol db_type) = qualified_name(db_type, "cleanup");
String copy_state_proc_name       (DBSymbol db_type) = qualified_name(db_type, "copy_state");
String write_state_proc_name      (DBSymbol db_type) = qualified_name(db_type, "write_state");
String set_state_proc_name        (DBSymbol db_type) = qualified_name(db_type, "set_state");
String load_state_proc_name       (DBSymbol db_type) = qualified_name(db_type, "load_state");
String updater_creation_proc_name (DBSymbol db_type) = qualified_name(db_type, "new_updater");
String updater_reset_proc_name    (DBSymbol db_type) = qualified_name(db_type, "reset_updater");
String updates_copy_proc_name     (DBSymbol db_type) = qualified_name(db_type, "copy");
String updates_apply_proc_name    (DBSymbol db_type) = qualified_name(db_type, "apply");
String updates_finish_proc_name   (DBSymbol db_type) = qualified_name(db_type, "finish");
String updates_check_proc_name    (DBSymbol db_type) = qualified_name(db_type, "check");
String full_check_proc_name       (DBSymbol db_type) = qualified_name(db_type, "full_check");
String update_entry_point_name    (DBSymbol db_type) = qualified_name(db_type, "update_entry_point");
String load_state_entry_point_name(DBSymbol db_type) = qualified_name(db_type, "load_state_entry_point");
String save_state_entry_point_name(DBSymbol db_type) = qualified_name(db_type, "save_state_entry_point");

String state_is_def_proc_name(AutoSymbol auto_type) = qualified_name(auto_type, "state_is_def");

String set_state_proc_name(AutoSymbol auto_type) = qualified_name(auto_type, "set_state");

String copy_state_proc_name     (AutoSymbol auto_type) = qualified_name(auto_type, "copy_state");
String pre_init_method_name     (AutoSymbol auto_type) = qualified_name(auto_type, "preinit");
String apply_method_name        (AutoSymbol auto_type) = qualified_name(auto_type, "apply");
String cleanup_method_name      (AutoSymbol auto_type) = qualified_name(auto_type, "cleanup");
String insert_timer_method_name (AutoSymbol auto_type) = qualified_name(auto_type, "insert_timer");
String clear_timer_method_name  (AutoSymbol auto_type) = qualified_name(auto_type, "clear_timer");

String update_name(DBSymbol db, UpdateId id) = native_name(db, id);
String user_def_method_name(<AutoSymbol, DBSymbol> type, MethodId method) = native_name(type, method);

String input_set_method_name(AutoSymbol auto, Atom input) = _print_(input) & "_S_set";

String node_update_method_name(AutoSymbol auto_type,  BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_update";
String queue_node_update_method_name(AutoSymbol auto_type, BlockNodeId node_id) = node_specific_method_name_prefix(node_id, auto_type) & "_invalidate";

String node_specific_method_name_prefix(BlockNodeId id, AutoSymbol auto) =
  std_block_node_id(a?)   = _print_(a) & "_N",
  cond_node_id(n?)        = "cond_node_" & printed(n),
  nested_auto_node_id(a?) = _print_(a) & "_Na",
  nested_auto_input_id()  = _print_(id.auto) & "_Na_" & _print_(id.input);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String const_int_seq_name(Nat seq_id) = "const_ints_seq_" & printed(seq_id);

String const_symb_seq_name(Nat seq_id) = "const_symbs_seq_" & printed(seq_id);

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

String lower_camel_case(Atom a) = lower_camel_case(_print_(a), false);

String lower_camel_case(String s, Bool keep_underscores) {
  first = false;
  res = ();
  for ch @ i <- chars(s) {
    tr_ch = ch;
    if ch == ascii_underscore {
      first = true;
    }
    else {
      tr_ch = nat(ch - ascii_lower_a + ascii_upper_a) if ch >= ascii_lower_a and ch <= ascii_lower_z and first; ## CREATE PRELUDE FUNCTION is_lower()/is_upper() AND to_lower()/to_upper()
      first = false;
    }
    res = res & (tr_ch if tr_ch != ascii_underscore or keep_underscores);
  }
  return string(res);
}