implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol], qualified : Bool {
  String native_input_inter_type(EltInterType it, Bool nullable) {
    return match (it)
      bool                = "bool"          & if nullable then " *" else "",
      byte                = "unsigned char" & if nullable then " *" else "",
      int32               = "int"           & if nullable then " *" else "",
      integer             = "long long"     & if nullable then " *" else "",
      float               = "double"        & if nullable then " *" else "",
      date                = full_type("std::string", nullable),
      time                = full_type("std::string", nullable),
      optional(t?)        = native_input_inter_type(t, true) & if nullable then " *" else "",
      symbol()            = full_type("std::string", nullable),
      record(fs?)         = full_type("std::string", nullable),
      tuple(ts?)          = full_type("std::tuple<" & append((native_nested_inter_type(t, false) : t <- ts), ", ") & ">", nullable),
      seq(t?)             |
      set(t?)             = full_type("std::vector<" & native_nested_inter_type(t, false) & ">", nullable),
      bin_rel(ts?)        |
      tern_rel(ts?)       = full_type("std::vector<std::tuple<" & append((native_nested_inter_type(t, false) : t <- ts), ", ") & ">>", nullable),
      tagged(_, t?)       = native_input_inter_type(t, nullable),
      string              |
      generic             = full_type("std::string", nullable),
      generated(ts?)      = full_type(gen_class_name(bare_id(ts)), nullable);


    String full_type(String base_type, Bool nullable) = if nullable then base_type & " *" else "const " & base_type & " &";
  }


  String native_nested_inter_type(EltInterType it, Bool nullable) {
    return match (it)
      bool                = "bool"          & if nullable then " *" else "",
      byte                = "unsigned char" & if nullable then " *" else "",
      int32               = "int"           & if nullable then " *" else "",
      integer             = "long long"     & if nullable then " *" else "",
      float               = "double"        & if nullable then " *" else "",
      date                = "std::string"   & if nullable then " *" else "",
      time                = "std::string"   & if nullable then " *" else "",
      optional(t?)        = native_nested_inter_type(t, true) & if nullable then " *" else "",
      symbol()            = "std::string" & if nullable then " *" else "",
      record(fs?)         = "std::string" & if nullable then " *" else "",
      tuple(ts?)          = "std::tuple<" & append((native_nested_inter_type(t, false) : t <- ts), ", ") & ">" & if nullable then " *" else "",
      seq(t?)             |
      set(t?)             = "std::vector<" & native_nested_inter_type(t, false) & ">" & if nullable then " *" else "",
      bin_rel(ts?)        |
      tern_rel(ts?)       = "std::vector<std::tuple<" & append((native_nested_inter_type(t, false) : t <- ts), ", ") & ">>" & if nullable then " *" else "",
      tagged(_, t?)       = native_nested_inter_type(t, nullable),
      string              |
      generic             = "std::string" & if nullable then " *" else "",
      generated(ts?)      = native_generated_nested_inter_type(ts, nullable);


    String native_generated_nested_inter_type(BasicTypeSymbol type_symb, Bool nullable) {
      bare_type_id = bare_id(type_symb);
      native_type = gen_class_name(bare_type_id);
      is_ptr = nullable or not is_concrete_class(bare_type_id);
      native_type = native_type & " *" if is_ptr;
      return native_type;
    }
  }


  String native_output_inter_type(EltInterType it, Bool nullable) {
    return match (it)
      bool                = nullify_if_needed("bool", nullable),
      byte                = nullify_if_needed("unsigned char", nullable),
      int32               = nullify_if_needed("int", nullable),
      integer             = nullify_if_needed("long long", nullable),
      float               = nullify_if_needed("double", nullable),
      date                = nullify_if_needed("std::string", nullable),
      time                = nullify_if_needed("std::string", nullable),
      optional(t?)        = nullify_if_needed(native_output_inter_type(t, true), nullable),
      symbol()            = nullify_if_needed("std::string", nullable),
      record(fs?)         = nullify_if_needed("std::string", nullable),
      tuple(ts?)          = nullify_if_needed("std::tuple<" & append((native_output_inter_type(t, false) : t <- ts), ", ") & ">", nullable),
      seq(t?)             |
      set(t?)             = nullify_if_needed("std::vector<" & native_output_inter_type(t, false) & ">", nullable),
      bin_rel(ts?)        |
      tern_rel(ts?)       = nullify_if_needed("std::vector<std::tuple<" & append((native_output_inter_type(t, false) : t <- ts), ", ") & ">>", nullable),
      tagged(_, t?)       = native_output_inter_type(t, nullable),
      string              |
      generic             = nullify_if_needed("std::string", nullable),
      generated(ts?)      = native_generated_output_inter_type(ts, nullable);


    String native_generated_output_inter_type(BasicTypeSymbol type_symb, Bool nullable) {
      bare_type_id = bare_id(type_symb);
      native_type = gen_class_name(bare_type_id);
      is_ref = nullable or not is_concrete_class(bare_type_id);
      native_type = "std::unique_ptr<" & native_type & ">" if is_ref;
      return native_type;
    }


    String nullify_if_needed(String base_type, Bool nullify) = if nullify then "std::unique_ptr<" & base_type & ">" else base_type;
  }
}

// String record_native_inter_type([+Symbol -> InterType] fields, Bool nullable) {
//   ord_fields = ((l, fields(l)) : l <- sort_record_labels(keys(fields)));
//   field_names = adjusted_unambiguous_lower_camel_case_names(keys(fields));
//   native_fields = (native_inter_type(t, false) & " " & field_names(l) : l, t <- ord_fields);
//   return "(" & append(native_fields, ", ") & ")" & if nullable then " *" else "";
// }

////////////////////////////////////////////////////////////////////////////////

Bool has_textual_repr(EltInterType it) =
    date          |
    time          |
    symbol()      |
    record()      |
    generic       = true,
    bool          |
    byte          |
    int32         |
    integer       |
    float         |
    string        |
    optional()    |
    tuple()       |
    seq()         |
    set()         |
    bin_rel()     |
    tern_rel()    |
    generated()   = false,
    tagged(_, t?) = has_textual_repr(t);

/////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  String input_arg_type(EltInterType it)                = native_input_inter_type(it, false, qualified = false);
  String input_arg_type(EltInterType it, Bool nullable) = native_input_inter_type(it, nullable, qualified = false);

  String nested_input_arg_type(EltInterType it) = native_nested_inter_type(it, false, qualified = false);

  String return_value_type(EltInterType it)                 = native_output_inter_type(it, false, qualified = false);
  String return_value_type(EltInterType it, Bool nullable)  = native_output_inter_type(it, nullable, qualified = false);
  String qualified_return_type(EltInterType it)             = native_output_inter_type(it, false, qualified = true);
}