implicit prg : CompiledPrg, block : ReactBlock {
  String auto_class_name = safe_class_name(block.name);
  String auto_struct_ptr = "((" & native_name(block.name) & " *) ptr)";


  String safe_setter_name(Symbol input_signal) {
    name = "set_" & safe_snake_case(input_signal);
    name = name & "_" if reactive_auto_lowercase_name_has_conflicts(name, 1);
    return name;
  }


  String safe_reader_name(Symbol signal) {
    name = safe_snake_case(signal);
    name = name & "_" if reactive_auto_lowercase_name_has_conflicts(name, 0);
    return name;
  }


  [String] safe_inputs_names  = [safe_setter_name(s) : s _ <- block.inputs];
  [String] safe_outputs_names = [safe_reader_name(s) : s _ <- block.outputs];


  String safe_method_name(MethodId method_id) {
    name = native_method_names(method_id, !);
    has_conflicts = reactive_auto_lowercase_name_has_conflicts(name, method_id.arity);
    name = name & "_" if has_conflicts;
    if method_id.arity == 1 and in(name, safe_inputs_names) {
      name = name & if has_conflicts then "M" else "_";
    }
    if method_id.arity == 0 and in(name, safe_outputs_names) {
      name = name & if has_conflicts then "M" else "_";
    }
    return name;


    [MethodId -> String] native_method_names {
      method_ids = keys(block.methods);
      names_map = [id -> safe_snake_case(bare_id(id.symbol)) : id <- method_ids, not (other_id <- method_ids : other_id != id and other_id.symbol == id.symbol)];
      conflicting_method_ids = group_by([id : id <- method_ids, not names_map(id, _)], $.symbol);
      for s ids <- conflicting_method_ids {
        for id <- ids {
          symbol = bare_id(id.symbol);
          name = if id.id?
            then snake_case(symbol) & "_" & _print_(id.arity) & uppercase_encoding(id.id)
            else safe_snake_case(symbol);
          names_map = _put_(names_map, id, name);
        }
      }
      return names_map;
    }
  }


  Bool reactive_auto_lowercase_name_has_conflicts(String name, Nat arity) {
    builtin_methods = builtin_methods;
    return builtin_methods(name, arity);

    [String -> Nat] builtin_methods = [
      // Standard automaton methods
      "apply"                 -> 0,
      "read_state"            -> 0,
      "set_state"             -> 1,
      "set_elapsed_millisecs" -> 1,
      "set_elapsed_secs"      -> 1,
      "set_input"             -> 2,
      "read_output"           -> 1,
      "changed_outputs"       -> 0
    ];
  }
}


implicit prg : CompiledPrg, block : ReactBlock, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*) input_setter(Atom id, String memb_test_pred_name, String set_method_name, String class_name, String typed_ptr_def) {
    type = block.inputs[id].type;
    inter_type = interface_type(type, :input);
    // return ((), ()) if inter_type == :generic;
    input_type = input_arg_type(inter_type);

    name = safe_setter_name(id);
    uc_name = uppercase(id);

    decl = "void " & name & "(" & input_type & ");";

    impl = (
      "",
      "void " & class_name & "::" & name & "(" & input_type & " value) {",
      "  OBJ obj;",
      "",
      "  " & typed_ptr_def
    ) & indent_lines(import_code(inter_type, "value", "obj = ")) & (
      "  if (" & memb_test_pred_name & "(obj)) {",
      "    " & set_method_name & "(&ptr->automaton, obj);",
      "  }",
      "  else",
      "    throw std::domain_error(\"Invalid input value\");",
      "}"
    );

    return (decl, impl);
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  (String, String*) output_getter(Atom id, String class_name, String typed_ptr_def) {
    output = block.outputs[id];
    type = output.type;
    inter_type = interface_type(type, :output);
    ret_type = qualified_return_type(inter_type);
    name = safe_reader_name(id);
    var_name = native_var_decl_name(signal_var(id), context=:wrapper);

    decl = ret_type & " " & name & "();";

    impl = (
      "",
      ret_type & " " & class_name & "::" & name & "() {",
      "  " & typed_ptr_def,
      "  OBJ obj = ptr->automaton." & var_name & ";",
      "  if (is_null(obj))",
      "    throw std::runtime_error(\"Output is not defined\");",
      "  if (is_blank(obj))" if output.discrete,
      "    throw std::runtime_error(\"Discrete output is not set\");" if output.discrete
    ) & indent_lines(export_code(inter_type, "obj", "return ")) & (
      "}"
    );

    return (decl, impl);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, block : ReactBlock, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String*, String*) auto_method_wrapper(MethodId method_id, CompiledMethod method, String typed_ptr_def) {
    return ((), ()) if method_id.id?;
    name = safe_method_name(method_id);
    return method_wrapper(method_id, method, block.name, name, auto_class_name, typed_ptr_def);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[NeType] interface_types(ReactBlock block) {
  inputs_types = [info.type : id info <- block.inputs];
  outputs_types = [info.type : id info <- block.outputs];
  methods_types = union([set(m.args_types) & [m.ret_type] : id m <- block.methods]);
  return inputs_types & outputs_types & methods_types;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*, Text) react_auto_wrapper(ReactBlock block) {
    class_name = auto_class_name(block = block);
    data_struct_name = class_name & "_DATA";
    typed_ptr_def = data_struct_name & " *ptr = (" & data_struct_name & " *) this->ptr;";

    ord_inputs = block.ord_inputs;
    ord_outputs = (o : o <- block.ord_outputs, not block.inputs(o, _));

    inputs = (uppercase(i) : i <- ord_inputs);
    outputs = (uppercase(o) : o <- ord_outputs, not block.inputs(o, _));

    is_time_sensitive = block.memb_vars(elapsed_time); ## BAD BAD: NOT A RELIABLE WAY TO DO IT...
    apply_ret_type = if is_time_sensitive then "bool" else "void";

    auto_name = native_name(block.name);

    let context = :wrapper {
      input_set_methods_names = (input_set_method_name(block.name, i) : i <- ord_inputs);
      output_vars_names = (native_var_decl_name(signal_var(o)) : o <- ord_outputs);

      input_memb_test_pred_name = (native_fn_name(block.input_memb_preds[i]) : i <- ord_inputs);

      elapsed_time_var_name = native_var_decl_name(elapsed_time);
      changed_outputs_count_var_name = native_var_decl_name(changed_outputs_count);
    }

    methods = block.methods;
    let block = block {
      input_setters_decls = ();
      input_setters_impls = ();
      for input @ i <- ord_inputs {
        decl, impl = input_setter(input, input_memb_test_pred_name(i), input_set_methods_names(i), class_name, typed_ptr_def);
        input_setters_decls = (input_setters_decls | decl);
        input_setters_impls = input_setters_impls & impl;
      }

      output_getters_decls = ();
      output_getters_impls = ();
      for o <- ord_outputs {
        decl, impl = output_getter(o, class_name, typed_ptr_def);
        output_getters_decls = (output_getters_decls | decl);
        output_getters_impls = output_getters_impls & impl;
      }

      methods_wrappers, methods_wrappers_docs = (
        join(ls) : ls <- unzip(isort([auto_method_wrapper(id, m, typed_ptr_def) : id m <- methods]))
      );
    }

    input_enum_docs = if inputs == ()
        then ()
      else if sum((length(i) : i <- inputs)) <= 80
        then ("enum Input {" & append(inputs, ", ") & "};")
      else
        ("enum Input {") & ("    " & i & "," : i <- inputs) & ("  };");

    output_enum_docs = if outputs == ()
        then ()
      else if sum((length(o) : o <- inputs)) <= 80
        then ("enum Output {" & append(outputs, ", ") & "};")
      else
        ("enum Output {") & ("    " & o & "," : o <- outputs) & ("  };");

    enum_empty_line = ("" if input_enum_docs != () and output_enum_docs != ());
    enums_decls = input_enum_docs & enum_empty_line & output_enum_docs;

    auto_class_name = auto_class_name(block = block);

    class_decl = (
      "class " & auto_class_name & " {",
      "  public:"
    ) & indent_lines(enums_decls, 2) & (
      "" if enums_decls != (),
      "    " & auto_class_name & "();",
      "    ~" & auto_class_name & "();",
      "",
      "    void set_input(Input input, const string &value);" if inputs != (),
      "    string read_output(Output output);" if outputs != (),
      "" if is_time_sensitive,
      "    void set_elapsed_millisecs(unsigned int);" if is_time_sensitive,
      "    void set_elapsed_secs(unsigned int);" if is_time_sensitive,
      "",
      "    " & apply_ret_type & " apply();",
      "    string read_state();",
      "    void set_state(const string &state);",
      "",
      "    vector<Output> changed_outputs();" if outputs != ()
    );

    class_decl = class_decl & ("", "    // Inputs") & indent_lines(input_setters_decls, 2) if input_setters_decls != ();
    class_decl = class_decl & ("", "    // Outputs") & indent_lines(output_getters_decls, 2) if output_getters_decls != ();
    class_decl = class_decl & ("", "    // Methods") & indent_lines(methods_wrappers_docs, 2) if methods_wrappers_docs != ();
    class_decl = (class_decl |
      "",
      "  private:",
      "    void *ptr;",
      "};"
    );

    env_ref = "ptr->env";
    auto_ref = "&ptr->automaton";

    class_impl = (
      "",
      ""
      ) & class_decl & (
      "",
      "",
      "struct " & data_struct_name & " {",
      "  ENV env;",
      "  " & auto_name & " automaton;",
      "};",
      "",
      "",
      auto_class_name & "::" & auto_class_name & "() {",
      "  init_runtime();",
      "",
      "  " & data_struct_name & " *ptr = new " & data_struct_name & "();",
      "  this->ptr = ptr;",
      "  memset(&ptr->env, 0, sizeof(ENV));",
      "  " & native_call(pre_init_method_name(block.name), (auto_ref, env_ref), context=:wrapper),
      "}",
      "",
      auto_class_name & "::~" & auto_class_name & "() {",
      "  " & typed_ptr_def,
      "  " & native_call(cleanup_method_name(block.name), (auto_ref), context=:wrapper),
      "  delete ptr;",
      "}",
      "",
      apply_ret_type & " " & auto_class_name & "::" & " apply() {",
      "  " & typed_ptr_def,
      "  " & native_call(apply_method_name(block.name), (auto_ref, env_ref), context=:wrapper),
      "  return ptr->automaton.elapsed_time == 0;" if is_time_sensitive,
      "}",
      "",
      "std::string " & auto_class_name & "::" & "read_state() {",
      "  " & typed_ptr_def,
      "  OBJ state = " & native_call(copy_state_method_name(block.name), (auto_ref), context=:wrapper),
      "  return export_as_text(state);",
      "}",
      "",
      "void " & auto_class_name & "::" & "set_state(const std::string &state) {",
      "  " & typed_ptr_def,
      "  if (!ptr->automaton.is_new)", ## BUG BUG BUG: WHY WAS THIS NOT NEGATED?
      "    throw std::runtime_error(\"The state of an automaton can only be set right after instantiation\");",
      "  OBJ obj = import_obj(state);",
      "  if (!" & native_fn_name(block.state_memb_pred, context=:wrapper) & "(obj))",
      "    throw std::domain_error(\"Invalid state\");",
      "  " & native_call(set_state_method_name(block.name), (auto_ref, "obj"), context=:wrapper),
      "}"
    );

    if is_time_sensitive {
      class_impl = (class_impl |
        "",
        "void " & auto_class_name & "::" & "set_elapsed_millisecs(unsigned int time) {",
        "  " & typed_ptr_def,
        "  if (ptr->automaton.is_new)",
        "    throw std::runtime_error(\"Elapsed time cannot be set before the this instance has been fully initialized by invoking apply()\");",
        "  if (ptr->automaton.elapsed_time > 0)",
        "    throw std::runtime_error(\"Elapsed time has already been set and cannot be set again before every update has been fully propagated\");",
        "  ptr->automaton.elapsed_time = 1000000L * time;",
        "}",
        "",
        "void " & auto_class_name & "::" & "set_elapsed_secs(unsigned int time) {",
        "  set_elapsed_millisecs(1000 * time);",
        "}"
      );
    }

    if inputs != () {
      class_impl = (class_impl |
        "",
        "void " & auto_class_name & "::set_input(Input input, const std::string &value) {",
      "  " & typed_ptr_def,
        "  OBJ obj = import_obj(value);",
        "  switch (input) {"
      );
      for input @ j <- inputs {
        class_impl = class_impl & (
          "" if j > 0,
          "    case " & input & ":",
          "      if (" & input_memb_test_pred_name(j) & "(obj))",
          "        " & input_set_methods_names(j) & "(&ptr->automaton, obj);",
          "      else",
          "        throw std::domain_error(\"Invalid input value\");",
          "      break;"
        );
      }
      class_impl = (class_impl |
        "",
        "    default:",
        "      throw std::runtime_error(\"Unknown input\");",
        "  }",
        "}"
      );
    }

    if outputs != () {
      class_impl = class_impl & (
        "",
        "std::vector<" & class_name & "::Output> " & class_name & "::changed_outputs() {",
        "  " & typed_ptr_def,
        "  uint32 count = ptr->automaton.changed_outputs_count;",
        "  std::vector<Output> outputs(count);",
        // "  vector<Output> values = Output.values();", ## THIS SHOULD BE MADE MORE EFFICIENT
        "  for (int i=0 ; i < count ; i++)",
        "    outputs[i] = (Output) ptr->automaton.changed_outputs[i];",
        "  return outputs;",
        "}",
        "",
        "std::string " & class_name & "::read_output(Output output) {",
        "  " & typed_ptr_def,
        "  OBJ obj = make_blank_obj();", ## BUG BUG BUG: NOT SURE IF IT'S A BLANK OR A NULL WE NEED HERE
        "  switch (output) {"
      );
      for output @ i <- outputs {
        class_impl = class_impl & (
          "" if i > 0,
          "    case " & output & ":",
          "      obj = ptr->automaton." & output_vars_names(i) & ";",
          "      break;"
        );
      }
      class_impl = class_impl & (
        "",
        "    default:",
        "      throw std::runtime_error(\"Unknown output\");",
        "  }",
        "",
        "  return export_as_text(obj);",
        "}"
      );
    }

    class_impl = class_impl & input_setters_impls & output_getters_impls & methods_wrappers;

    return (auto_class_name, class_decl, class_impl);
  }
}
