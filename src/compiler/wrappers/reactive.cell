implicit prg : CompiledPrg, block : ReactBlock {
  String auto_class_name = safe_class_name(block.name);
  String auto_struct_ptr = "((" & native_name(block.name) & " *) ptr)";

  [String] duplicate_names {
    inputs = keys(block.inputs);
    inputs_names = ("Set" & upper_camel_case(id) : id <- isort(inputs));
    outputs = keys(block.outputs) - inputs;
    outputs_names = (safe_lower_camel_case(id) : id <- isort(outputs));
    return duplicates(inputs_names & outputs_names);
  }

  String safe_setter_name(Symbol input_signal) {
    name = upper_camel_case(input_signal);
    name = capitalize(_print_(input_signal), true) if in(name, duplicate_names);
    name = "_" & name if has_conflicts(name);
    return name;
  }

  String safe_name(Symbol signal) {
    name = safe_upper_camel_case(signal);
    name = capitalize(_print_(signal), true) if in(name, duplicate_names); ## MOVE THIS TO A NEW FUNCTION IN utils.cell
    name = "_" & name if has_conflicts(name);
    return name;
  }

  [String] inputs_and_outputs_names = [
    safe_name(s) : s _ <- block.inputs | s _ <- block.outputs
  ];

  [String, Nat] duplicate_method_names {
    method_ids = [id.symbol, id.arity : id _ <- block.methods, not id.id?];
    native_ids = ((safe_lower_camel_case(bare_id(s)), a) : s, a <- isort(method_ids));
    return [nid(0), nid(1) : nid <- duplicates(native_ids)];
  }

  String safe_name(MethodSymbol method_symb, Nat arity) {
    symbol = bare_id(method_symb);
    name = safe_lower_camel_case(symbol);
    // We first check if this conflicts with other method names
    duplicate_method_names = duplicate_method_names; //## BAD
    name = capitalize(_print_(symbol), true) if duplicate_method_names(name, arity);
    // Now we've to deal with conflicts with inputs, outputs and reserved_names
    name = "__" & name if in(name, inputs_and_outputs_names) or has_conflicts(name);
    return name;
  }

  Bool has_conflicts(String name) {
    return name == auto_class_name or in(name, reserved_names);

    [String] reserved_names = [
      // Automata reserved names
      "Input",
      "Output",

      // Standard automaton methods
      "apply",
      "read_state",
      "set_state",
      "set_elapsed_millisecs",
      "set_elapsed_secs",
      "set_input",
      "read_output",
      "changed_outputs"
    ];
  }
}


implicit prg : CompiledPrg, block : ReactBlock, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*) input_setter(Atom id, String memb_test_pred_name, String set_method_name, String class_name, String typed_ptr_def) {
    type = block.inputs[id].type;
    inter_type = interface_type(type, :input);
    // return ((), ()) if inter_type == :generic;
    input_type = input_arg_type(inter_type);

    name = safe_setter_name(id);
    uc_name = uppercase(id);

    decl = "void " & name & "(" & input_type & ");";

    impl = (
      "",
      "void " & class_name & "::" & name & "(" & input_type & " value) {",
      "  OBJ obj;",
      "",
      "  " & typed_ptr_def
    ) & indent_lines(import_code(inter_type, "value", "obj = ")) & (
      "  if (" & memb_test_pred_name & "(obj)) {",
      "    " & set_method_name & "(&ptr->automaton, obj);",
      "  }",
      "  else",
      "    throw std::exception();", ## TODO: ADD ERROR INFORMATION
      "}"
    );

    return (decl, impl);
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  (String, String*) output_getter(Atom id, String class_name, String typed_ptr_def) {
    output = block.outputs[id];
    type = output.type;
    inter_type = interface_type(type, :output);
    ret_type = qualified_return_type(inter_type);
    name = safe_name(id);
    var_name = native_var_decl_name(signal_var(id), context=:wrapper);

    decl = ret_type & " " & name & "();";

    impl = (
      "",
      ret_type & " " & class_name & "::" & name & "() {",
      "  " & typed_ptr_def,
      "  OBJ obj = ptr->automaton." & var_name & ";",
      "  if (is_null(obj))",
      "    throw std::exception();", ## TODO: ADD ERROR INFORMATION (WAS: "Output is undefined")
      "  if (is_blank(obj))" if output.discrete,
      "    throw std::exception();" if output.discrete ## TODO: ADD ERROR INFORMATION (WAS: "Discrete output is not set")
    ) & indent_lines(export_code(inter_type, "obj", "return ")) & (
      "}"
    );

    return (decl, impl);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, block : ReactBlock, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String*, String*) auto_method_wrapper(MethodId method_id, CompiledMethod method, String typed_ptr_def) {
    return ((), ()) if method_id.id?;
    name = safe_name(method_id.symbol, method_id.arity);
    return method_wrapper(method_id, method, block.name, name, auto_class_name, typed_ptr_def);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[NeType] interface_types(ReactBlock block) {
  inputs_types = [info.type : id info <- block.inputs];
  outputs_types = [info.type : id info <- block.outputs];
  methods_types = union([set(m.args_types) & [m.ret_type] : id m <- block.methods]);
  return inputs_types & outputs_types & methods_types;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*, Text) react_auto_wrapper(ReactBlock block) {
    class_name = auto_class_name(block = block);
    data_struct_name = class_name & "_DATA";
    typed_ptr_def = data_struct_name & " *ptr = (" & data_struct_name & " *) this->ptr;";

    ord_inputs = block.ord_inputs;
    ord_outputs = (o : o <- block.ord_outputs, not block.inputs(o, _));

    inputs = (uppercase(i) : i <- ord_inputs);
    outputs = (uppercase(o) : o <- ord_outputs, not block.inputs(o, _));

    is_time_sensitive = block.memb_vars(elapsed_time); ## BAD BAD: NOT A RELIABLE WAY TO DO IT...
    apply_ret_type = if is_time_sensitive then "bool" else "void";

    auto_name = native_name(block.name);

    let context = :wrapper {
      input_set_methods_names = (input_set_method_name(block.name, i) : i <- ord_inputs);
      output_vars_names = (native_var_decl_name(signal_var(o)) : o <- ord_outputs);

      input_memb_test_pred_name = (native_fn_name(block.input_memb_preds[i]) : i <- ord_inputs);

      elapsed_time_var_name = native_var_decl_name(elapsed_time);
      changed_outputs_count_var_name = native_var_decl_name(changed_outputs_count);
    }

    methods = block.methods;
    let block = block {
      input_setters_decls = ();
      input_setters_impls = ();
      for input @ i <- ord_inputs {
        decl, impl = input_setter(input, input_memb_test_pred_name(i), input_set_methods_names(i), class_name, typed_ptr_def);
        input_setters_decls = (input_setters_decls | decl);
        input_setters_impls = input_setters_impls & impl;
      }

      output_getters_decls = ();
      output_getters_impls = ();
      for o <- ord_outputs {
        decl, impl = output_getter(o, class_name, typed_ptr_def);
        output_getters_decls = (output_getters_decls | decl);
        output_getters_impls = output_getters_impls & impl;
      }

      methods_wrappers, methods_wrappers_docs = (
        join(ls) : ls <- unzip(isort([auto_method_wrapper(id, m, typed_ptr_def) : id m <- methods]))
      );
    }

    input_enum_docs = if inputs == ()
        then ()
      else if sum((length(i) : i <- inputs)) <= 80
        then ("enum Input {" & append(inputs, ", ") & "};")
      else
        ("enum Input {") & ("    " & i & "," : i <- inputs) & ("  };");

    output_enum_docs = if outputs == ()
        then ()
      else if sum((length(o) : o <- inputs)) <= 80
        then ("enum Output {" & append(outputs, ", ") & "};")
      else
        ("enum Output {") & ("    " & o & "," : o <- outputs) & ("  };");

    enum_empty_line = ("" if input_enum_docs != () and output_enum_docs != ());
    enums_decls = input_enum_docs & enum_empty_line & output_enum_docs;

    auto_class_name = auto_class_name(block = block);

    class_decl = (
      "class " & auto_class_name & " {",
      "  private:",
      "    void *ptr;",
      "" if enums_decls != ()
    ) & indent_lines(enums_decls) & (
      "",
      "  " & auto_class_name & "();",
      "  ~" & auto_class_name & "();",
      "",
      "  void set_input(Input input, std::string &value);" if inputs != (),
      "  std::string read_output(Output output);" if outputs != (),
      "" if is_time_sensitive,
      "  void set_elapsed_millisecs(unsigned int);" if is_time_sensitive,
      "  void set_elapsed_secs(unsigned int);" if is_time_sensitive,
      "",
      "  " & apply_ret_type & " apply();",
      "  std::string read_state();",
      "  void set_state(std::string &state);",
      "",
      "  std::vector<Output> changed_outputs();" if outputs != ()
    );

    class_decl = class_decl & ("", "  // Inputs") & indent_lines(input_setters_decls) if input_setters_decls != ();
    class_decl = class_decl & ("", "  // Outputs") & indent_lines(output_getters_decls) if output_getters_decls != ();
    class_decl = class_decl & ("", "  // Methods") & indent_lines(methods_wrappers_docs) if methods_wrappers_docs != ();
    class_decl = (class_decl | "};");

    env_ref = "ptr->env";
    auto_ref = "&ptr->automaton";

    class_impl = (
      "",
      ""
      ) & class_decl & (
      "",
      "",
      "struct " & data_struct_name & " {",
      "  ENV env;",
      "  " & auto_name & " automaton;",
      "};",
      "",
      "",
      auto_class_name & "::" & auto_class_name & "() {",
      "  " & data_struct_name & " *ptr = new " & data_struct_name & "();",
      "  this->ptr = ptr;",
      "  memset(&ptr->env, 0, sizeof(ENV));",
      "  " & native_call(pre_init_method_name(block.name), (auto_ref, env_ref), context=:wrapper),
      "}",
      "",
      auto_class_name & "::~" & auto_class_name & "() {",
      "  " & typed_ptr_def,
      "  " & native_call(cleanup_method_name(block.name), (auto_ref), context=:wrapper),
      "  delete ptr;",
      "}",
      "",
      apply_ret_type & " " & auto_class_name & "::" & " apply() {",
      "  " & typed_ptr_def,
      "  " & native_call(apply_method_name(block.name), (auto_ref, env_ref), context=:wrapper),
      "  return " & auto_ref & ".elapsed_time == 0;" if is_time_sensitive,
      "}",
      "",
      "std::string " & auto_class_name & "::" & "read_state() {",
      "  " & typed_ptr_def,
      "  OBJ state = " & native_call(copy_state_method_name(block.name), (auto_ref), context=:wrapper),
      "  return export_as_text(state);",
      "}",
      "",
      "void " & auto_class_name & "::" & "set_state(std::string &state) {",
      "  " & typed_ptr_def,
      "  if (!ptr->automaton.is_new)", ## BUG BUG BUG: WHY WAS THIS NOT NEGATED?
      "    throw std::exception();", ## TODO: ADD ERROR INFORMATION (WAS: "Cannot set state: automaton instance is not new")
      "  OBJ obj = import_obj(state);",
      "  if (!" & native_fn_name(block.state_memb_pred, context=:wrapper) & "(obj))",
      "    throw std::exception();", ## TODO: ADD ERROR INFORMATION (WAS: "Invalid state")
      "  " & native_call(set_state_method_name(block.name), (auto_ref, "obj"), context=:wrapper),
      "}"
    );

    if is_time_sensitive {
      class_impl = (class_impl |
        "",
        "void " & auto_class_name & "::" & "set_elapsed_millisecs(unsigned int time) {",
        "  " & typed_ptr_def,
        "  if (ptr->automaton.is_new | ptr->automaton.elapsed_time > 0)",
        "    throw std::exception();", ## TODO: ADD ERROR INFORMATION (WAS: "Cannot set elapsed time now")
        "  ptr->automaton.elapsed_time = 1000000L * time;",
        "}",
        "",
        "void " & auto_class_name & "::" & "set_elapsed_secs(unsigned int time) {",
        "  set_elapsed_millisecs(1000 * time);",
        "}"
      );
    }

    if inputs != () {
      class_impl = (class_impl |
        "",
        "void " & auto_class_name & "::set_input(Input input, std::string &value) {",
      "  " & typed_ptr_def,
        "  OBJ obj = import_obj(value);",
        "  switch (input) {"
      );
      for input @ j <- inputs {
        class_impl = class_impl & (
          "" if j > 0,
          "    case " & input & ":",
          "      if (" & input_memb_test_pred_name(j) & "(obj))",
          "        " & input_set_methods_names(j) & "(&ptr->automaton, obj);",
          "      else",
          "        throw std::exception();", ## TODO: ADD ERROR INFORMATION
          "      break;"
        );
      }
      class_impl = (class_impl |
        "",
        "    default:",
        "      throw std::exception();",
        "  }",
        "}"
      );
    }

    if outputs != () {
      class_impl = class_impl & (
        "",
        "std::vector<" & class_name & "::Output> " & class_name & "::changed_outputs() {",
        "  " & typed_ptr_def,
        "  uint32 count = ptr->automaton.changed_outputs_count;",
        "  std::vector<Output> outputs(count);",
        // "  vector<Output> values = Output.values();", ## THIS SHOULD BE MADE MORE EFFICIENT
        "  for (int i=0 ; i < count ; i++)",
        "    outputs[i] = (Output) ptr->automaton.changed_outputs[i];",
        "  return outputs;",
        "}",
        "",
        "std::string " & class_name & "::read_output(Output output) {",
        "  " & typed_ptr_def,
        "  OBJ obj = make_blank_obj();", ## BUG BUG BUG: NOT SURE IF IT'S A BLANK OR A NULL WE NEED HERE
        "  switch (output) {"
      );
      for output @ i <- outputs {
        class_impl = class_impl & (
          "" if i > 0,
          "    case " & output & ":",
          "      obj = ptr->automaton." & output_vars_names(i) & ";",
          "      break;"
        );
      }
      class_impl = class_impl & (
        "",
        "    default:",
        "      throw std::exception();",
        "  }",
        "",
        "  return export_as_text(obj);",
        "}"
      );
    }

    class_impl = class_impl & input_setters_impls & output_getters_impls & methods_wrappers;

    return (auto_class_name, class_decl, class_impl);
  }
}
