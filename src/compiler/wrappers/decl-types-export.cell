implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  Text decl_types_export_functs([Symbol -> DeclInterType] type_decls, [Symbol, Symbol] hierarchy) {
    type_symbs = isort(keys(type_decls));

    nesting_dependencies = [s, ns : s t <- type_decls, ns <- generated_nested_types(t)];
    dependencies = [s1, s2 : s2 s1 <- hierarchy | s1 s2 <- nesting_dependencies];
    dependency_closure = flat_transitive_closure(dependencies);

    hierarchy_closure = flat_transitive_closure(hierarchy);

    concrete_classes = keys(type_decls);
    abstract_classes = [ts : _ ts <- hierarchy];
    all_classes = concrete_classes & abstract_classes;

    assert disjoint(concrete_classes, abstract_classes);
    assert not (ts _ <- hierarchy : not concrete_classes(ts) and not abstract_classes(ts));

    class_names = [ts -> gen_class_name(ts) : ts <- all_classes];
    export_fns_names = [ts -> decl_type_export_funct_name(ts) : ts <- all_classes];

    ord_classes = join((isort(ts) : ts <- topological_sort(group_by_left_arg(dependency_closure))));

    code = ();
    let class_names = class_names, export_fns_names = export_fns_names {
      for ts @ i <- ord_classes {
        if concrete_classes(ts) {
          // Concrete types
          inter_type = type_decls(ts);
          code = (code | "") if i > 0;
          code = (code | decl_type_export_funct(ts, inter_type));
        }
        else {
          // Abstract types
          concrete_subclasses = [sts -> type_decls(sts) : sts <- hierarchy_closure(?, ts), concrete_classes(sts)];
          code = (code | "", abstract_type_export_funct(ts, concrete_subclasses));
        }
      }
    }

    return code;
  }
}


implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol], class_names : [Symbol -> String], export_fns_names : [Symbol -> String] {
  Text abstract_type_export_funct(Symbol type_symb, [Symbol -> DeclInterType] concrete_subclasses) {
    class_name = class_names(type_symb);

    code = (
      "std::unique_ptr<" & class_name & "> " & export_fns_names(type_symb) & "(OBJ obj) {",
      "  uint16 tag_id = get_tag_id(obj);",
      ""
    );

    for ts def <- concrete_subclasses {
      tag = match (def)
        tagged(t?, _) = t,
        _             = undefined;

      subclass_name = class_names(ts);

      code = (code |
        "  if (tag_id == " & symb_id_qual_name(tag) & ") {",
        "    " & subclass_name & " value = " & export_fns_names(ts) & "(obj);",
        "    " & subclass_name & " *ptr = new " & subclass_name & ";",
        "    *ptr = value;",
        "    return std::unique_ptr<" & class_name & ">(ptr);",
        "}",
        ""
      );
    }

    return (code | "  internal_fail();", "}");
  }


  Text decl_type_export_funct(Symbol type_symb, DeclInterType inter_type) {
    class_name = class_names(type_symb);
    fn_name = export_fns_names(type_symb);

    tmp_var = new_unique_var(:unused);

    record_type = match (inter_type) tagged(_, t?) = t;

    code = (
      ("OBJ " & tmp_var & " = get_inner_obj(obj);"),
      record_type_export_code(record_type, class_name, tmp_var)
    );

    sign_line = class_name & " " & fn_name & "(OBJ obj) {";
    return (sign_line, code, "}");


    String* record_type_export_code(RecordInterType inter_type, String class_name, String expr) {
      fields = fields(inter_type);
      fields_names = adjusted_unambiguous_snake_case_names(keys(fields));
      fields_vars = [v -> new_unique_var(:unused) : v _ <- fields];

      code = ();

      // Converting all the fields
      for l t <- fields {
        tmp_var = new_unique_var(:unused);
        code = (
          code |
          "OBJ " & tmp_var & " = lookup_field(" & expr & ", " & symb_id_qual_name(l) & ");",
          qualified_return_type(t) & " " & fields_vars(l) & ";"
        );
        code = code & export_code(t, tmp_var, fields_vars(l) & " = ");
      }

      // Instantiating and returning the object
      obj_var = new_unique_var(:unused);
      code = (code | class_name & " " & obj_var & ";");
      labels = sort_record_labels(keys(fields));
      for l <- labels {
        src_expr = fields_vars(l);
        src_expr = "std::move(" & src_expr & ")" if must_be_moved(fields(l));
        line = obj_var & "." & fields_names(l) & " = " & src_expr & ";";
        code = (code | line);
      }
      code = (code | "return " & obj_var & ";");
      return code;
    }
  }
}
