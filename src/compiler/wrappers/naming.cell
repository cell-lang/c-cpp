implicit prg : CompiledPrg {
  String safe_class_name(<DBSymbol, AutoSymbol> id) = safe_block_class_names(id, !);

  [<DBSymbol, AutoSymbol> -> String] safe_block_class_names = [
    b.name -> {
      name = upper_camel_case(bare_id(b.name));
      name = name & "_" if is_reserved(name);
      return name;
    } : b <- prg.static_blocks | b <- prg.react_blocks
  ];
}

////////////////////////////////////////////////////////////////////////////////

[Symbol -> String] adjusted_unambiguous_snake_case_names([Symbol] symbols) {
  nice_field_names = [s -> safe_snake_case(s) : s <- symbols];
  conflicting_names = duplicate_values(nice_field_names);
  unambiguous_names = [s -> n : s n <- nice_field_names, not conflicting_names(n)];
  for n <- conflicting_names {
    conflicting_symbols = isort([s : s <- nice_field_names(?, n)]);
    for s @ i <- conflicting_symbols
      unambiguous_names = _put_(unambiguous_names, s, n & "_" & _print_(i));
  }
  return unambiguous_names;
}

////////////////////////////////////////////////////////////////////////////////

String safe_snake_case(Symbol symb) {
  name = snake_case(symb);
  name = "_" & name if is_reserved(name);
  return name;
}


String safe_upper_camel_case(Symbol symb) {
  name = upper_camel_case(symb);
  name = "_" & name if is_reserved(name);
  return name;
}

////////////////////////////////////////////////////////////////////////////////


Bool is_reserved(String id) {
  for p <- isort(standard_generated_class_prefixes) {
    len = length(p);
    if length(id) > length(p) {
      prefix = take(p, len);
      if prefix == p {
        rest = drop(p, len);
        return false if (ch <- chars(rest) : not is_digit(ch));
      }
    }
  }

  return in(id, keywords_and_literals) or
         in(id, runtime_classes) or
         in(id, standard_generated_classes);
}


[String] keywords_and_literals = [
  // Keywords
  "alignas",
  "alignof",
  "and",
  "and_eq",
  "asm",
  "atomic_cancel",
  "atomic_commit",
  "atomic_noexcept",
  "auto",
  "bitand",
  "bitor",
  "bool",
  "break",
  "case",
  "catch",
  "char",
  "char8_t",
  "char16_t",
  "char32_t",
  "class",
  "compl",
  "concept",
  "const",
  "consteval",
  "constexpr",
  "constinit",
  "const_cast",
  "continue",
  "co_await",
  "co_return",
  "co_yield",
  "decltype",
  "default",
  "delete",
  "do",
  "double",
  "dynamic_cast",
  "else",
  "enum",
  "explicit",
  "export",
  "extern",
  "false",
  "float",
  "for",
  "friend",
  "goto",
  "if",
  "inline",
  "int",
  "long",
  "mutable",
  "namespace",
  "new",
  "noexcept",
  "not",
  "not_eq",
  "nullptr",
  "operator",
  "or",
  "or_eq",
  "private",
  "protected",
  "public",
  "reflexpr",
  "register",
  "reinterpret_cast",
  "requires",
  "return",
  "short",
  "signed",
  "sizeof",
  "static",
  "static_assert",
  "static_cast",
  "struct",
  "switch",
  "synchronized",
  "template",
  "this",
  "thread_local",
  "throw",
  "true",
  "try",
  "typedef",
  "typeid",
  "typename",
  "union",
  "unsigned",
  "using",
  "virtual",
  "void",
  "volatile",
  "wchar_t",
  "while",
  "xor",
  "xor_eq",

  // Identifiers with special meaning
  "final",
  "override",
  "transaction_safe",
  "transaction_safe_dynamic",
  "import",
  "module",

  // Standard library classes imported with the using declaration
  "string",
  "tuple",
  "unique_ptr",
  "vector",
  "ostream",
  "istream"
];


[String] standard_generated_classes = [
  ## BUG BUG BUG: IS THERE ANYTHING THAT GOES HERE?
];


[String] standard_generated_class_prefixes = [
  ## TODO: IS THERE ANYTHING THAT GOES HERE?
];


[String] runtime_classes = [
  ## TODO: IS THERE ANYTHING THAT GOES HERE?
];

////////////////////////////////////////////////////////////////////////////////

String gen_class_name(Symbol symb) = upper_camel_case(symb);

String decl_type_export_funct_name(Symbol symb) = "Export_" & gen_class_name(symb);
String decl_type_import_funct_name(Symbol symb) = "Import_" & gen_class_name(symb);