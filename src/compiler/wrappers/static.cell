implicit prg : CompiledPrg, block_name : DBSymbol {
  String pretty_name(Symbol name) = safe_snake_case(name);

  String db_class_name = safe_class_name(block_name);
}


implicit prg : CompiledPrg, block_name : DBSymbol, duplicate_names : [String, Nat] {
  String call_handler_name(Symbol tag, Nat arity) {
    name = pretty_name(tag);
    name = name & "_" if static_auto_lowercase_name_has_conflicts(name, arity);
    return name;
  }


  String call_method_name(MethodId method_id) {
    bare_id = bare_id(method_id.symbol);
    name = pretty_name(bare_id);
    name = name & "_" if static_auto_lowercase_name_has_conflicts(name, method_id.arity);
    return name;
  }


  Bool static_auto_lowercase_name_has_conflicts(String name, Nat arity) {
    builtin_methods = builtin_methods;
    return builtin_methods(name, arity) or duplicate_names(name, arity);

    [String, Nat] builtin_methods = [
      // Always present methods
      "load",             1;
      "save",             1;
      "execute",          1;
      "on_success",       1;
      "on_failure",       1
    ];
  }
}


## REMOVE typedefs IF POSSIBLE. IT'S REDUNDANT
implicit prg : CompiledPrg, prg_data : PrgData, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol], block_name : DBSymbol, duplicate_names : [String, Nat] {
  (String*, String*) db_method_wrapper(MethodId method_id, <CompiledMethod, OptCompMethod> method, String typed_ptr_def) {
    if not method_id.id? {
      ext_name = call_method_name(method_id);
      return method_wrapper(method_id, method, block_name, ext_name, db_class_name, typed_ptr_def);
    }
    else
      return ((), ());
  }


  (String*, String*) handler_wrapper(HandlerId handler_id, NeType msg_type, HandlerWrapper wrapper, String typed_ptr_def) {
    ext_name = call_handler_name(untag(wrapper.tag), |wrapper.args|);
    return handler_wrapper(handler_id, msg_type, wrapper, block_name, ext_name, db_class_name, typed_ptr_def);
  }

  //////////////////////////////////////////////////////////////////////////////

  (String*, String*) static_auto_accessors(StaticBlock block, String typed_ptr_def) {
    handlers_wrappers = (handler_wrapper(id, block.handlers(id).msg_type, h, typed_ptr_def) : id, h <- isort(block.exported_handlers));
    handlers_wrappers_decls, handlers_wrappers_impls = (join(ls) : ls <- unzip(handlers_wrappers));

    methods_wrappers = isort([db_method_wrapper(id, m, typed_ptr_def) : id m <- block.methods]);
    methods_wrappers_decls, methods_wrappers_impls = (join(ls) : ls <- unzip(methods_wrappers));

    decls = handlers_wrappers_decls & ("" if handlers_wrappers_decls != () and methods_wrappers_decls != ()) & methods_wrappers_decls;
    impls = handlers_wrappers_impls & methods_wrappers_impls;

    return (decls, impls);
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, block_name : DBSymbol {
  (String, Nat)* pretty_names(StaticBlock block) {
    handlers_names = ((pretty_name(_untag_(h.tag)), |h.args|) : id, h <- isort(block.exported_handlers));
    methods_names = (
      (pretty_name(bare_id(id.symbol)), id.arity) : id, _ <- isort(block.methods), not id.id?
    );
    return handlers_names & methods_names;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[NeType] interface_types(StaticBlock block) {
  handlers_types = [t : _ h <- block.exported_handlers, (t, _, _, _) <- h.args];
  methods_types = union([set(m.args_types) & [m.ret_type] : _ m <- block.methods]);
  return handlers_types & methods_types;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, prg_data : PrgData, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*, String*) static_auto_wrapper(StaticBlock block) {
    class_name = db_class_name(block_name = block.name);
    data_struct_name = class_name & "_DATA";
    typed_ptr_def = data_struct_name & " *ptr = (" & data_struct_name & " *) this->ptr;";

    let block_name = block.name {
      dup_names = [id(0), id(1) : id <- duplicates(pretty_names(block))];
      let duplicate_names = dup_names
        accessors_decls, accessors_impls = static_auto_accessors(block, typed_ptr_def);
    }

    db_name = native_name(block.name);
    auxiliary_name = native_auxiliary_name(block.name);
    has_any_updates = block.msg_memb_pred != nothing;

    links_types = (upper_camel_case(bare_id(l)) : l <- block.links);

    ctor_impl_args = (t & " d" & printed(i) : t @ i <- links_types);

    dep_autos_args_list = ("d" & printed(i) & ".automaton" : i < |links_types|);
    dep_auxs_args_list = ("d" & printed(i) & ".auxiliary" : i < |links_types|);

    dep_autos_list = ("dependee" & printed(i) & ".automaton" : i < |links_types|);
    dep_auxs_list = ("dependee" & printed(i) & ".auxiliary" : i < |links_types|);

    ctor_sgn = class_name & "(" & append(ctor_impl_args, ", ") & ")";

    init_method = init_method_name(block.name);
    aux_init_method = aux_init_method_name(block.name);
    cleanup_method = cleanup_method_name(block.name);

    load_err_msg = "Loading failed. Either the input had syntax errors, or the input value was not a valid state for " & native_name(block.name);

    // Class declaration

    class_decl = (
      "class " & class_name & " {",
      "  public:",
      "    " & ctor_sgn & ";",
      "    ~" & class_name & "();",
      "",
      "    void save(ostream &);",
      "    void load(istream &);",
      "" if has_any_updates,
      "    void execute(const string &message);" if has_any_updates,
      "" if accessors_decls != ()
    ) & {if accessors_decls != () then indent_lines(accessors_decls, 2) else ()} & (
      "",
      "  private:",
      "    void *ptr;",
      "};"
    );

    // Class implementation

    env_ref = "ptr->env";
    auto_ref = "&ptr->automaton";
    aux_ref = "&ptr->auxiliary";

    class_impl = (
      "",
      ""
      ) & class_decl & (
      "",
      "",
      "struct " & data_struct_name & " {",
      "  ENV env;",
      "  " & db_name & " automaton;",
      "  " & auxiliary_name & " auxiliary;"
    );

    for rel_auto_id @ i <- block.links {
      dep_decl = "  " & safe_class_name(rel_auto_id) & " *dependee" & _print_(i) & ";";
      class_decl = (class_decl | dep_decl);
    }

    class_impl = (class_impl |
      "};",
      "",
      "",
      class_name & "::" & ctor_sgn & " {",
      "  init_runtime();",
      "",
      "  " & data_struct_name & " *ptr = new " & data_struct_name & "();",
      "  this->ptr = ptr;",
      "  memset(&ptr->env, 0, sizeof(ENV));",
      "  handler_wrapper_begin();",
      "  " & native_call(init_method, (auto_ref) & dep_autos_args_list & (env_ref), context=:wrapper),
      "  " & native_call(aux_init_method, (auto_ref, aux_ref) & dep_auxs_args_list, context=:wrapper),
      "  handler_wrapper_finish();"
    );

    for rel_auto_id @ i <- block.links {
      idx_str = _print_(i);
      class_impl = (class_impl | "  ptr->dependee" & idx_str & " = d" & idx_str & ";");
    }

    class_impl = (class_impl |
      "}",
      "",
      class_name & "::~" & class_name & "() {",
      "  " & typed_ptr_def,
      "  " & native_call(cleanup_method, (auto_ref, aux_ref), context=:wrapper),
      "  delete ptr;",
      "}",
      "",
      "void " & class_name & "::save(std::ostream &os) {",
      "  " & typed_ptr_def,
      "",
      "  assert(total_stack_mem_alloc() == 0);",
      "  ",
      "  WRITE_FILE_STATE write_state;",
      "  write_state.write = ostream_write;",
      "  write_state.state = &os;",
      "  write_state.success = true;",
      "  ",
      "  try {",
      "    " & write_state_proc_name(block.name) & "(&ptr->automaton, &write_state);",
      "  }",
      "  catch (...) {",
      "    clear_all_mem();",
      "    throw;    ",
      "  }",
      "  ",
      "  clear_all_mem();",
      "}",
      "",
      "void " & class_name & "::load(std::istream &is) {",
      "  std::istream::iostate exceptions = is.exceptions();",
      "  is.exceptions(exceptions | std::istream::badbit);",
      "  ",
      "  " & typed_ptr_def,
      "",
      "  assert(total_stack_mem_alloc() == 0);",
      "",
      "  " & db_name & " *target = " & auto_ref & ";",
      "  " & auxiliary_name & " *auxiliary = " & aux_ref & ";",
      "  ENV &env = " & env_ref & ";",
      "",
      "  " & db_name & " new_inst;",
      "  " & init_method & "(&new_inst, env);",
      "",
      "  try {",
      "    bool succeeded = " & load_state_proc_name(block.name) & "(&new_inst, istream_read, &is);",
      "    if (!succeeded) {",
      "      throw std::domain_error(\"" & load_err_msg & "\");", //## TODO: BE MORE SPECIFIC ABOUT THE TYPE OF THE ERROR
      "    }",
      "  }",
      "  catch (...) {",
      "    " & cleanup_method & "(&new_inst, NULL);",
      "    clear_all_mem();",
      "    is.exceptions(exceptions);",
      "    throw;",
      "  }",
      "  ",
      "  " & cleanup_method & "(target, auxiliary);",
      "  *target = new_inst;",
      "  " & aux_init_method & "(target, auxiliary);",
      "  ",
      "  clear_all_mem();",
      "  ",
      "  is.exceptions(exceptions);",
      "}"
    );

    class_impl = class_impl & (
      "",
      "void " & class_name & "::execute(const std::string &message) {",
      "  uint32 error_offset;",
      "  OBJ parsed_msg;",
      "",
      "  " & typed_ptr_def,
      "",
      "  handler_wrapper_begin();",
      "",
      "  try {",
      "    parsed_msg = import_obj(message);",
      "    if (!" & native_fn_name(value_unsafe(block.msg_memb_pred), context=:wrapper) & "(parsed_msg)) {",
      "      throw std::invalid_argument(\"Invalid message type\");",
      "    }",
      "    uint32 index = " & native_call(handler_dispatch_resolver_name(block.name), ("parsed_msg"), context=:wrapper),
      "    bool (*msg_handler)(" & db_name & " *, " & auxiliary_name & " *, OBJ, ENV &) = " & msg_handler_entry_point_array(block.name) & "[index];",
      "    bool succeeded = " & native_call("msg_handler", (auto_ref, aux_ref, "parsed_msg", env_ref), context=:wrapper),
      "    if (!succeeded) {",
      "      const char *err_msg = ptr->auxiliary.last_error_msg;",
      "      throw std::runtime_error(err_msg);",
      "    }",
      "  }",
      "  catch (...) {",
      "    handler_wrapper_abort();",
      "    memset(&ptr->env, 0, sizeof(ENV));",
      "    throw;",
      "  }",
      "",
      "  handler_wrapper_finish();",
      "}"
    ) if has_any_updates;

    class_impl = (class_impl | "") & accessors_impls if accessors_impls != ();
    class_impl = (class_impl | "");

    return (class_name, class_decl, class_impl);
  }
}
