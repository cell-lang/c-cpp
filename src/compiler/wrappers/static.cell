implicit prg : CompiledPrg, block_name : DBSymbol {
  String external_name(Symbol name) = sentence_case(name);

  String pretty_name(Symbol name) = safe_upper_camel_case(name);

  String db_class_name = safe_class_name(block_name);
}


implicit prg : CompiledPrg, block_name : DBSymbol, duplicate_names : [String, Nat] {
  String call_handler_name(Symbol name, Nat arity) =
    if pretty_name_has_conflicts(name, arity)
      then "__" & external_name(name) // Fallback name
      else pretty_name(name);


  String call_method_name(MethodId method_id) {
    bare_id = bare_id(method_id.symbol);
    return if pretty_name_has_conflicts(bare_id, method_id.arity)
      then "_" & external_name(bare_id) // Fallback name
      else pretty_name(bare_id);
  }


  Bool pretty_name_has_conflicts(Symbol member_id, Nat arity) {
    pretty_name = pretty_name(member_id);
    builtin_methods = builtin_methods;
    return pretty_name == db_class_name or
           builtin_methods(pretty_name, arity) or
           duplicate_names(pretty_name, arity);

    [String, Nat] builtin_methods = [
      // Object class constructor
      "Object",           0;

      // Object class instance methods
      "Equals",           1;
      "Equals",           2;
      "Finalize",         0;
      "GetHashCode",      0;
      "GetType",          0;
      "MemberwiseClone",  0;
      "ReferenceEquals",  2;
      "ToString",         0;

      // Always present methods
      "Load",             1;
      "Save",             1;
      "Execute",          1;

      // Always present fields
      ## BUG: DO THEY CONFLICT WITH METHODS OF ANY ARITY?
      "OnSuccess",        0;
      "OnFailure",        0
    ];
  }
}


## REMOVE typedefs IF POSSIBLE. IT'S REDUNDANT
implicit prg : CompiledPrg, prg_data : PrgData, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol], block_name : DBSymbol, duplicate_names : [String, Nat] {
  (String*, String*) db_method_wrapper(MethodId method_id, <CompiledMethod, OptCompMethod> method, String typed_ptr_def) {
    if not method_id.id? {
      ext_name = call_method_name(method_id);
      return method_wrapper(method_id, method, block_name, ext_name, db_class_name, typed_ptr_def);
    }
    else
      return ((), ());
  }


  (String*, String*) handler_wrapper(HandlerId handler_id, NeType msg_type, HandlerWrapper wrapper, String typed_ptr_def) {
    ext_name = call_handler_name(untag(wrapper.tag), |wrapper.args|);
    return handler_wrapper(handler_id, msg_type, wrapper, block_name, ext_name, db_class_name, typed_ptr_def);
  }

  //////////////////////////////////////////////////////////////////////////////

  (String*, String*) static_auto_accessors(StaticBlock block, String typed_ptr_def) {
    handlers_wrappers = (handler_wrapper(id, block.handlers(id).msg_type, h, typed_ptr_def) : id, h <- isort(block.exported_handlers));
    handlers_wrappers_decls, handlers_wrappers_impls = (join(ls) : ls <- unzip(handlers_wrappers));

    methods_wrappers = isort([db_method_wrapper(id, m, typed_ptr_def) : id m <- block.methods]);
    methods_wrappers_decls, methods_wrappers_impls = (join(ls) : ls <- unzip(methods_wrappers));

    decls = handlers_wrappers_decls & methods_wrappers_decls;
    impls = handlers_wrappers_impls & methods_wrappers_impls;

    return (decls, impls);
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, block_name : DBSymbol {
  (String, Nat)* pretty_names(StaticBlock block) {
    handlers_names = ((pretty_name(_untag_(h.tag)), |h.args|) : id, h <- isort(block.exported_handlers));
    methods_names = (
      (pretty_name(bare_id(id.symbol)), id.arity) : id, _ <- isort(block.methods), not id.id?
    );
    return handlers_names & methods_names;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[NeType] interface_types(StaticBlock block) {
  handlers_types = [t : _ h <- block.exported_handlers, (t, _, _, _) <- h.args];
  methods_types = union([set(m.args_types) & [m.ret_type] : _ m <- block.methods]);
  return handlers_types & methods_types;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg : CompiledPrg, prg_data : PrgData, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String, String*, String*) static_auto_wrapper(StaticBlock block) {
    class_name = db_class_name(block_name = block.name);
    data_struct_name = class_name & "_DATA";
    typed_ptr_def = data_struct_name & " *ptr = (" & data_struct_name & " *) this->ptr;";

    let block_name = block.name {
      dup_names = [id(0), id(1) : id <- duplicates(pretty_names(block))];
      let duplicate_names = dup_names
        accessors_decls, accessors_impls = static_auto_accessors(block, typed_ptr_def);
    }

    db_name = native_name(block.name);
    auxiliary_name = native_auxiliary_name(block.name);
    has_any_updates = block.msg_memb_pred != nothing;

    links_types = (upper_camel_case(bare_id(l)) : l <- block.links);

    ctor_impl_args = (t & " d" & printed(i) : t @ i <- links_types);

    dep_autos_args_list = ("d" & printed(i) & ".automaton" : i < |links_types|);
    dep_auxs_args_list = ("d" & printed(i) & ".auxiliary" : i < |links_types|);

    dep_autos_list = ("dependee" & printed(i) & ".automaton" : i < |links_types|);
    dep_auxs_list = ("dependee" & printed(i) & ".auxiliary" : i < |links_types|);

    ctor_sgn = class_name & "(" & append(ctor_impl_args, ", ") & ")";

    // Class declaration

    class_decl = (
      "class " & class_name & " {",
      "  private:",
      "    void *ptr;",
      "",
      "  public:",
      "    " & ctor_sgn & ";",
      "    ~" & class_name & "();",
      "",
      "    void save(const std::string &filename);",
      "    void load(const std::string &filename);"
    );

    class_decl = (class_decl | "", "    void execute(const std::string &message);") if has_any_updates;
    class_decl = (class_decl | "") & indent_lines(accessors_decls, 2) if accessors_decls != ();
    class_decl = (class_decl | "};");

    // Class implementation

    env_ref = "ptr->env";
    auto_ref = "&ptr->automaton";
    aux_ref = "&ptr->auxiliary";

    class_impl = (
      "",
      ""
      ) & class_decl & (
      "",
      "",
      "struct " & data_struct_name & " {",
      "  ENV env;",
      "  " & db_name & " automaton;",
      "  " & auxiliary_name & " auxiliary;"
    );

    for rel_auto_id @ i <- block.links {
      dep_decl = "  " & safe_class_name(rel_auto_id) & " *dependee" & _print_(i) & ";";
      class_decl = (class_decl | dep_decl);
    }

    class_impl = (class_impl |
      "};",
      "",
      "",
      class_name & "::" & ctor_sgn & " {",
      "  " & data_struct_name & " *ptr = new " & data_struct_name & "();",
      "  this->ptr = ptr;",
      "  memset(&ptr->env, 0, sizeof(ENV));",
      "  " & native_call(init_method_name(block.name), (auto_ref) & dep_autos_args_list & (env_ref), context=:wrapper),
      "  " & native_call(aux_init_method_name(block.name), (auto_ref, aux_ref) & dep_auxs_args_list, context=:wrapper)
    );

    for rel_auto_id @ i <- block.links {
      idx_str = _print_(i);
      class_impl = (class_impl | "  ptr->dependee" & idx_str & " = d" & idx_str & ";");
    }

    class_impl = (class_impl |
      "}",
      "",
      class_name & "::~" & class_name & "() {",
      "  " & typed_ptr_def,
      "  " & native_call(cleanup_method_name(block.name), (auto_ref, aux_ref), context=:wrapper),
      "  delete ptr;",
      "}",
      "",
      "void " & class_name & "::save(const std::string &filename) {",
      "  " & typed_ptr_def,
      "  OBJ fname_obj = str_to_obj(filename.c_str());",
      "  OBJ succeeded = " & native_call(save_state_entry_point_name(block.name), ("fname_obj", auto_ref, aux_ref), context=:wrapper),
      "  if (!get_bool(succeeded)) {",
      "    throw std::exception();", ## TODO: ADD INFORMATION ABOUT THE ERROR
      "  }",
      "}",
      "",
      "void " & class_name & "::load(const std::string &filename) {",
      "  " & typed_ptr_def,
      "  OBJ fname_obj = str_to_obj(filename.c_str());",
      "  OBJ succeeded = " & native_call(load_state_entry_point_name(block.name), ("fname_obj", auto_ref, aux_ref, env_ref), context=:wrapper),
      "  if (!get_bool(succeeded)) {",
      "    throw std::exception();", ## TODO: ADD INFORMATION ABOUT THE ERROR
      "  }",
      "}"
    );

    class_impl = class_impl & (
      "",
      "void " & class_name & "::execute(const std::string &message) {",
      "  uint32 error_offset;",
      "  OBJ parsed_msg;",
      "  if (!parse(message.c_str(), message.length(), &parsed_msg, &error_offset)) {",
      "    throw std::exception();", ## TODO: ADD INFORMATION ABOUT THE ERROR
      "  }",
      "  if (!" & native_fn_name(value_unsafe(block.msg_memb_pred), context=:wrapper) & "(parsed_msg)) {",
      "    throw std::exception();", ## TODO: ADD INFORMATION ABOUT THE ERROR
      "  }",
      "  " & typed_ptr_def,
      "  uint32 index = " & native_call(handler_dispatch_resolver_name(block.name), ("parsed_msg"), context=:wrapper),
      "  bool (*msg_handler)(" & db_name & " *, " & auxiliary_name & " *, OBJ, ENV &) = " & msg_handler_entry_point_array(block.name) & "[index];",
      "  bool succeeded = " & native_call("msg_handler", (auto_ref, aux_ref, "parsed_msg", env_ref), context=:wrapper),
      "  if (!succeeded) {",
      "    throw std::exception();", ## TODO: ADD INFORMATION ABOUT THE ERROR (WHICH OUGHT TO BE STORED IN THE AUXILIARY DATA STRUCTURE)
      "  }",
      "}"
    ) if has_any_updates;

    class_impl = (class_impl | "") & accessors_impls if accessors_impls != ();
    class_impl = (class_impl | "");

    return (class_name, class_decl, class_impl);
  }
}
