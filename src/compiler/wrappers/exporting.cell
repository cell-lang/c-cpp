implicit prg : CompiledPrg, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  String* export_code(InterType it, String expr, String action_prefix) =
    bool                    = (action_prefix & "get_bool(" & expr & ");"),
    integer                 = (action_prefix & "get_int(" & expr & ");"),
    float                   = (action_prefix & "get_float(" & expr & ");"),
    string                  = (action_prefix & "export_string(" & expr & ");"),
    date                    = (action_prefix & "export_date(" & expr & ");"),
    time                    = (action_prefix & "export_time(" & expr & ");"),
    symbol()                = (action_prefix & "export_symbol(" & expr & ");"),
    tuple(ts?)              = tuple_export_code(ts, expr, action_prefix),
    record(fs?)             = (action_prefix & "export_as_text(" & expr & ");"),
    seq(t?)                 = seq_export_code(t, expr, action_prefix),
    set(t?)                 = set_export_code(t, expr, action_prefix),
    bin_rel(a1?, a2?)       = bin_rel_export_code(a1, a2, expr, action_prefix),
    tern_rel(a1?, a2?, a3?) = tern_rel_export_code(a1, a2, a3, expr, action_prefix),
    tagged()                = tagged_type_export_code(it, expr, action_prefix),
    optional(t?)            = optional_type_export_code(t, expr, action_prefix),
    generic                 = (action_prefix & "export_as_text(" & expr & ");"),
    generated(ts?)          = (action_prefix & decl_type_export_funct_name(bare_id(ts)) & "(" & expr & ");");


  String* optional_type_export_code(InterType inner_type, String expr, String action_prefix) {
    var = new_unique_var(:unused);
    ptr_var = new_unique_var(:unused);
    native_type = return_value_type(inner_type);
    inner_type_export_code = export_code(inner_type, var, "*" & ptr_var & " = ");

    return (
      "if (!is_symb(" & expr & ", symb_id_nothing)) {",
      "  OBJ " & var & " = get_inner_obj(" & expr & ");",
      "  " & native_type & " *" & ptr_var & " = new " & native_type & ";"
    ) & indent_lines(inner_type_export_code) & (
      "  " & action_prefix & "std::unique_ptr<" & native_type & ">(" & ptr_var & ");",
      "}",
      "else",
      "  " & action_prefix & "std::unique_ptr<" & native_type & ">();"
    );
  }


  String* tagged_type_export_code(TaggedInterType tagged_type, String expr, String action_prefix) {
    assert tagged_type != :generic;
    // return export_code(:generic, expr, action_prefix) if tagged_type == :generic; ## QUESTION: WHY WAS THIS HERE IN THE PLACE

    in_var = new_unique_var(:unused);
    instr = "OBJ " & in_var & " = get_inner_obj(" & expr & ");";
    untagged_type = untagged_type(tagged_type);
    return (instr) & export_code(untagged_type, in_var, action_prefix);
  }


  String* tuple_export_code(InterType+ types, String expr, String action_prefix) {
    tmp_var = new_unique_var(:unused);
    item_vars_base_name = new_unique_var(:unused);
    item_vars = (item_vars_base_name & "_" & _print_(i + 1) : i < |types|);
    item_types = (qualified_return_type(t) : t <- types);

    asgnm_code = join(({
        item_var_decl = item_types(i) & " " & item_vars(i) & ";";
        asgnm_text = item_vars(i) & " = ";
        elt_fetch_instr = tmp_var & " = get_obj_at(" & expr & ", " & printed(i) & ");";
        return (item_var_decl, elt_fetch_instr) & export_code(t, tmp_var, asgnm_text);
      } : t @ i <- types
    ));

    tmp_var_decl = "OBJ " & tmp_var & ";";
    tuple_args = (if must_be_moved(t) then "std::move(" & item_vars(i) & ")" else item_vars(i) : t @ i <- types);
    tuple_inst_expr = "std::make_tuple(" & append(tuple_args, ", ") & ")";
    tuple_inst_expr = "std::move(" & tuple_inst_expr & ")" if (t <- types : must_be_moved(t));
    tuple_inst_instr = action_prefix & tuple_inst_expr & ";";

    return (tmp_var_decl) & (asgnm_code | tuple_inst_instr);
  }


  String* seq_export_code(EltInterType elem_type, String expr, String action_prefix) {
    return match (elem_type)
      bool                = (action_prefix & "export_bool_vector(" & expr & ");"),
      byte                = (action_prefix & "export_byte_vector(" & expr & ");"),
      int32               = (action_prefix & "export_int32_vector(" & expr & ");"),
      integer             = (action_prefix & "export_int64_vector(" & expr & ");"),
      float               = (action_prefix & "export_double_vector(" & expr & ");"),
      string              = (action_prefix & "export_string_vector(" & expr & ");"),
      generic             = (action_prefix & "export_text_vector(" & expr & ");"),
      tagged(_, generic)  = seq_export_code(:generic, expr, action_prefix),
      date                |
      time                |
      tuple()             |
      record()            |
      seq()               |
      set()               |
      bin_rel()           |
      tern_rel()          |
      tagged()            |
      optional()          |
      symbol()            |
      generated()         = generic_seq_export_code(elem_type, expr, action_prefix);


    String* generic_seq_export_code(InterType elem_type, String expr, String action_prefix) {
      expr_var   = new_unique_var(:unused);
      size_var   = new_unique_var(:unused);
      vector_var = new_unique_var(:unused);
      array_var  = new_unique_var(:unused);
      elt_var    = new_unique_var(:unused);
      idx_var    = new_unique_var(:unused);

      out_elem_type = qualified_return_type(elem_type);
      copied_expr = if must_be_moved(elem_type) then "std::move(" & vector_var & ")" else vector_var;

      return (
        "OBJ " & expr_var & " = " & expr & ";",
        "int " & size_var & " = get_size(" & expr_var & ");",
        "vector<" & out_elem_type & "> " & vector_var & "(" & size_var & ");",
        "if (" & size_var & " > 0) {",
        "  OBJ *" & array_var & " = get_seq_elts_ptr(" & expr_var & ");",
        "  for (int " & idx_var & " = 0 ; " & idx_var & " < " & size_var & " ; " & idx_var & "++) {",
        "    OBJ " & elt_var & " = " & array_var & "[" & idx_var & "];"
      ) & indent_lines(export_code(elem_type, elt_var, vector_var & "[" & idx_var & "] = "), 2) & (
        "  }",
        "}",
        action_prefix & copied_expr & ";"
      );
    }
  }


  String* set_export_code(InterType elt_type, String expr, String action_prefix) {
    set_var     = new_unique_var(:unused);
    idx_var     = new_unique_var(:unused);
    iter_var    = new_unique_var(:unused);
    elt_var     = new_unique_var(:unused);
    out_elt_var = new_unique_var(:unused);

    out_type = qualified_return_type(:set(elt_type));
    copied_expr = if must_be_moved(elt_type) then "std::move(" & set_var & ")" else set_var;

    return (
      out_type & " " & set_var & "(get_size(" & expr & "));",
      "SET_ITER " & iter_var & ";",
      "get_set_iter(" & iter_var & ", " & expr & ");",
      "uint32 " & idx_var & " = 0;",
      "while (!is_out_of_range(" & iter_var & ")) {",
      "  OBJ " & elt_var & " = get_curr_obj(" & iter_var & ");"
    ) & indent_lines(export_code(elt_type, elt_var, set_var & "[" & idx_var & "] = ")) & (
      "  move_forward(" & iter_var & ");",
      "  " & idx_var & "++;",
      "}",
      action_prefix & copied_expr & ";"
    );
  }


  String* bin_rel_export_code(InterType left_arg_type, InterType right_arg_type, String expr, String action_prefix) {
    bin_rel_var       = new_unique_var(:unused);
    idx_var           = new_unique_var(:unused);
    iter_var          = new_unique_var(:unused);
    left_arg_var      = new_unique_var(:unused);
    right_arg_var     = new_unique_var(:unused);
    out_left_arg_var  = new_unique_var(:unused);
    out_right_arg_var = new_unique_var(:unused);

    out_type = qualified_return_type(:bin_rel(left_arg_type, right_arg_type));
    out_left_arg_type = qualified_return_type(left_arg_type);
    out_right_arg_type = qualified_return_type(right_arg_type);

    copied_expr = bin_rel_var;
    copied_expr = "std::move(" & copied_expr & ")" if must_be_moved(left_arg_type) or must_be_moved(right_arg_type);

    code = (
      out_type & " " & bin_rel_var & "(get_size(" & expr & "));",
      "BIN_REL_ITER " & iter_var & ";",
      "get_bin_rel_iter(" & iter_var & ", " & expr & ");",
      "uint32 " & idx_var & " = 0;",
      "while (!is_out_of_range(" & iter_var & ")) {",
      "  OBJ " & left_arg_var & " = get_curr_left_arg(" & iter_var & ");",
      "  OBJ " & right_arg_var & " = get_curr_right_arg(" & iter_var & ");",
      "  " & out_left_arg_type & " " & out_left_arg_var & ";",
      "  " & out_right_arg_type & " " & out_right_arg_var & ";"
    );

    code = code & indent_lines(export_code(left_arg_type, left_arg_var, out_left_arg_var & " = "));
    code = code & indent_lines(export_code(right_arg_type, right_arg_var, out_right_arg_var & " = "));

    return (
      code |
      "  " & bin_rel_var & "[" & idx_var & "] = std::make_tuple(" & out_left_arg_var & ", " & out_right_arg_var & ");",
      "  move_forward(" & iter_var & ");",
      "  " & idx_var & "++;",
      "}",
      action_prefix & copied_expr & ";"
    );
  }


  String* tern_rel_export_code(InterType type1, InterType type2, InterType type3, String expr, String action_prefix) {
    tern_rel_var = new_unique_var(:unused);
    idx_var      = new_unique_var(:unused);
    iter_var     = new_unique_var(:unused);
    arg1_var     = new_unique_var(:unused);
    arg2_var     = new_unique_var(:unused);
    arg3_var     = new_unique_var(:unused);
    out_arg1_var = new_unique_var(:unused);
    out_arg2_var = new_unique_var(:unused);
    out_arg3_var = new_unique_var(:unused);

    out_type = qualified_return_type(:tern_rel(type1, type2, type3));
    out_type1 = qualified_return_type(type1);
    out_type2 = qualified_return_type(type2);
    out_type3 = qualified_return_type(type3);

    copied_expr = tern_rel_var;
    copied_expr = "std::move(" & copied_expr & ")" if must_be_moved(type1) or must_be_moved(type2) or must_be_moved(type3);

    code = (
      out_type & " " & tern_rel_var & "(get_size(" & expr & "));",
      "TERN_REL_ITER " & iter_var & ";",
      "get_tern_rel_iter(" & iter_var & ", " & expr & ");",
      "uint32 " & idx_var & " = 0;",
      "while (!is_out_of_range(" & iter_var & ")) {",
      "  OBJ " & arg1_var & " = tern_rel_it_get_left_arg(" & iter_var & ");",
      "  OBJ " & arg2_var & " = tern_rel_it_get_mid_arg(" & iter_var & ");",
      "  OBJ " & arg3_var & " = tern_rel_it_get_right_arg(" & iter_var & ");",
      "  " & out_type1 & " " & out_arg1_var & ";",
      "  " & out_type2 & " " & out_arg2_var & ";",
      "  " & out_type3 & " " & out_arg3_var & ";"
    );

    code = code & indent_lines(export_code(type1, arg1_var, out_arg1_var & " = "));
    code = code & indent_lines(export_code(type2, arg2_var, out_arg2_var & " = "));
    code = code & indent_lines(export_code(type3, arg3_var, out_arg3_var & " = "));

    args_vars = out_arg1_var & ", " & out_arg2_var & ", " & out_arg3_var;
    return (
      code |
      "  " & tern_rel_var & "[" & idx_var & "] = std::make_tuple(" & args_vars & ");",
      "  move_forward(" & iter_var & ");",
      "  " & idx_var & "++;",
      "}",
      action_prefix & copied_expr & ";"
    );
  }
}
