implicit prg : CompiledPrg, prg_data : PrgData, typedefs : [TypeName -> NeType], generated : [BasicTypeSymbol] {
  (String*, String*) handler_wrapper(HandlerId handler_id, NeType msg_type, HandlerWrapper wrapper, DBSymbol block_name, String ext_name, String class_name, String typed_ptr_def) {
    fields_types, fields_vars, fields_cond_vars, fields_memb_preds = unzip4(wrapper.args);
    arity = |fields_vars|;
    optional = (v != nothing : v <- fields_cond_vars);

    args_inter_types = ({
      it = interface_type(t, :input);
      it = match (it)
        optional()  = if optional(i) then :generic else it,
        _           = it;
      return it;
    } : t @ i <- fields_types);

    fields_ids = (bare_id(v) : v <- fields_vars);
    args_names_map = adjusted_unambiguous_lower_camel_case_names(set(fields_ids));
    args_names = (args_names_map(l) : l <- fields_ids);

    args_types = (input_arg_type(it, optional(i)) : it @ i <- args_inter_types);
    args_decls = (it & " " & args_names(i) : it @ i <- args_types);

    code = ("", "void " & class_name & "::" & ext_name & "(" & append(args_decls, ", ") & ") {");

    let context = :wrapper {
      field_vars = (native_var_ref_name(v) : v <- fields_vars);
      code = (code | "  OBJ " & append(field_vars, ", ") & ";") if field_vars != ();
      already_decl_vars = [v : v <- fields_vars];
      code = code & indent_lines(gen_vars_decls(wrapper.msg_inst_code, already_decl_vars));
      code = (code | "") if |code| > 2;

      code = (code | "  " & typed_ptr_def, "  handler_wrapper_begin();", "", "  try {");

      code = code & join(({
          cond_var = fields_cond_vars(i);
          if cond_var != nothing {
            non_null_conv_code = import_code(it, "(*" & args_names(i) & ")", field_vars(i) & " = ");
            cond_var_name = native_var_ref_name(value(cond_var));
            conv_code = (
              "if (" & args_names(i) & " != NULL) {",
              "  " & cond_var_name & " = true;"
            ) & indent_lines(non_null_conv_code) & (
              "}",
              "else {",
              "  " & cond_var_name & " = false;",
              "  " & native_var_ref_name(fields_vars(i)) & " = make_blank_obj();",
              "}"
            );
          }
          else
            conv_code = import_code(it, args_names(i), field_vars(i) & " = ");

          return indent_lines(conv_code, 2);
        } : it @ i <- args_inter_types
      ));

      for p @ i <- fields_memb_preds {
        ## I SHOULD CHECK TO SEE IF THE NATIVE REPRESENTATION CAN LEAD
        ## TO INVALID TYPES, AND PERFORM THIS CHECK ONLY IF NECESSARY
        var_name = native_var_ref_name(fields_vars(i));
        cond_str = native_fn_name(p, context=:wrapper) & "(" & var_name & ")";
        type_user_repr = "\"" & user_repr(fields_types(i)) & "\""; ## THIS SHOULD BE ESCAPED
        check_prefix = if optional(i) then "!is_blank(" & var_name & ") && !" else "!";
        code = (code | "    if (" & check_prefix & cond_str & ")");
        exception_args = _print_(i) & ", " & var_name & ", " & type_user_repr;
        code = (code | "      throw std::exception();"); ## TODO: ADD ERROR INFORMATION. WAS: Cell.Runtime.InvalidArgumentTypeException(" & exception_args & ");"
      }

      method_name = msg_handler_entry_point_name(block_name, handler_id, msg_type);
      native_msg_expr = native_expr(wrapper.msg_expr);
      code = (
        code & indent_lines(native_code(wrapper.msg_inst_code, nothing, debug_mode=false, break_target=nothing)) |
        "    bool ok = " & native_call(method_name, ("&ptr->automaton", "&ptr->auxiliary", native_msg_expr, "ptr->env")),
        "    if (!ok) {",
        "      throw std::exception();", ## TODO: ADD ERROR INFORMATION
        "    }",
        "  }",
        "  catch (...) {",
        "    handler_wrapper_abort();",
        "    memset(&ptr->env, 0, sizeof(ENV));",
        "    throw;",
        "  }",
        "",
        "  handler_wrapper_finish();",
        "}"
      );
    }

    args_types_decl = (remove_path(s) : s <- args_types);
    if |args_decls| < 5 {
      args_decl = (
        t & " " & n & if optional(i) then " = NULL" else ""
        : t, n @ i <- zip(args_types_decl, args_names)
      );
      decl = ("void " & ext_name & "(" & append(args_decl, ", ") & ");");
    }
    else {
      alignment = nat(1 + max((length(s) : s <- nonempty(args_types_decl))));
      decl = ("void " & ext_name & "(");
      for t, n @ i <- zip(args_types_decl, args_names) {
        arg_doc = "  " & right_padded(t, alignment, ` `) & n;
        arg_doc = arg_doc & " = NULL" if optional(i);
        arg_doc = arg_doc & "," if i < arity - 1;
        decl = (decl | arg_doc);
      }
      decl = (decl | ");");
    }

    return (decl, code);
  }
}
