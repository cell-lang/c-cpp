implicit prg : CompiledPrg {
  String* import_code(InterType it, String expr, String action_prefix) =
    bool                    = (action_prefix & "make_bool(" & expr & ");"),
    integer                 = (action_prefix & "make_int(" & expr & ");"),
    float                   = (action_prefix & "make_float(" & expr & ");"),
    string                  = (action_prefix & "import_string(" & expr & ");"),
    date                    = (action_prefix & "import_date(" & expr & ");"),
    time                    = (action_prefix & "import_time(" & expr & ");"),
    symbol(s?)              = (action_prefix & "import_symbol(" & symb_id_qual_name(s) & ");"),
    tuple(ts?)              = tuple_import_code(ts, expr, action_prefix),
    record(fs?)             = record_import_code(fs, expr, action_prefix),
    seq(t?)                 = seq_import_code(t, expr, action_prefix),
    set(t?)                 = set_import_code(t, expr, action_prefix),
    bin_rel(a1?, a2?)       = bin_rel_import_code(a1, a2, expr, action_prefix),
    tern_rel(a1?, a2?, a3?) = tern_rel_import_code(a1, a2, a3, expr, action_prefix),
    tagged()                = tagged_value_import_code(it, expr, action_prefix),
    optional(t?)            = optional_value_import_code(t, expr, action_prefix),
    generic                 = (action_prefix & "import_obj(" & expr & ");");


  String* tuple_import_code(InterType+ types, String expr, String action_prefix) {
    tuple_args_array_name = new_unique_var(:unused);
    code = ("OBJ " & tuple_args_array_name & "[" & _print_(|types|) & "];");
    for t @ i <- types
      code = code & import_code(t, "std::get<" & _print_(i) & ">(" & expr & ")", tuple_args_array_name & "[" & _print_(i) & "] = ");
    code = (code | action_prefix & "build_seq(" & tuple_args_array_name & ", " & _print_(|types|) & ");");
    return code;
  }


  String* record_import_code([+Symbol -> InterType] fields, String expr, String action_prefix) {
    return (action_prefix & "import_obj(" & expr & ");");

    // ord_fields = ((l, fields(l)) : l <- sort_record_labels(keys(fields)));

    // labels_array_name = new_unique_var(:unused);
    // values_array_name = new_unique_var(:unused);

    // field_vars = (field_vars_base_name & "_" & printed(l) : l, t @ i <- ord_fields);
    // field_names = adjusted_unambiguous_lower_camel_case_names(set(left(unzip(ord_fields))));

    // fields_code = (
    //   ("OBJ " & field_vars(i) & ";",) &
    //   import_code(t, expr & "." & field_names(l), field_vars(i) & " = ")
    //   : l, t @ i <- ord_fields
    // );

    // labels = "new ushort[] {" & append((symb_id_qual_name(l) : l, _ <- ord_fields), ", ") & "}";
    // values = "new OBJ[] {" & append(field_vars, ", ") & "}";
    // tuple_instr = action_prefix & "Cell.Runtime.Builder.CreateRecord(" & labels & ", " & values & ");";

    // return (join(fields_code) | tuple_instr);
  }


  String* seq_import_code(EltInterType elem_type, String expr, String action_prefix) {
    if elem_type == :byte {
      return (action_prefix & "import_byte_array(" & expr & ");");
    }
    else if elem_type == :int32 {
      return (action_prefix & "import_int_array(" & expr & ");");
    }
    else {
      expr_var  = new_unique_var(:unused);
      len_var   = new_unique_var(:unused);
      idx_var   = new_unique_var(:unused);
      array_var = new_unique_var(:unused);

      elem_code = import_code(elem_type, expr_var & "[" & idx_var & "]", array_var & "[" & idx_var & "] = ");

      native_elem_type = input_arg_type(elem_type);

      return (
        "vector<" & native_elem_type & "> &" & expr_var & " = " & expr & ";",
        "uint32 " & len_var & " = " & expr_var & ".size();",
        "OBJ *" & array_var & " = new_obj_array(" & len_var & ");",
        "for (uint32 " & idx_var & " = 0 ; " & idx_var & " < " & len_var & " ; " & idx_var & "++) {"
      ) & indent_lines(elem_code) & (
        "}",
        action_prefix & "build_seq(" & array_var & ", " & len_var & ");"
      );
    }
  }


  String* set_import_code(InterType elem_type, String expr, String action_prefix) {
    expr_var  = new_unique_var(:unused);
    size_var  = new_unique_var(:unused);
    idx_var   = new_unique_var(:unused);
    array_var = new_unique_var(:unused);

    elem_code = import_code(elem_type, expr_var & "[" & idx_var & "]", array_var & "[" & idx_var & "] = ");

    native_elem_type = input_arg_type(elem_type);

    return (
      "vector<" & native_elem_type & "> &" & expr_var & " = " & expr & ";",
      "uint32 " & size_var & " = " & expr_var & ".size();",
      "OBJ *" & array_var & " = new_obj_array(" & size_var & ");",
      "for (int " & idx_var & " = 0 ; " & idx_var & " < " & size_var & " ; " & idx_var & "++) {"
    ) & indent_lines(elem_code) & (
      "}",
      action_prefix & "build_set(" & array_var & ", " & size_var & ");"
    );
  }


  String* bin_rel_import_code(InterType left_type, InterType right_type, String expr, String action_prefix) {
    size_var      = new_unique_var(:unused);
    idx_var       = new_unique_var(:unused);
    left_var      = new_unique_var(:unused);
    right_var     = new_unique_var(:unused);
    left_col_var  = new_unique_var(:unused);
    right_col_var = new_unique_var(:unused);

    left_type_str  = input_arg_type(left_type);
    right_type_str = input_arg_type(right_type);

    code = (
      "uint32 " & size_var & " = " & expr & ".size();",
      "OBJ *" & left_col_var & " = new_obj_array(" & size_var & ");",
      "OBJ *" & right_col_var & " = new_obj_array(" & size_var & ");",
      "for (uint32 " & idx_var & "= 0 ; " & idx_var & " < " & size_var & " ; " & idx_var & "++) {",
      "  " & left_type_str & " " & left_var & " = std::get<0>(" & expr & "[" & idx_var & "]);",
      "  " & right_type_str & " " & right_var & " = std::get<1>(" & expr & "[" & idx_var & "]);"
    );

    code = code & indent_lines(import_code(left_type, left_var, left_col_var & "[" & idx_var & "] = "));
    code = code & indent_lines(import_code(right_type, right_var, right_col_var & "[" & idx_var & "] = "));

    return (
      code |
      "}",
      action_prefix & "build_bin_rel(" & left_col_var & ", " & right_col_var & ", " & size_var & ");"
    );
  }


  String* tern_rel_import_code(InterType type1, InterType type2, InterType type3, String expr, String action_prefix) {
    size_var  = new_unique_var(:unused);
    idx_var   = new_unique_var(:unused);
    arg1_var  = new_unique_var(:unused);
    arg2_var  = new_unique_var(:unused);
    arg3_var  = new_unique_var(:unused);
    col1_var  = new_unique_var(:unused);
    col2_var  = new_unique_var(:unused);
    col3_var  = new_unique_var(:unused);

    type1_str = input_arg_type(type1);
    type2_str = input_arg_type(type2);
    type3_str = input_arg_type(type3);

    code = (
      "uint32 " & size_var & " = " & expr & ".size();",
      "OBJ *" & col1_var & " = new_obj_array(" & size_var & ");",
      "OBJ *" & col2_var & " = new_obj_array(" & size_var & ");",
      "OBJ *" & col3_var & " = new_obj_array(" & size_var & ");",
      "for (uint32 " & idx_var & "=0 ; " & idx_var & " < " & size_var & " ; " & idx_var & "++) {",
      "  " & type1_str & " " & arg1_var & " = std::get<0>(" & expr & "[" & idx_var & "]);",
      "  " & type2_str & " " & arg2_var & " = std::get<1>(" & expr & "[" & idx_var & "]);",
      "  " & type3_str & " " & arg3_var & " = std::get<2>(" & expr & "[" & idx_var & "]);"
    );

    code = code & indent_lines(import_code(type1, arg1_var, col1_var & "[" & idx_var & "] = "));
    code = code & indent_lines(import_code(type2, arg2_var, col2_var & "[" & idx_var & "] = "));
    code = code & indent_lines(import_code(type3, arg3_var, col3_var & "[" & idx_var & "] = "));

    return (
      code |
      "}",
      action_prefix & "build_tern_rel(" & col1_var & ", " & col2_var & ", " & col3_var & ", " & size_var & ");"
    );
  }


  String* tagged_value_import_code(TaggedInterType tagged_type, String expr, String action_prefix) {
    assert tagged_type != :generic;
    // return import_code(:generic, expr, action_prefix) if tagged_type == :generic; ## QUESTION: WHY WAS THIS HERE IN THE FIRST PLACE?

    out_var = new_unique_var(:unused);
    code = ("OBJ " & out_var & ";");
    code = code & import_code(untagged_type(tagged_type), expr, out_var & " = ");
    tag = object(type_tag(tagged_type));
    instr = action_prefix & "opt_repr_build(make_symb(" & symb_id_qual_name(tag) & "), " & out_var & ");";
    return (code | instr);
  }


  String* optional_value_import_code(InterType inner_type, String expr, String action_prefix) {
    ref_var = new_unique_var(:unused);
    tmp_var = new_unique_var(:unused);

    unboxed_type = input_arg_type(inner_type);

    return (
      "if (" & expr & " != NULL) {",
        "  " & unboxed_type & " &" & ref_var & " = *" & expr & ";",
        "  OBJ " & tmp_var & ";"
    ) & indent_lines(import_code(inner_type, ref_var, tmp_var & " = ")) & (
      "  " & action_prefix & "make_tag_obj(symb_id_just, " & tmp_var & ");",
      "}",
      "else",
      "  " & action_prefix & "make_symb(symb_id_nothing);"
    );
  }
}
