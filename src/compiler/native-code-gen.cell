type PrgData =  prg_data(
                  opt_reprs:                      [Symbol -> OptRecRepr+],
                  ord_lambda_exprs:               LambdaExpr*,
                  int_seqs_types_and_lengths:     (String, Nat)*,
                  int_seqs:                       Int+*,
                  cached_semi_consts_by_impl_arg: [ImplArg -> [+FnId]],
                  symbols_sets_info:              [[+Symbol] -> (Symbol+, Nat)],
                  value_stores:                   [DBSymbol -> [ValueStoreId -> ValueStoreType]],
                  masters_raw_columns:            [DBSymbol -> [TableVar, TableVar]],
                  handlers_msg_type:              [DBSymbol -> [HandlerId -> NeType]]
               );

////////////////////////////////////////////////////////////////////////////////

[String -> String*] GenerateCode(
  CompiledPrg prg,
  [DBSymbol -> [RelVar -> [+Nat -> Nat]]] rel_vars_perm_map,
  [BasicTypeSymbol] generated,
  Bool debug_mode,
  Bool include_runtime,
  Bool skip_integrity_checks
) {
  program_symbols = program_symbols(prg);
  assert |program_symbols| <= 64 * 1024; ## IMPLEMENT PROPERLY

  has_main = (p <- prg.procs : p.name == proc_symbol(:main));
  has_static_autos = prg.static_blocks != [];

  tuples_args_reprs = program_tuples_args_reprs(prg);

  bool_procs = isort(prg.bool_procs);
  fn_procs = isort([p : p <- prg.procs, not p.name :: ProcSymbol]);
  proc_procs = isort([p : p <- prg.procs, p.name :: ProcSymbol]);

  prg_data = prg_data(
    opt_reprs:                      prg.opt_reprs,
    ord_lambda_exprs:               isort(lambda_exprs(prg)),
    int_seqs_types_and_lengths:     int_seqs_types_and_lengths(prg),
    int_seqs:                       prg.int_seqs,
    cached_semi_consts_by_impl_arg: cached_semi_consts_by_impl_arg(prg),
    symbols_sets_info:              symbols_sets_info(prg),
    value_stores:                   [b.name -> b.value_stores : b <- prg.static_blocks],
    masters_raw_columns:            [b.name -> masters_raw_columns(b) : b <- prg.static_blocks],
    handlers_msg_type:              [b.name -> [id -> h.msg_type : id h <- b.handlers] : b <- prg.static_blocks]
  );

  // Sorting static blocks in topological order
  static_blocks_dep_map = [b.name -> set(b.links) : b <- prg.static_blocks];
  ord_static_block_names = join((isort(bs) : bs <- topological_sort(static_blocks_dep_map)));
  static_blocks_by_name = [b.name -> b : b <- prg.static_blocks];
  ord_static_blocks = (static_blocks_by_name(b, !) : b <- ord_static_block_names);

  // Sorting reactive blocks in topological order
  react_blocks_dep_map = [b.name -> [t : _ t <- b.nested_auto_vars] : b <- prg.react_blocks];
  ord_react_blocks_names = join((isort(bs) : bs <- topological_sort(react_blocks_dep_map)));
  react_blocks_by_name = [b.name -> b : b <- prg.react_blocks];
  ord_react_blocks = (react_blocks_by_name(b, !) : b <- ord_react_blocks_names);

  gen_content = (
    ( "#include \"lib.h\"",
      "#include \"iolib.h\""
    ) if not include_runtime,
    symbol_decls(program_symbols),
    symbol_table(program_symbols),
    int_seqs_decls(prg.int_seqs),
    symbols_arrays_decls(values(prg_data.symbols_sets_info)),
    tuples_decls(tuples_args_reprs, context = :core),
    env_decl(prg.procs),
    abstract_closure_class_decl(prg.procs),
    native_opt_type_decls(prg.opt_reprs, prg_data = prg_data, context = :core),
    tagged_int_stores_accessors(prg.static_blocks)
  );

  // Obj to tuple conversion functions
  if tuples_args_reprs != [] {
    gen_content = (gen_content | ("", ""));
    gen_content = gen_content & make_tuple_fns(tuples_args_reprs, context = :core);
    gen_content = (gen_content | ("", ""));
    gen_content = gen_content & obj_to_tuple_conv_fns(tuples_args_reprs, context = :core);
    gen_content = (gen_content | ("", ""));
    gen_content = gen_content & tuple_to_obj_conv_fns(tuples_args_reprs, context = :core);
  }

  // Runtime typechecking functions' declarations
  gen_content = (gen_content | ("", "")) if bool_procs != ();
  for d @ i <- bool_procs {
    decl = GenProcCode(d, true, prg_data, debug_mode);
    gen_content = gen_content & decl;
  }

  // Lambda functions' declarations
  gen_content = (gen_content | ("", "")) if prg_data.ord_lambda_exprs != ();
  for d @ i <- prg_data.ord_lambda_exprs {
    decl = GenLambda(d, i, true, prg_data, debug_mode);
    gen_content = (gen_content | decl);
  }

  // Function declarations
  gen_content = (gen_content | ("", "")) if fn_procs != ();
  for d @ i <- fn_procs {
    decl = GenProcCode(d, true, prg_data, debug_mode);
    gen_content = gen_content & decl;
  }

  // Static block declarations (in topological order)
  for block <- ord_static_blocks {
    def = native_static_block_decl(
      block,
      prg_data = prg_data,
      rel_vars_perm_map = rel_vars_perm_map,
      context = :core,
      debug_mode = debug_mode,
      skip_integrity_checks = skip_integrity_checks
    );
    gen_content = (gen_content | ("", "")) & def;
  }

  // Reactive blocks' declarations (in topological order)
  for block <- ord_react_blocks {
    def = native_react_block_decl(block, prg_data = prg_data, context = :core, debug_mode = debug_mode);
    gen_content = (gen_content | ("", "")) & def;
  }

  // Procedure declarations
  gen_content = (gen_content | ("", "")) if proc_procs != ();
  for d @ i <- proc_procs {
    decl = GenProcCode(d, true, prg_data, debug_mode);
    gen_content = gen_content & decl;
  }

  // Wrappers for push_call_info(..)
  wrappers = GenPushCallInfoWrappers(prg);
  gen_content = (gen_content | ("", "")) if wrappers != ();
  gen_content = gen_content & wrappers;

  // Runtime typechecking functions
  gen_content = (gen_content | ("", "")) if bool_procs != ();
  for d @ i <- bool_procs {
    def = GenProcCode(d, false, prg_data, debug_mode);
    gen_content = (gen_content | ("", "")) if i > 0;
    gen_content = gen_content & def;
  }

  // Lambda functions
  gen_content = (gen_content | ("", "")) if prg_data.ord_lambda_exprs != ();
  for d @ i <- prg_data.ord_lambda_exprs {
    decl = GenLambda(d, i, false, prg_data, debug_mode);
    gen_content = (gen_content | decl);
  }

  // Functions
  gen_content = (gen_content | ("", "")) if fn_procs != ();
  for d @ i <- fn_procs {
    def = GenProcCode(d, false, prg_data, debug_mode);
    gen_content = (gen_content | ("", "")) if i > 0;
    gen_content = gen_content & def;
  }

  // Static blocks' implementations (in topological order)
  for block <- ord_static_blocks {
    def = native_static_block_impl(
      block,
      prg_data = prg_data,
      rel_vars_perm_map = rel_vars_perm_map,
      context = :core,
      debug_mode = debug_mode,
      skip_integrity_checks = skip_integrity_checks
    );
    gen_content = (gen_content | ("", "")) & def;
  }

  // Reactive blocks' implementations (in topological order)
  for block <- ord_react_blocks {
    def = native_react_block_impl(block, prg_data = prg_data, context = :core, debug_mode = debug_mode);
    gen_content = (gen_content | ("", "")) & def;
  }

  // Procedures
  gen_content = (gen_content | ("", "")) if proc_procs != ();
  for d @ i <- proc_procs {
    def = GenProcCode(d, false, prg_data, debug_mode);
    gen_content = (gen_content | ("", "")) if i > 0;
    gen_content = gen_content & def;
  }

  gen_content = gen_content & runtime_callbacks(|program_symbols|);
  gen_content = gen_content & main_fn(debug_mode) if has_main;

  data_exchange_types = data_exchange_types(prg, generated);
  wrappers_decls, wrappers_impls = wrappers_content(prg, prg_data, generated, ord_static_blocks, ord_react_blocks);

  std_includes = (
    "#include <memory>",
    "#include <vector>",
    "#include <tuple>",
    "#include <string>",
    "",
    ""
  );

  wrappers_decls = (std_includes, data_exchange_types, wrappers_decls);

  wrappers_impls = (
    std_includes,
    ( "#include \"generated.cpp\"",
      "#include \"conversion.h\"",
      "",
      ""
    ),
    data_exchange_types,
    wrappers_impls
  );

  return [
    "generated.cpp" -> flatten(gen_content),
    // "typedefs.cpp"  -> flatten(data_exchange_types) if not has_main and data_exchange_types != (),
    "generated.h"   -> (flatten(wrappers_decls) | "") if not has_main and wrappers_decls != (),
    "automata.cpp"  -> flatten(wrappers_impls) if not has_main
  ];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Generated interface type declarations
Text data_exchange_types(CompiledPrg prg, [BasicTypeSymbol] generated) {
  decls = gen_inter_types_decls(prg = prg, typedefs = prg.typedefs, generated = generated);
  return () if decls == ();
  return decls;
  // return (
  //   "namespace ??? {",
  //   decls,
  //   "}"
  // );
}

(Text, Text) wrappers_content(CompiledPrg prg, PrgData prg_data, [BasicTypeSymbol] generated, StaticBlock* ord_static_blocks, ReactBlock* ord_react_blocks) {
  // content = (
  //   "namespace ??? {"
  // );

  decls = ();
  impls = ();

  let prg = prg, typedefs = prg.typedefs, generated = generated {
    types_decls, hierarchy = inter_types_decls;
    if types_decls != [] {
      import_fns = decl_types_import_functs(types_decls, hierarchy);
      export_fns = decl_types_export_functs(types_decls, hierarchy);
      impls = (impls |
        "",
        "",
        // "namespace ??? {",
        ( "// Conversion functions for declared interface types",
          import_fns,
          export_fns
        )
        // "}"
      );
    }
  }

  rel_auto_wrappers_decls, rel_auto_wrappers_impls = rel_auto_wrappers(ord_static_blocks, prg, prg_data, generated);
  if rel_auto_wrappers_decls != ()
    decls = (decls | ("// Facades for relational automata", "", rel_auto_wrappers_decls));
  if rel_auto_wrappers_impls != ()
    impls = (impls | ("// Facades for relational automata", "", rel_auto_wrappers_impls));

  react_auto_wrappers_decls, react_auto_wrappers_impls = react_auto_wrappers(ord_react_blocks, prg, generated);
  if react_auto_wrappers_decls != ()
    decls = (decls | ("// Facades for reactive automata", "", react_auto_wrappers_decls));
  if react_auto_wrappers_impls != ()
    impls = (impls | "// Facades for reactive automata", "", react_auto_wrappers_impls);

  return (decls, impls);
}


(Text, Text) rel_auto_wrappers(StaticBlock* ord_static_blocks, CompiledPrg prg, PrgData prg_data, [BasicTypeSymbol] generated) {
  let prg = prg, prg_data = prg_data, typedefs = prg.typedefs, generated = generated
    rel_auto_wrappers = (static_auto_wrapper(b) : b <- ord_static_blocks);
  return unzip(((decl, impl) : _, decl, impl <- rel_auto_wrappers));
}


(Text, Text) react_auto_wrappers(ReactBlock* ord_react_blocks, CompiledPrg prg, [BasicTypeSymbol] generated) {
  let prg = prg, typedefs = prg.typedefs, generated = generated
    react_auto_wrappers = (react_auto_wrapper(b) : b <- ord_react_blocks);
  return unzip(((decl, impl) : _, decl, impl <- react_auto_wrappers));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String* GenPushCallInfoWrappers(CompiledPrg prg) {
  procs_arities = [in_arity(p) : p <- prg.procs];
  static_block_methods_arities = [arity(m) : b <- prg.static_blocks, _ m <- b.methods];
  react_block_methods_arities = [arity(m) : b <- prg.react_blocks, _ m <- b.methods];
  arities = [0, 1] & procs_arities & static_block_methods_arities & react_block_methods_arities;
  wrappers = (generate_push_call_info_wrapper(a) : a <- sort_set(arities, $a < $b));
  return join(intermix(wrappers, ("")));
}


String* generate_push_call_info_wrapper(Nat arity) {
  code = ("void push_call_info_wrapper(const char *fn_name" & append((", OBJ arg" & _print_(i + 1) : i < arity)) & ") {");
  if arity > 0 {
    code = (code | "  OBJ *args = new_obj_array(" & _print_(arity) & ");");
    for i < arity
      code = (code | "  args[" & _print_(i) & "] = arg" & _print_(i + 1) & ";");
    code = (code | "  push_call_info(fn_name, " & _print_(arity) & ", args);");
  }
  else
    code = (code | "  push_call_info(fn_name, 0, NULL);");
  code = (code | "}");
  return code;
}

////////////////////////////////////////////////////////////////////////////////

implicit context : NativeContext {
  String* tuples_decls([TupleArgRepr+] tuples_args_reprs) {
    decls = ();
    for ars <- tuples_args_reprs {
      decls = (decls | "") if decls != ();
      decls = decls & tuple_decl(ars);
    }
    return decls;


    String* tuple_decl(TupleArgRepr+ args_reprs) {
      type_name = native_tuple_type(args_reprs);
      decl = ("struct " & type_name & " {");
      for r @ i <- args_reprs {
        arg_decl = "  " & native_type(r) & " arg_" & _print_(i) & ";";
        decl = (decl | arg_decl);
      }
      decl = (decl | "};");
      return decl;
    }
  }


  String* make_tuple_fns([TupleArgRepr+] tuples_args_reprs) {
    code = ();
    for ars <- tuples_args_reprs {
      code = (code | "") if code != ();
      code = code & mk_fn_def(ars);
    }
    return code;


    String* mk_fn_def(TupleArgRepr+ args_reprs) {
      type_name = native_tuple_type(args_reprs);
      fn_name = make_tuple_proc_name(args_reprs);

      code = (
        "inline " & type_name & " " & fn_name & "(" & append((native_type(r) & " arg_" & _print_(i) : r @ i <- args_reprs), ", ") & ") {",
        "  " & type_name & " tuple;"
      );

      for r @ i <- args_reprs {
        instr = "  tuple.arg_" & _print_(i) & " = arg_" & _print_(i) & ";";
        code = (code | instr);
      }

      code = (code | "  return tuple;", "}");
      return code;
    }
  }


  String* obj_to_tuple_conv_fns([TupleArgRepr+] tuples_args_reprs) {
    code = ();
    for ars <- tuples_args_reprs {
      code = (code | "") if code != ();
      code = code & conv_fn_def(ars);
    }
    return code;


    String* conv_fn_def(TupleArgRepr+ args_reprs) {
      type_name = native_tuple_type(args_reprs);
      fn_name = obj_to_tuple_proc_name(args_reprs);

      code = (
        "inline " & type_name & " " & fn_name & "(OBJ obj) {",
        "  " & type_name & " tuple;"
      );

      for r @ i <- args_reprs {
        lookup_fn_name = match (r)
          int                 = "get_int_at",
          float               = "get_float_at",
          object              |
          opt_tag_rec_repr()  = "get_obj_at";

        instr = "  tuple.arg_" & _print_(i) & " = " & lookup_fn_name & "(obj, " & _print_(i) & ");";
        code = (code | instr);
      }

      code = (code | " return tuple;", "}");
      return code;
    }
  }


  String* tuple_to_obj_conv_fns([TupleArgRepr+] tuples_args_reprs) {
    code = ();
    for ars <- tuples_args_reprs {
      code = (code | "") if code != ();
      code = code & conv_fn_def(ars);
    }
    return code;


    String* conv_fn_def(TupleArgRepr+ args_reprs) {
      type_name = native_tuple_type(args_reprs);
      fn_name = tuple_to_obj_proc_name(args_reprs);

      len_str = _print_(|args_reprs|);

      code = (
        "OBJ " & fn_name & "(" & type_name & " tuple) {",
        "  OBJ *objs = new_obj_array(" & len_str & ");"
      );

      for r @ i <- args_reprs {
        value_expr = "tuple.arg_" & _print_(i);
        value_expr = match (r)
          int                 = native_call_expr("make_int", (value_expr)),
          float               = native_call_expr("make_float", (value_expr)),
          object              |
          opt_tag_rec_repr()  = value_expr;

        instr = "  objs[" & _print_(i) & "] = " & value_expr & ";";
        code = (code | instr);
      }

      code = (code | "  return build_seq(objs, " & len_str & ");", "}");
      return code;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

String* tagged_int_stores_accessors([StaticBlock] static_blocks) {
  value_store_int_tags = [
    match (t)
      mono_tagged_integer(s?) = s,
      _ = undefined
    : a <- static_blocks, _ t <- a.value_stores, t != :object and t != :integer
  ];
  code = ();
  for t <- value_store_int_tags
    code = (code |
      "",
      "OBJ " & native_tagged_int_store_surr_to_obj_method_name(t) & "(void *store, uint32 surr) {",
      "  return make_tag_int(" & symb_id_name(t, context = :core) & ", int_store_surr_to_value((INT_STORE *) store, surr));",
      "}"
    );
  return code;
}

////////////////////////////////////////////////////////////////////////////////

String* GenLambda(LambdaExpr lambda, Nat id, Bool decl_only, PrgData prg_data, Bool debug_mode) {
  return native_code(lambda, id, decl_only, prg_data = prg_data, context = :core, debug_mode = debug_mode);
}

String* GenProcCode(ProcDef pd, Bool decl_only, PrgData prg_data, Bool debug_mode) {
  return native_code(pd, decl_only, prg_data = prg_data, context = :core, debug_mode = debug_mode);
}

////////////////////////////////////////////////////////////////////////////////

StaticBlock* ord_static_blocks(CompiledPrg prg) {
  // Static blocks sorted in topological order
  static_blocks_dep_map = [b.name -> set(b.links) : b <- prg.static_blocks];
  ord_static_block_names = join((isort(bs) : bs <- topological_sort(static_blocks_dep_map)));
  static_blocks_by_name = [b.name -> b : b <- prg.static_blocks];
  return (static_blocks_by_name(b, !) : b <- ord_static_block_names);
}

ReactBlock* ord_react_blocks(CompiledPrg prg) {
  // Reactive blocks sorted in topological order
  react_blocks_dep_map = [b.name -> [t : _ t <- b.nested_auto_vars] : b <- prg.react_blocks];
  ord_react_blocks_names = join((isort(bs) : bs <- topological_sort(react_blocks_dep_map)));
  react_blocks_by_name = [b.name -> b : b <- prg.react_blocks];
  return (react_blocks_by_name(b, !) : b <- ord_react_blocks_names);
}

////////////////////////////////////////////////////////////////////////////////

Text runtime_content(Bool has_static_autos) = (
  ( "using System;",
    "using System.IO;",
    "using System.Text;",
    "using System.Collections.Generic;",
    "using System.Runtime.CompilerServices;",
    "",
    ""
  ),
  core_runtime,
  table_runtime if has_static_autos
);


Text symbol_decls(SymbObj+ program_symbols) {
  let context = :core
    code = ("const uint16 " & symb_id_name(s) & " = " & printed(i) & ";" : s @ i <- program_symbols);
  return ("", "") & code;
}


Text symbol_table(SymbObj+ program_symbols) {
  code = (
    "",
    "",
    "const char *map_symb_to_str[" & _print_(|program_symbols|) & "] = {",
    ("\"" & _print_(bare_obj(s)) & "\"," : s <- program_symbols),
    "};"
  );
  return code;
}


Text int_seqs_decls(Int+* int_seqs) =
  if int_seqs != ()
    then ("") & (("") & gen_int_seq_code(s, i) : s @ i <- int_seqs)
    else ();


Text env_decl([ObjProcDef] procs) {
  all_impl_args = union([p.impl_args : p <- procs]);
  semi_consts_cache_vars = isort([p.name : p <- procs, p.cached and p.impl_args != []]);

  let context = :core
    env_decl = (
      "",
      "",
      "struct ENV_ {",
      ("OBJ " & native_var_decl_name(impl_arg(bare_id(a))) & ";" : a <- isort(all_impl_args)),
      ("" if all_impl_args != [] and semi_consts_cache_vars != ()),
      ("OBJ " & memo_var_name(v) & ";" : v <- semi_consts_cache_vars),
      "};",
      "",
      "typedef struct ENV_ ENV;"
    );

  return env_decl;
}


Text abstract_closure_class_decl([ObjProcDef] procs) {
  arities = [p.arity : pd <- procs, p <- pd.cls_args];
  return () if arities == [];

  return (
    "",
    "",
    "struct CLS {",
    ( "union {",
      ( "OBJ (*fn_ptr_" & printed(a) & ")(" & append(a * ("OBJ"), ", ") & ", const OBJ *, const CLS *, const void *, ENV &env);"
        : a @ i <- isort(arities)
      ),
      "};",
      "const OBJ  *capt_vars;",
      "const CLS  *capt_cls;",
      "const void *capt_auto;"
    ),
    "};"
  );
}

////////////////////////////////////////////////////////////////////////////////

String* symbols_arrays_decls([(Symbol+, Nat)] symbs_seqs) {
  return () if symbs_seqs == [];
  ord_symbs_seqs = sort_set(symbs_seqs, right($a) < right($b));
  return ("", "") & (symbols_array_decl(ss, i) : ss, i <- ord_symbs_seqs);

  String symbols_array_decl(Symbol+ symbs, Nat index) {
    name = const_symb_seq_name(index);
    let context = :core
      symbs_strs = (symb_id_name(s) : s <- symbs);
    return "uint16 " & name & "[" & _print_(|symbs|) & "] = {" & append(symbs_strs, ", ") & "};";
  }
}


String native_int_type(Int min_val, Int max_val) {
  for lb, up, type_name <- type_bounds
    return type_name if min_val >= lb and max_val < up;
  return "int64";


  (Int, Int, String)+ type_bounds = (
    (0,             pow(2, 8),    "uint8"),
    (-pow(2, 7),    pow(2, 7),    "int8"),
    (-pow(2, 15),   pow(2, 15),   "int16"),
    (-pow(2, 31),   pow(2, 31),   "int32")

    // (0,             pow(2, 16),   "uint16"),
    // (0,             pow(2, 32),   "uint32")
  );
}


String* gen_int_seq_code(Int+ int_seq, Nat seq_id) {
  len = |int_seq|;
  min_elem = min(int_seq);
  max_elem = max(int_seq);

  is_inline = (min_elem >= 0 and max_elem < 256 and len <= 8) or
              (min_elem >= -32768 and max_elem < 32768 and len <= 4) or
              (min_elem >= -2147483648 and max_elem < 2147483648 and len <= 2);
  return () if is_inline;

  type_name = native_int_type(min_elem, max_elem);

  sgn = type_name & " " & const_int_seq_name(seq_id) & "[" & _print_(|int_seq|) & "] = {";

  strs = (printed(n) : n <- int_seq);
  total_len = sum((length(s) : s <- strs)) + 2 * |strs|;

  if total_len < 60 {
    code = (sgn & append(strs, ", ") & "};");
  }
  else {
    max_len = nat(max((length(printed(n)) : n <- (min_elem, max_elem))));
    last_idx = |int_seq| - 1;
    strs = (align_text(s, max_len, ascii_space) & if i != last_idx then ", " else "" : s @ i <- strs);
    cont_lines = ("  " & append(ss) : ss <- split_into_groups(strs, nz_nat(100 / (max_len + 2))));
    code = (sgn) & cont_lines & ("};");
  }

  return code;


  T+* split_into_groups(T+ items, NzNat max_group_size) {
    len = |items|;
    num_of_comp_groups = len / max_group_size;
    comp_groups_total_size = num_of_comp_groups * max_group_size;
    last_group_size = len - comp_groups_total_size;
    groups = (nonempty(subseq(items, i * max_group_size, max_group_size)) : i < num_of_comp_groups);
    groups = (groups | nonempty(subseq(items, comp_groups_total_size, last_group_size))) if last_group_size > 0;
    return groups;
  }


  String align_text(String str, Nat len, Nat filler) {
    str_len = length(str);
    filling = if len >= str_len then string(nat(len-str_len) * (filler)) else "";
    return filling & str;
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit prg_data : PrgData, context : <core>, debug_mode : Bool {
  String* native_code(LambdaExpr lambda, Nat id, Bool decl_only) {
    body = remove_dead_code(lambda.cls.body); ## BAD BAD BAD: THIS OUGHT TO BE DONE IN DEAD CODE REMOVAL, NOT HERE
    vars_decls = gen_vars_decls(body, []);
    full_body = vars_decls;

    if lambda.capt_auto != nothing {
      capt_auto = value(lambda.capt_auto);
      rel_auto_type_str = native_name(capt_auto);
      rel_auto_cast = rel_auto_type_str & " *target = (" & rel_auto_type_str & " *) capt_auto;";
      full_body = (full_body | "") if full_body != ();
      full_body = (full_body | rel_auto_cast);
    }

    comp_body = native_code(body, nothing, break_target = nothing);
    full_body = (full_body | "") if full_body != ();
    full_body = full_body & comp_body;

    std_args  = ("OBJ " & native_var_decl_name(fn_arg(n)) : n < lambda.cls.arity);
    extra_args = ("const OBJ *capt_vars", "const CLS *capt_cls", "const void *capt_auto", "ENV &env"); ## BAD
    signature = "OBJ lambda_" & printed(id) & "(" & append(std_args & extra_args, ", ") & ")";

    return (signature & ";") if decl_only;

    return ({signature & " {"}) & indent_lines(full_body) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////

String* runtime_callbacks(Nat symbs_count) = (
  "",
  "",
  "const char *symb_repr(uint16 idx) {",
  "  return map_symb_to_str[idx];",
  "}",
  "",
  "uint32 embedded_symbs_count() {",
  "  return " & printed(symbs_count) & ";",
  "}"
);


String* main_fn(Bool debug_mode) = (
  "",
  "",
  "int main(int argc, char **argv) {",
  "  init_runtime();",
  "",
  "  OBJ args = make_empty_seq();",
  "  if (argc > 1) {",
  "    OBJ *arg_buff = new_obj_array(argc - 1);",
  "    for (int i=0 ; i < argc-1 ; i++)",
  "      arg_buff[i] = str_to_obj(argv[i+1]);",
  "    args = build_seq(arg_buff, argc-1);",
  "  }",
  "",
  "  ENV env;",
  "  memset(&env, 0, sizeof(ENV));",
  "",
  "  OBJ res = Main_P(args, env);",
  "",
  "  return is_int(res) ? get_int(res) : 0;",
  "}"
);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit context : NativeContext {
  String* gen_vars_decls(Instr* code, [AnyVar] exclusions) = gen_all_vars_decls((code), exclusions);

  String* gen_all_vars_decls(Instr** code_blocks, [AnyVar] exclusions) {
    vars_to_decl = [v : b <- code_blocks, v <- vars_to_declare(b), not exclusions(v), not v :: AuxVar];

    vector_vars = [v : v <- vars_to_decl, v :: VecVar];
    array_vars = [v : v <- vars_to_decl, v :: ArrayVar];
    scalar_vars = vars_to_decl - vector_vars - array_vars;

    scalar_vars_by_type = group_by(scalar_vars, native_var_type);
    scalar_vars_decls = (
      t & " " & append((native_var_decl_name(v) : v <- isort(vs)), ", ") & ";"
      : t, vs <- isort(scalar_vars_by_type)
    );

    array_vars_by_type = group_by(array_vars, native_type($.repr));
    array_vars_decls = (
      t & " " & append(("*" & native_var_decl_name(v) : v <- isort(vs)), ", ") & ";"
      : t, vs <- isort(array_vars_by_type)
    );

    vec_vars_by_id = group_by(vector_vars, $.id);
    new_vec_vars = [vvar(id, nz_nat(max([v.size : v <- vs]))) : id vs <- vec_vars_by_id];
    vec_vars_decls = (var_decl(v) : v <- isort(new_vec_vars));

    opt_tag_rec_vars = isort([v : v <- scalar_vars, v :: OptTagRecVar]);
    ptr_vars_decls = (native_ptr_type(v) & " *" & native_ptr_var_name(v) & ";" : v <- opt_tag_rec_vars);

    assert {
      vec_var_ids  = [v.id : v <- vector_vars];
      ref_new_vec_vars = [vvar(id, nz_nat(max(nonempty([v.size : v <- vector_vars, v.id == id])))) : id <- vec_var_ids];
      return new_vec_vars == ref_new_vec_vars;
    };

    return scalar_vars_decls & ptr_vars_decls & array_vars_decls & vec_vars_decls;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit prg_data : PrgData, context : <core>, debug_mode : Bool {
  String* native_code(ProcDef pd, Bool decl_only) {
    cached = pd.cached? and pd.cached;

    fn_name = native_fn_name(pd.name);

    suffix = if cached and not decl_only then "c" else "";

    args_list = gen_args_list(pd);
    args_list_str = append(args_list, ", ");

    signature = ret_type_str(pd) & " " & fn_name & suffix & "(" & args_list_str & ")";

    return (signature & ";") if decl_only;

    body = pd.body;

    auto_vars_types = if pd.loc_auto_vars? then pd.loc_auto_vars else [];
    db_vars_types = if pd.loc_db_vars? then pd.loc_db_vars else [];

    var_decls = gen_vars_decls(body, if pd.args? then set(pd.args) else []);

    auto_vars = isort(keys(auto_vars_types));
    auto_var_decls = (native_name(auto_vars_types[v]) & " " & native_var_decl_name(v) & ";" : v <- auto_vars);

    db_vars_decls = ();
    aux_db_vars_decls = ();
    for v, t <- isort(db_vars_types) {
      type_name = native_name(t);
      var_name = native_var_decl_name(v);
      db_vars_decls = (db_vars_decls | type_name & " " & var_name & "_;", type_name & " *" & var_name & " = &" & var_name & "_;");

      aux_type_name = native_auxiliary_name(t);
      aux_var_name = aux_var_decl_name(v);
      aux_db_vars_decls = (aux_db_vars_decls | aux_type_name & " " & aux_var_name & "_;", aux_type_name & " *" & aux_var_name & " = &" & aux_var_name & "_;");
    }

    if pd.type? and body == (terminate(false)) {
      ret_type_name = ret_type_str(pd);
      terminate_instr = only_unsafe(native_code(terminate(false), nothing, break_target = nothing));
      comp_body = (
        ret_type_name & " result;",
        "memset(&result, 0, sizeof(" & ret_type_name & "));",
        terminate_instr & " // " & fn_name & "/" & _print_(arity(pd)),
        "return result;"
      );
    }
    else if pd.type? and |body| == 2 and body(1) == terminate(false) and match (body(0)) push_call_info() = true, _ = false {
      ret_type_name = ret_type_str(pd);
      push_call_info_instr = only_unsafe(native_code(body(0), nothing, break_target = nothing));
      terminate_instr = only_unsafe(native_code(terminate(false), nothing, break_target = nothing));
      pop_call_info_instr = only_unsafe(native_code(pop_call_info, nothing, break_target = nothing));
      comp_body = (
        ret_type_name & " result;",
        "memset(&result, 0, sizeof(" & ret_type_name & "));",
        push_call_info_instr,
        terminate_instr & " // " & fn_name & "/" & _print_(arity(pd)),
        pop_call_info_instr,
        "return result;"
      );
    }
    else {
      is_mem_boundary = is_mem_boundary(pd);

      last_instr = last(body);
      maybe_split_body = match (last_instr)
        ret_val(e?) = just((take(body, |body|-1), e)),
        _           = nothing;

      if is_mem_boundary and maybe_split_body != nothing {
        no_ret_body, ret_value_expr = value(maybe_split_body);
        comp_no_ret_body = native_code(no_ret_body, nothing, break_target = nothing);

        req_copying = requires_copying(ret_value_expr);
        ret_value = if req_copying then "copied_value" else native_expr(ret_value_expr);

        comp_body = (
          "switch_mem_stacks();",
          ""
        ) & comp_no_ret_body & (
          "" if no_ret_body != (),
          "unswitch_mem_stacks();",
          "OBJ copied_value = copy_obj(" & native_expr(ret_value_expr) & ");" if req_copying,
          "clear_unused_mem();",
          "return " & ret_value & ";"
        );
      }
      else
        comp_body = native_code(body, nothing, break_target = nothing);
    }

    has_var_decls = var_decls != () or auto_var_decls != () or db_vars_decls != ();
    code = (visibility(pd) & signature & " {",) & indent_lines(var_decls) & indent_lines(auto_var_decls) &
           indent_lines(db_vars_decls) & indent_lines(aux_db_vars_decls) &
           ("" if has_var_decls) & indent_lines(comp_body) & ("}");

    if pd.cached? and pd.cached {
      if pd.impl_args == [] {
        fail if not pd.cached?;

        ret_type_name = ret_type_str(pd);
        copying_code = copying_code(pd.ret_val_repr, "value");

        wrapper_code = (
          "",
          "",
          visibility(pd) & ret_type_name & " " & fn_name & "(" & args_list_str & ") {",
          "  static " & ret_type_name & " value;",
          "  static bool initialized = false;",
          "  if (!initialized) {",
          "    value = " & fn_name & suffix & "(env);"
        ) & indent_lines(copying_code, 2) & (
          "    initialized = true;",
          "  }",
          "  return value;",
          "}"
        );
      }
      else {
        cache_var_name = "env." & memo_var_name(pd.name);
        ret_type_name = ret_type_str(pd);

        wrapper_code = (
          "",
          "",
          visibility(pd) & ret_type_name & " " & fn_name & "(" & args_list_str & ") {",
          "  if (is_blank(" & cache_var_name & "))",
          "    " & cache_var_name & " = " & copied_to_env(pd.ret_val_repr, fn_name & suffix & "(env)") & ";",
          "  return " & copied_from_env(pd.ret_val_repr, cache_var_name) & ";",
          "}"
        );
      }

      code = code & wrapper_code;
    }

    return code;


    Bool is_mem_boundary(ObjProcDef pd) = pd.name :: ProcSymbol and pd.name != proc_symbol(:main);
      // (pd.name :: FnId and not requires_copying(pd.ret_val_repr) and pd.impl_args == []) or
      // (pd.name :: ProcSymbol and pd.name != proc_symbol(:main));

    Bool is_mem_boundary(BoolProcDef pd) = false;


    True  requires_copying(<StdObjVar, ObjNatOp, OptTagRecExpr>)                                    = true;
    False requires_copying(<InlineObj, BoolExpr, IntExpr, Int32Expr, FloatExpr, LowLevelTupleExpr>) = false;

    True  requires_copying(<object, array(type: LowLevelEltRepr), OptTagRecRepr>) = true;
    False requires_copying(<bool, int, symbol, float, tuple(TupleArgRepr+)>)      = false;


    String copied_to_env(<array(type: LowLevelEltRepr)>, String) = undefined;
    String copied_to_env(<symbol, object, OptTagRecRepr> repr, String value_str) = value_str;
    String copied_to_env(<bool>, String value_str)  = native_call_expr("make_bool",  (value_str));
    String copied_to_env(<int>, String value_str)   = native_call_expr("make_int",   (value_str));
    String copied_to_env(<float>, String value_str) = native_call_expr("make_float", (value_str));
    String copied_to_env(<tuple(TupleArgRepr+)> repr, String value_str) = native_call_expr(tuple_to_obj_proc_name(_untag_(repr)), (value_str));


    String copied_from_env(<array(type: LowLevelEltRepr)>, String) = undefined;
    String copied_from_env(<symbol, object, OptTagRecRepr> repr, String value_str) = value_str;
    String copied_from_env(<bool>, String value_str)  = native_call_expr("get_bool",  (value_str));
    String copied_from_env(<int>, String value_str)   = native_call_expr("get_int",   (value_str));
    String copied_from_env(<float>, String value_str) = native_call_expr("get_float", (value_str));
    String copied_from_env(<tuple(TupleArgRepr+)> repr, String value_str) = native_call_expr(obj_to_tuple_proc_name(_untag_(repr)), (value_str));


    String* copying_code(<array(type: LowLevelEltRepr)>, String) = undefined;

    String* copying_code(<bool, int, symbol, float>, String) = ();

    String* copying_code(<object, OptTagRecRepr> repr, String var_name) = (
      "switch_to_static_allocator();",
      var_name & " = copy_obj(" & var_name & ");",
      "switch_to_twin_stacks_allocator();"
    );

    String* copying_code(<tuple(TupleArgRepr+)> repr, String var_name) {
      reprs = _untag_(repr);
      code = ();
      switch_allocator = false;
      for r @ i <- reprs {
        code, switch_allocator = match (r)
          int                 |
          float               = (code, switch_allocator),
          object              |
          opt_tag_rec_repr()  = ( (code | var_name & ".arg_" & _print_(i) & " = copy_obj(" & var_name & ".arg_" & _print_(i) & ");"),
                                  true
                                );
      }
      code = ("switch_to_static_allocator();") & code & ("switch_to_twin_stacks_allocator();") if switch_allocator;
      return code;
    }


    Nat arity(ProcDef pd) =
      obj_proc_def()    = in_arity(pd),
      bool_proc_def()   = pd.arity;

    String ret_type_str(ProcDef proc_def) =
      obj_proc_def()    = native_type(proc_def.ret_val_repr),
      bool_proc_def()   = "bool";

    String visibility(ProcDef pd) = "";
      // bool_proc_def()   = "public ",
      // obj_proc_def()    = if pd.name :: ConvFnId then "public " else "";

    String* gen_args_list(ObjProcDef pd) {
      args = (native_var_type(v) & " " & native_var_decl_name(v) : v <- pd.args);
      cls_args = ("const CLS &" & native_var_decl_name(a.var) : a <- pd.cls_args);
      rel_auto_args = join((
        ( native_name(a.type) & " *" & native_var_decl_name(a.var),
          native_auxiliary_name(a.type) & " *" & aux_var_decl_name(a.var)
        ) : a <- pd.rel_auto_args
      ));
      react_auto_args = (native_name(a.type) & " *" & native_var_decl_name(a.var) : a <- pd.react_auto_args);
      args_list = args & cls_args & rel_auto_args & react_auto_args;
      args_list = (args_list | "ENV &env") if not pd.name :: ConvFnId;
      return args_list;
    }

    String* gen_args_list(BoolProcDef pd) = ("OBJ " & native_var_decl_name(fn_arg(n)) : n < arity(pd));
  }
}

////////////////////////////////////////////////////////////////////////////////

type NonStringEncodable = blank_obj, ObjExpr, ElemVar, PendingInputVar, VecVar, ArrayVar, BoolExpr,
                          IntExpr, Int32Expr, FloatExpr, LowLevelTupleExpr, ItVar, StreamVar, AnyClsVar, AnyTableVar,
                          AnyValueStoreId, AnyAutoVar, AnyDBVar;

type Encodable = mem_pool, NonStringEncodable, String;


implicit context : NativeContext {
  String native_code(<mem_pool>) = native_var_ref_name(:mem_pool);
  String native_code(NonStringEncodable enc) = native_expr(enc);
  String native_code(String str) = str;


  String native_call_expr(String method_name, Encodable* args) =
    method_name & "(" & append((native_code(a) : a <- args), ", ") & ")";

  String native_call(String static_name, Encodable* args) =
    static_name & "(" & append((native_code(a) : a <- args), ", ") & ");";

  String native_call(Encodable res, String static_name, Encodable* args) =
    native_code(res) & " = " & native_call(static_name, args);

  String native_assignment_code(Encodable var, Encodable value) =
    native_code(var) & " = " & native_code(value) & ";";
}
