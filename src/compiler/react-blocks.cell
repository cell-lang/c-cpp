implicit prg_data : PrgData, context : <core>, debug_mode : Bool {
  String* native_react_block_decl(ReactBlock block) {
    has_time_rules = block.time_rules_count != 0;

    class_name = native_name(block.name);

    memb_vars_decl = (memb_var_decl(v) : v <- isort(block.memb_vars));
    auto_vars_decl = (native_name(t) & " " & native_var_decl_name(v) & ";" : v, t <- isort(block.nested_auto_vars));
    vars_decls = memb_vars_decl & auto_vars_decl;

    if block.time_rules_count != 0 {
      size_str = printed(block.time_rules_count);
      vars_decls = vars_decls & (
        "int64 trigger_times_heap[" & size_str & "];",
        "int32 time_varying_cond_ids_heap[" & size_str & "];"
      );
    }

    ## THERE MIGHT BE A BUG HERE
    all_loc_vars = vars_to_declare(block.apply_code) & union([vars_to_declare(c) : id c <- block.nodes_update_code]);
    aux_vars = [v : v <- all_loc_vars, v :: AuxVar] & [curr_time if has_time_rules];
    aux_vars_decls = (var_decl(v) : v <- isort(aux_vars));

    const_data = (gen_const_data(block.name, c) : c <- isort(block.const_data));

    return join((
      ( "struct " & class_name & " {",
        "  STATE_MEM_POOL mem_pool;"
      ),
      indent_lines(vars_decls),
      indent_lines(aux_vars_decls),
      ("};"),
      ("", "") if const_data != (),
      const_data
    ));
  }


  String* native_react_block_impl(ReactBlock block) {
    has_time_rules = block.time_rules_count != 0;

    queue_input_updates = |block.ord_inputs| > 2; ## BAD BAD BAD: THE NUMBER 2 IS REPEATED IN THE CODE GENERATION PHASE
    input_setters_code = (gen_input_setter(block.name, id, i, queue_input_updates) : id @ i <- block.ord_inputs);

    ord_queue_updates = isort(block.queue_update_code);
    queue_update_methods_code = (gen_queue_update_method(block.name, id, method.body, method.args) : id, method <- ord_queue_updates);

    state_is_def_code = native_state_is_def_code(block.name, block.state_is_def_code);
    copy_state_code = native_copy_state_code(block.name, block.copy_state_code);
    set_state_code = native_set_state_code(block.name, block.set_state_code);

    insert_timer_method_code = gen_insert_timer_method(block.name);
    clear_timer_method_code = gen_clear_timer_method(block.name);

    ord_methods = sort(isort(keys(block.methods)), method_id_ord($a, $b));
    user_def_methods_code = (native_user_def_method_code(block.name, id, block.methods(id).args_vars, block.methods(id).code) : id <- ord_methods);

    return join((
      pre_init_method(block),
      native_cleanup_method_code(block),
      insert_timer_method_code if has_time_rules,
      clear_timer_method_code if has_time_rules,
      join((("") & m : m <- input_setters_code)),
      join(queue_update_methods_code),
      nodes_updates_methods(block),
      apply_method(block),
      state_is_def_code,
      copy_state_code,
      set_state_code,
      join(user_def_methods_code)
    ));


    Bool method_id_ord(MethodId id1, MethodId id2) {
      if id1.symbol != id2.symbol {
        a1 = bare_id(id1.symbol);
        a2 = bare_id(id2.symbol);
        return isort([a1, a2]) == (a1, a2);
      }

      if id1.arity != id2.arity
        return id1.arity < id2.arity;

      if not id1.id?
        return false;

      if not id2.id?
        return true;

      return id1.id < id2.id;
    }
  }


  String* pre_init_method(ReactBlock block) {
    type_name = native_name(block.name);
    method_name = pre_init_method_name(block.name);
    vars_decl = gen_vars_decls(block.pre_init_code, []);
    vars_decl = vars_decl & ("") if vars_decl != ();
    body = vars_decl & native_code(block.pre_init_code, nothing, break_target = nothing);
    return (
      "void " & method_name & "(" & type_name & "*target, ENV &env) {",
      "  init_mem_pool(&target->mem_pool);"
    ) & indent_lines(body) & (
      "}",
      ""
    );
  }

  String* native_cleanup_method_code(ReactBlock block) {
    type_name = native_name(block.name);
    method_name = cleanup_method_name(block.name);
    return (
      "void " & method_name & "(" & type_name & " *" & auto_or_db_arg_name & ") {",
      "  " &native_call("release_mem_pool", (:mem_pool)),
      "}"
    );
  }

  String* apply_method(ReactBlock block) {
    type_name = native_name(block.name);
    method_name = apply_method_name(block.name);
    body = gen_vars_decls(block.apply_code, []);
    body = (body | "") if body != ();
    body = body & native_code(block.apply_code, nothing, break_target = nothing);
    signature = "void " & method_name & "(" & type_name & " *" & auto_or_db_arg_name & ", ENV &env) {";
    return ("", signature) & indent_lines(body) & ("}");
  }


  String* nodes_updates_methods(ReactBlock block) {
    type_name = native_name(block.name);
    has_time_rules = block.time_rules_count != 0;
    time_arg = if has_time_rules then "long " & native_var_decl_name(curr_time) & ", " else "";
    methods_code = [{
        sgn = "void " & node_update_method_name(block.name, id) & "(" & type_name & " *" & auto_or_db_arg_name & ", " & time_arg & "ENV &env) {";
        loc_vars_decls = gen_vars_decls(body, []);
        loc_vars_decls = (loc_vars_decls | "") if loc_vars_decls != ();
        return ("", sgn) & indent_lines(loc_vars_decls & native_code(body, nothing, break_target = nothing)) & ("}");
      } : id body <- block.nodes_update_code
    ];
    return join(isort(methods_code));
  }


  String* gen_queue_update_method(AutoSymbol block_name, BlockNodeId node_id, Instr* body, IntVar* args) {
    method_name = queue_node_update_method_name(block_name, node_id);
    args_decls = (target_arg_decl(block_name)) & (native_var_type(v) & " " & native_var_decl_name(v) : v <- args);
    sgn = "void " & method_name & "(" & append(args_decls, ", ") & ") {";
    vars_decl_text = gen_vars_decls(body, []);
    vars_decl_text = (vars_decl_text | "") if vars_decl_text != ();
    body_text = vars_decl_text & native_code(body, nothing, break_target = nothing);
    return ("", sgn) & indent_lines(body_text) & ("}");
  }


  String* native_state_is_def_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code, []);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing, break_target = nothing);
    sng = "bool " & state_is_def_proc_name(name) & "(" & target_arg_decl(name) & ")";
    return ("", sng & " {") & indent_lines(body) & ("}");
  }


  String* native_copy_state_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code, []);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing, break_target = nothing);
    sgn = "OBJ " & copy_state_proc_name(name) & "(" & target_arg_decl(name) & ")";
    return ("", sgn & " {") & indent_lines(body) & ("}");
  }


  String* native_set_state_code(AutoSymbol name, Instr* code) {
    vars_decls = gen_vars_decls(code, []);
    body = vars_decls & ("" if vars_decls != ()) & native_code(code, nothing, break_target = nothing);
    sgn = "void " & set_state_proc_name(name) & "(" & target_arg_decl(name) & ", OBJ a0)";
    return ("", sgn & " {") & indent_lines(body) & ("}");
  }


  String gen_const_data(AutoSymbol block_name, ConstBlockData const) {
    values = (printed(l) & "ULL" : l <- const.lengths);
    return "uint64 " & time_slots_table_name(block_name, const.expr_id) & "[" & _print_(|values|) & "] = {" & append(values, ", ") & "}; // CONSTANT";
  }


  String* native_user_def_method_code(AutoSymbol block_name, MethodId name, Maybe[StdVar]* args, Instr* body) {
    final_args = (if a != nothing then value(a) else fn_arg(i) : a @ i <- args);
    args_decls = (target_arg_decl(block_name)) & ("OBJ " & native_var_decl_name(a) : a <- final_args) & ("ENV &env");
    signature_line = "OBJ " & user_def_method_name(block_name, name) & "(" & append(args_decls, ", ") & ") {";
    vars_decls = gen_vars_decls(body, [value(a) : a <- args, a != nothing]);
    body_text = vars_decls & ("" if vars_decls != ()) & native_code(body, nothing, break_target = nothing);
    return ("", signature_line) & indent_lines(body_text) & ("}");
  }


  String* gen_input_setter(AutoSymbol block_name, Atom input_name, Nat node_idx, Bool queue_node) {
    auto_type_name = native_name(block_name);
    method_name = input_set_method_name(block_name, input_name);
    pending_input_var_str = native_var_ref_name(pending_input_var(input_name));
    up_to_date_var = native_var_ref_name(up_to_date_var(std_block_node_id(input_name)));
    idx_var = ivar32(0);
    idx_var_str = native_var_ref_name(idx_var);
    input_layer_update_count_var_str = native_var_ref_name(update_count_var(0));
    input_layer_nodes_to_update_var_str = native_var_ref_name(nodes_to_update_var(0, idx_var));

    return (
      "void " & method_name & "(" & auto_type_name & " *" & auto_or_db_arg_name & ", OBJ value) {",
      "  if (!" & up_to_date_var & ") {",
      "    " & pending_input_var_str & " = value;",
      "  }",
      "  else {",
      "    " & pending_input_var_str & " = value;",
      "    " & native_var_type(idx_var) & " " & idx_var_str & " = " & input_layer_update_count_var_str & ";" if queue_node,
      "    " & input_layer_nodes_to_update_var_str & " = " & printed(node_idx) & ";" if queue_node,
      "    " & input_layer_update_count_var_str & " = " & idx_var_str & " + 1;" if queue_node,
      "    " & up_to_date_var & " = false;",
      "  }",
      "}"
    );
  }


  String* gen_insert_timer_method(AutoSymbol block_name) = (
    "",
    "void " & insert_timer_method_name(block_name) & "(" & target_arg_decl(block_name) & ", uint32 cond_idx, int64 time) {",
    "  uint32 count = " & auto_or_db_arg_name & "->time_triggers_count;",
    "  int64 *times_heap = " & auto_or_db_arg_name & "->trigger_times_heap;",
    "  int32 *cond_ids_heap = " & auto_or_db_arg_name & "->time_varying_cond_ids_heap;",

    "  uint32 i = 0;",
    "  while (i < count && times_heap[i] < time)",
    "    i++;",

    "  for (uint32 j=count ; j > i ; j--) {",
    "    times_heap[j] = times_heap[j - 1];",
    "    cond_ids_heap[j] = cond_ids_heap[j - 1];",
    "  }",

    "  times_heap[i] = time;",
    "  cond_ids_heap[i] = cond_idx;",

    "  " & auto_or_db_arg_name & "->time_triggers_count = count + 1;",
    "}"
  );


  String* gen_clear_timer_method(AutoSymbol block_name) = (
    "",
    "void " & clear_timer_method_name(block_name) & "(" & target_arg_decl(block_name) & ", uint32 cond_idx) {",
    "  uint32 count = " & auto_or_db_arg_name & "->time_triggers_count;",
    "  int64 *times_heap = " & auto_or_db_arg_name & "->trigger_times_heap;",
    "  int32 *cond_ids_heap = " & auto_or_db_arg_name & "->time_varying_cond_ids_heap;",

    "  int i = 0;",
    "  while (i < count && cond_ids_heap[i] != cond_idx)",
    "    i++;",

    "  if (i < count)",
    "    " & auto_or_db_arg_name & "->time_triggers_count = count - 1;",

    "  for ( ; i + 1 < count ; i++) {",
    "    times_heap[i] = times_heap[i + 1];",
    "    cond_ids_heap[i] = cond_ids_heap[i + 1];",
    "  }",
    "}"
  );


  String memb_var_decl(MembIntVectVar var) {
    native_type = native_var_type(var);
    name = native_var_decl_name(var);
    return native_type & " " & name & "[" & printed(var.size) & "];";
  }


  String memb_var_decl(<SignalVar, MembObjVar, PendingInputVar, MembIntVar, MembBoolVar> var) =
    native_var_type(var) & " " & native_var_decl_name(var) & ";";
}
