implicit block : StaticBlock, table_var_aux_vars_map  : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Instr* keys_checking_code([TableVar] opt_table_vars, [TableVar] non_opt_table_vars) {
    tables = block.tables;

    key_check_exprs = [];
    key_check_exprs_guards = [];        // key check expr (BoolExpr) -> guard (BoolExpr)
    exprs_extra_info_vars = [];         // key check expr (BoolExpr) -> extra info var (Int32Var)
    extra_info_vars_values = [];        // extra info var (Int32Var) -> extra info expr (Int32Expr)
    extra_info_expr_aux_vars_code = []; // extra info expr (Int32Expr) -> extra info aux vars code (Instr*)

    for v <- opt_table_vars {
      if not insertion_is_forced(v, effects_info) {
        aux_vars, maybe_status_var = table_var_aux_vars_map(v);
        table = tables(v);
        keys = keys(table);
        for key <- keys {
          expr, maybe_extra_info = key_check_expr_info(v, table, key, aux_vars);
          key_check_exprs = _insert_(key_check_exprs, expr);
          if maybe_extra_info != nothing {
            extra_info_expr, extra_info_var, extra_info_code = value(maybe_extra_info);
            exprs_extra_info_vars = _put_(exprs_extra_info_vars, expr, extra_info_var);
            extra_info_vars_values = _put_(extra_info_vars_values, extra_info_var, extra_info_expr);
            extra_info_expr_aux_vars_code = _put_(extra_info_expr_aux_vars_code, extra_info_expr, extra_info_code);
          }
          if maybe_status_var != nothing {
            status_var = value(maybe_status_var);
            curr_expr = lookup(key_check_exprs_guards, expr, false);
            key_check_exprs_guards = _put_(key_check_exprs_guards, expr, or_else(curr_expr, status_var));
          }
          else
            key_check_exprs_guards = _put_(key_check_exprs_guards, expr, true);
        }
      }
    }

    ord_key_check_exprs = isort(key_check_exprs);

    code = ();

    if ord_key_check_exprs != () {
      code = (code | :empty_line, comment("Checking keys (optimized)"));

      // Gathering all extra pieces of information to retrieve
      extra_info_exprs = isort([e : _ e <- extra_info_vars_values]);
      for expr <- extra_info_exprs {
        // For each extra piece of information, retrieving all the variables it must be stored in
        vars = isort([v : v <- extra_info_vars_values(?, expr)]);
        // Going from each variables that must store the current piece of information
        // to the expressions that make use of those variables to their guard expressions
        // extra info expr -> (1..*) extra info var -> (1 for now) key check expr -> guard
        guards = [g : v <- vars, e <- exprs_extra_info_vars(?, v), g = key_check_exprs_guards(e)];
        // If any of those guards evaluates to true, then the extra info must be computed
        guard = or_else(isort(nonempty(guards)));
        // Putting it all together
        first_var = vars(0);
        instrs = (set_ivar32(first_var, expr)) & extra_info_expr_aux_vars_code(expr) & (set_ivar32(v, first_var) : v @ i <- drop(vars, 1));
        code = code & opt_do_if(guard, instrs);
      }

      // Now that all the information we need has been computed, we actually check the expressions
      for e <- ord_key_check_exprs {
        guard = key_check_exprs_guards(e);
        guarded_expr = and_then(guard, e);
        code = code & opt_do_if(guarded_expr, (ret_val(false)));
      }
    }

    // Checking keys for tables whose operations were not optimized
    if non_opt_table_vars != [] {
      code = (code | :empty_line, comment("Checking keys (non-optimized)"));
      for v <- isort(non_opt_table_vars)
        code = (code | check_keys(v, block.tables(v)));
    }

    return code;
  }

  //////////////////////////////////////////////////////////////////////////////

  (BoolExpr, Maybe[(Int32Expr, Int32Var, Instr*)]) key_check_expr_info(TableVar tbl_var, <Table, MasterBinTable, Column, MandatoryColumn> table, [+Nat] key, OptAuxTableVar+ aux_vars) {
    // Default expression
    expr = table_contains(tbl_var, table, (if key(i) then just(cast_int32_var(aux_vars(i))) else nothing : i < arity(table)));

    // Optimization for single-column keys where the column can be replaced with an equivalent column of a unary relation
    ## TODO: AN EQUIVALENT OPTIMIZATION COULD BE DONE FOR MULTI-COLUMN KEYS
    if |key| == 1 {
      col_idx = only(key);
      maybe_equiv_table_var = an_equivalent_unary_table_if_any_exists(tbl_var, col_idx);
      if maybe_equiv_table_var != nothing {
        equiv_table_var = value(maybe_equiv_table_var);
        tmp_key_var = cast_int32_var(aux_vars(col_idx));
        expr = table_contains(equiv_table_var, block.tables(equiv_table_var), (just(tmp_key_var)));
      }
    }

    return (expr, nothing);
  }


  (BoolExpr, Maybe[(Int32Expr, Int32Var, Instr*)]) key_check_expr_info(TableVar tbl_var, <SlaveTernTable, SlaveColumn> table, [+Nat] key, OptAuxTableVar+ aux_vars) {
    assert |aux_vars| == 2 or |aux_vars| == 3;

    if key == [0, 1] {
      if |aux_vars| == 3 {
        master = table.master;
        master_type = cast_master_bin_table(block.tables(master));
        ## TODO: THIS TOO COULD BE OPTIMIZED IN SOME CASES BY JUST CHECKING THE MASTER TABLE
        assoc_surr_var = new_unique_int32_var(:unused);
        expr = and_then(neg(is_null_surr(assoc_surr_var)), table_contains(tbl_var, table, (just(assoc_surr_var), nothing)));
        args = (cast_int32_var(aux_vars(i)) : i <- (0, 1));
        extra_info_expr = get_assoc_surr(table.master, master_type, args);
        extra_info_aux_vars_code = ();
        if table_var_aux_vars_map(master, _) {
          master_aux_vars, master_maybe_status_var = table_var_aux_vars_map(master);
          assert |master_aux_vars| == 3;
          conds = (is_null_surr(assoc_surr_var));
          if master_maybe_status_var != nothing {
            master_status_var = value(master_maybe_status_var);
            conds = (conds | master_status_var);
          }
          conds = conds & (are_eq(args(i), cast_int32_var(master_aux_vars(i))) : i <- (0, 1));
          extra_info_aux_vars_code = (extra_info_aux_vars_code | do_if(and(conds), set_ivar32(assoc_surr_var, cast_int32_var(master_aux_vars(2)))));
        }
        maybe_extra_info = just((extra_info_expr, assoc_surr_var, extra_info_aux_vars_code));
      }
      else {
        expr = table_contains(tbl_var, table, (just(cast_int32_var(aux_vars(0))), nothing));
        maybe_extra_info = nothing;
      }
    }
    else {
      assert key == [2];

      last_col_aux_var = cast_int32_var(last(aux_vars));

      maybe_equiv_table_var = an_equivalent_unary_table_if_any_exists(tbl_var, 2);
      if maybe_equiv_table_var != nothing {
        equiv_table_var = value(maybe_equiv_table_var);
        expr = table_contains(equiv_table_var, block.tables(equiv_table_var), (just(last_col_aux_var)));
      }
      else
        expr = table_contains(tbl_var, table, (nothing, just(last_col_aux_var)));

      maybe_extra_info = nothing;
    }

    return (expr, maybe_extra_info);
  }


  Maybe[TableVar] an_equivalent_unary_table_if_any_exists(TableVar tbl_var, Nat col_idx) {
    tables = block.tables;
    cols_subset_map = block.cols_subset_map;
    relvar = original_rel_var(tbl_var);
    col = phys_col(relvar, col_idx);
    col_equivs = [];
    for c <- cols_subset_map(col, ?) {
      if cols_subset_map(c, col) {
        equiv_table_var = table_var(c.relvar);
        equiv_table = tables(equiv_table_var);
        if arity(equiv_table) == 1
          col_equivs = _insert_(col_equivs, equiv_table_var);
      }
    }
    return if col_equivs != [] then just(any(col_equivs)) else nothing;
  }
}
