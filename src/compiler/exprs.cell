type NativeContext = core, wrapper;

implicit context : NativeContext {
  String qualify(String str) = str;


  String native_expr(InlineObj) =
    object(s?)  = "make_symb(" & symb_id_name(s) & ")",
    empty_seq   = "make_empty_seq()",
    empty_rel   = "make_empty_rel()";


  String native_expr(StdObjVar var) = native_var_ref_name(var);


  String native_expr(ObjNatOp expr) =
    at()                = "get_obj_at(" & native_expr(expr.seq) & ", " & native_expr(expr.idx) & ")",
    array_at()          = "array_at(" & native_var_ref_name(expr.array) & ", " & native_var_ref_name(expr.size) & ", " & native_expr(expr.idx) & ")",
    lookup()            = "lookup(" & native_expr(expr.rel) & ", " & native_expr(expr.key) & ")",
    lookup_field()      = native_lookup_field_expr(expr.record, expr.field, expr.repr),
    get_tag(e?)         = "make_symb(get_tag_id(" & native_expr(e) & "))",
    get_inner_obj(e?)   = "get_inner_obj(" & native_expr(e) & ")",
    get_curr_obj(v?)    = "get_curr_obj(" & native_var_ref_name(v)   & ")",
    bool_obj(e?)        = "make_bool(" & native_expr(e, true) & ")",
    int_obj(e?)         = "make_int(" & native_expr(e) & ")",
    float_obj(e?)       = "make_float(" & native_expr(e) & ")",
    get_curr_arg()      = native_get_curr_arg_expr(expr.var, expr.arg),
    surr_to_value()     = native_call_expr(native_value_store_method_prefix(expr.store_type) & "_surr_to_value", (expr.store, expr.surrogate)),
    column_lookup()     = native_column_lookup_expr(expr.var, expr.key, expr.repr),
    get_value()         = undefined, //native_var_ref_name(expr.var) & ".GetValue()",
    rand_elem(e?)       = "rand_set_elem(" & native_expr(e) & ")";


  String native_column_lookup_expr(AnyTableVar var, Int32Var key, ColumnRepr repr) {
    expr = native_var_ref_name(var) & ".Lookup(" & native_expr(key) & ")";
    return match (repr)
      object  = expr,
      int     = "make_int(" & expr & ")",
      float   = "make_float(" & expr & ")";
  }


  String native_lookup_field_expr(ObjExpr record, SymbObj field, Maybe[LowLevelRepr] repr) {
    if record :: OptTagRecExpr and repr != nothing {
      expr_str = native_ptr_expr(record) & "->" & opt_rec_field_name(untag(field));
      return match (value(repr))
        bool    = "make_bool(" & expr_str & ")",
        int     = "make_int(" & expr_str & ")",
        float   = "make_float(" & expr_str & ")",
        symbol  |
        object  = expr_str;
    }

    return "lookup_field(" & native_expr(record) & ", " & symb_id_name(field) & ")";
  }


  String native_get_curr_arg_expr(BinRelItVar var, <0..2> arg) {
    assert arg != 2;
    arg_name = if arg == 0 then "left" else "right";
    return "get_curr_" & arg_name & "_arg(" & native_var_ref_name(var) & ")";
  }


  String native_get_curr_arg_expr(TernRelItVar var, <0..2> arg) {
    arg_name = if arg == 0 then "left" else if arg == 1 then "mid" else "right";
    return "tern_rel_it_get_" & arg_name & "_arg(" & native_var_ref_name(var) & ")";
  }


  String native_expr(BoolExpr expr)       = native_expr(expr, false);
  String native_expr(ObjExpr expr, Bool)  = native_expr(expr);


  String native_expr(BoolExpr expr, Bool parenthesized) {
    return native_var_ref_name(expr) if expr :: BoolVar;
    return match (expr)
      true                  = "true",
      false                 = "false",

      is_symb(e?)           = "is_symb(" & native_expr(e) & ")",
      is_int(e?)            = "is_int(" & native_expr(e) & ")",
      is_float(e?)          = "is_float(" & native_expr(e) & ")",
      is_ne_seq(e?)         = "is_ne_seq(" & native_expr(e) & ")",
      is_ne_int_seq(e?)     = "is_ne_int_seq(" & native_expr(e) & ")",
      is_ne_float_seq(e?)   = "is_ne_float_seq(" & native_expr(e) & ")",
      is_ne_set(e?)         = "is_ne_set(" & native_expr(e) & ")",
      is_ne_map(e?)         = "is_ne_map(" & native_expr(e) & ")",
      is_ne_bin_rel(e?)     = "is_ne_bin_rel(" & native_expr(e) & ")",
      is_ne_tern_rel(e?)    = "is_ne_tern_rel(" & native_expr(e) & ")",
      is_tagged_obj(e?)     = "is_tag_obj(" & native_expr(e) & ")",

      are_eq(e1?, e2?)      = native_eq_expr(e1, e2, parenthesized),

      is_lt(e1?, e2?)       = native_nary_op(" < ",  (e1, e2), parenthesized),
      is_le(e1?, e2?)       = native_nary_op(" <= ", (e1, e2), parenthesized),


      is_flt(e1?, e2?)      = native_nary_op(" < ",  (e1, e2), parenthesized),
      is_fle(e1?, e2?)      = native_nary_op(" <= ", (e1, e2), parenthesized),

      is_out_of_range(v?)   = append_if_nonempty(it_var_method_prefix(v), "_") & "is_out_of_range(" & native_var_ref_name(v) & ")",

      is_blank(v?)          = "is_blank(" & native_var_ref_name(v) & ")",
      is_null(v?)           = "is_null_obj(" & native_var_ref_name(v) & ")",

      has_field()           = "has_field(" & native_expr(expr.record) & ", " & symb_id_name(expr.field) & ")",

      rel_obj_contains()    = native_rel_obj_contains_expr(expr.rel, expr.args),
      table_contains()      = native_table_contains(expr.table_var, expr.table, expr.tuple, expr.symmetric),

      is_member()           = native_fn_name(expr.pred) & "(" & native_expr(expr.obj) & ")",
      state_is_def()        = native_var_ref_name(expr.auto_var) & "." & state_is_def_proc_name(expr.type) & "()",

      neg(are_eq(e1?, e2?)) = native_neq_expr(e1, e2, parenthesized),
      neg(e?)               = parenthesize("!" & native_expr(e, true), parenthesized),

      and(es?)              = native_nary_op(" & ",  es, parenthesized),
      or(es?)               = native_nary_op(" | ",  es, parenthesized),
      and_then(es?)         = native_and_then_expr(es, parenthesized),
      or_else(es?)          = native_nary_op(" || ", es, parenthesized);
  }


  String native_and_then_expr(BoolExpr+ exprs, Bool parenthesized) {
    default = native_nary_op(" && ", exprs, parenthesized);

    return match (exprs)
      // (is_tagged_obj(e1?), is_int(get_inner_obj(e2?))) =
      //   if e1 == e2
      //     then native_expr(e1, true) & ".IsTaggedInt()"
      //     else default,

      // (is_tagged_obj(e1?), is_int(get_inner_obj(e2?)), are_eq(get_tag(e3?), object(s?))) =
      //   if e1 == e2 and e2 == e3
      //     then native_expr(e1, true) & ".IsTaggedInt(" & symb_id_name(s) & ")"
      //     else default,

      _ = default;
  }


  String native_table_contains(AnyTableVar table_var, AnyTable table, Maybe[Int32Var]+ tuple, Bool symmetric) {
    name = native_table_method_prefix(table) & "_contains";
    if (a <- tuple : a == nothing) {
      if not symmetric {
        suffix = append((printed(i+1) : a @ i <- tuple, a != nothing));
      }
      else {
        suffix = match (tuple)
          (_,       _)                  = "",
          (just(),  just(),  nothing)   = "12",
          (just(),  nothing, just())    |
          (nothing, just(),  nothing)   = "13_23",
          (just(),  nothing, nothing)   |
          (nothing, just(),  nothing)   = "1_2",
          (nothing, nothing, just())    = "3";
      }
      name = name & "_" & suffix if suffix != "";
    }
    return native_call_expr(name, (table_var) & (native_expr(value(a)) : a <- tuple, a != nothing));
  }


  String native_rel_obj_contains_expr(ObjExpr rel, Maybe[ObjExpr]+ args) {
    fn_name = "contains" & match (args)
      (just())                    = "",
      (just(),  just())           = "_br",
      (just(),  nothing)          = "_br_1",
      (nothing, just())           = "_br_2",
      (just(),  just(),  just())  = "_tr",
      (just(),  nothing, nothing) = "_tr_1",
      (nothing, just(),  nothing) = "_tr_2",
      (nothing, nothing, just())  = "_tr_3",
      (just(),  just(),  nothing) = "_tr_12",
      (just(),  nothing, just())  = "_tr_13",
      (nothing, just(),  just())  = "_tr_23";

    return native_call_expr(fn_name, (rel) & values(args));
  }


  String native_eq_expr(ObjExpr expr1, ObjExpr expr2, Bool parenthesized) =
    bool_obj(e1?),      bool_obj(e2?)     = native_nary_op(" == ", (e1, e2), parenthesized),
    bool_obj(e1?),      object(true)      = native_expr(e1, parenthesized),
    bool_obj(e1?),      object(false)     = native_expr(neg(e1), parenthesized),
    object(true),       bool_obj(e2?)     = native_expr(e2, parenthesized),
    object(false),      bool_obj(e2?)     = native_expr(neg(e2), parenthesized),

    int_obj(upcast_int32(e?)), int_obj(<*..*> n?) = native_nary_op(" == ", (e, n), parenthesized),

    int_obj(e1?),       int_obj(e2?)      = native_nary_op(" == ", (e1, e2), parenthesized),
    int_obj(e1?),       column_lookup()   = if expr2.repr == :int
                                              then native_column_lookup_eq(expr2.var, expr2.key, e1)
                                              else "are_eq(" & native_expr(expr1) & ", " & native_expr(expr2) & ")",
    column_lookup(),    int_obj(e2?)      = if expr1.repr == :int
                                              then native_column_lookup_eq(expr1.var, expr1.key, e2)
                                              else "are_eq(" & native_expr(expr1) & ", " & native_expr(expr2) & ")",
    int_obj(e1?),       _                 = "is_int(" & native_expr(expr2) & ", " & native_expr(e1) & ")",
    _,                  int_obj(e2?)      = "is_int(" & native_expr(expr1) & ", " & native_expr(e2) & ")",

    lookup_field(),     object(true)      = if expr1.repr == just(:bool) and expr1.record :: OptTagRecExpr
                                              then native_ptr_expr(expr1.record) & "->" & opt_rec_field_name(untag(expr1.field))
                                              else "are_eq(" & native_expr(expr1) & ", " & native_expr(expr2) & ")",

    get_tag(e?),        object(s?)        = parenthesize("get_tag_id(" & native_expr(e) & ") == " & symb_id_name(s), parenthesized),
    object(s?),         get_tag(e?)       = parenthesize("get_tag_id(" & native_expr(e) & ") == " & symb_id_name(s), parenthesized),

    object(s1?),        object(s2?)       = if s1 == s2 then "true" else "false",

    object(s?),         _                 = "is_symb(" & native_expr(expr2) & ", " & symb_id_name(s) & ")",
    _,                  object(s?)        = "is_symb(" & native_expr(expr1) & ", " & symb_id_name(s) & ")",

    empty_seq,          _                 = "is_empty_seq(" & native_expr(expr2) & ")",
    _,                  empty_seq         = "is_empty_seq(" & native_expr(expr1) & ")",

    empty_rel,          _                 = "is_empty_rel(" & native_expr(expr2) & ")",
    _,                  empty_rel         = "is_empty_rel(" & native_expr(expr1) & ")",

    _,                  _                 = "are_eq(" & native_expr(expr1) & ", " & native_expr(expr2) & ")";


  String native_column_lookup_eq(AnyTableVar var, Int32Expr key, IntExpr value) =
    native_var_ref_name(var) & ".Lookup(" & native_expr(key) & ") == " & native_expr(value, true);


  String native_neq_expr(ObjExpr expr1, ObjExpr expr2, Bool parenthesized) =
    bool_obj(e1?),      bool_obj(e2?)     = native_nary_op(" != ", (e1, e2), parenthesized),
    bool_obj(e1?),      object(true)      = native_expr(neg(e1), parenthesized),
    bool_obj(e1?),      object(false)     = native_expr(e1, parenthesized),
    object(true),       bool_obj(e2?)     = native_expr(neg(e2), parenthesized),
    object(false),      bool_obj(e2?)     = native_expr(e2, parenthesized),

    int_obj(upcast_int32(e?)), int_obj(<*..*> n?) = native_nary_op(" != ", (e, n), parenthesized),

    int_obj(e1?),       int_obj(e2?)      = native_nary_op(" != ", (e1, e2), parenthesized),

    _,                  _                 = parenthesize("!" & native_eq_expr(expr1, expr2, true), parenthesized);


  String native_expr(<IntExpr, Int32Var, Int32NatOp> expr) = native_expr(expr, false);


  String native_expr(Int value, Bool parenthesized) {
    str = printed(value);
    str = str & "L" if value >= 2147483648 or value < -2147483648;
    return str;
  }


  String native_expr(IntConst expr, Bool parenthesized) =
    time_slots_table_name(expr.automaton, expr.expr_id) & "[(int) (" & native_expr(expr.time_slot) & ")]";

  String native_expr(IntVar expr, Bool parenthesized) = native_var_ref_name(expr);

  String native_expr(IntNatOp expr, Bool parenthesized) =
    get_int_val(e?)       = native_get_int_val_expr(e, parenthesized),
    minus(e?)             = "-" & native_expr(e, true),
    add(e1?, e2?)         = native_nary_op(" + ", (e1, e2), parenthesized),
    sub(e1?, e2?)         = native_nary_op(" - ", (e1, e2), parenthesized),
    mult(e1?, e2?)        = native_nary_op(" * ", (e1, e2), parenthesized),
    div(e1?, e2?)         = native_nary_op(" / ", (e1, e2), parenthesized),
    mod(e1?, e2?)         = native_nary_op(" % ", (e1, e2), parenthesized),
    bitwise_and(e1?, e2?) = native_nary_op(" & ", (e1, e2), parenthesized),
    bitwise_or(e1?, e2?)  = native_nary_op(" | ", (e1, e2), parenthesized),
    bitwise_xor(e1?, e2?) = native_nary_op(" ^ ", (e1, e2), parenthesized),
    float_bits(e?)        = "float_bits(" & native_expr(e) & ")",
    round(e?)             = "float_round(" & native_expr(e) & ")",
    upcast_int32(e?)      = parenthesize("(int64) " & native_expr(e, true), parenthesized),
    surr_to_int_value()   = undefined, // native_call_expr("SurrToValue", (expr.store, expr.surrogate)),
    rand_nat(e?)          = "rand_nat(" & native_expr(e) & ")",
    unique_nat            = "unique_nat()",
    ticks                 = "get_tick_count()";


  String native_get_int_val_expr(ObjExpr expr, Bool parenthesized) {
    return match (expr)
      at()                = "get_int_at(" & native_expr(expr.seq) & ", " & native_expr(expr.idx) & ")",
      lookup_field()      = if expr.repr == just(:int) and expr.record :: OptTagRecExpr
                              then native_ptr_expr(expr.record) & "->" & opt_rec_field_name(untag(expr.field))
                              else "get_int(" & native_expr(expr) & ")",
      get_inner_obj(e?)   = "get_inner_long(" & native_expr(e) & ")",
      array_at()          = native_get_int_val_array_at_expr(expr.array, expr.size, expr.idx),
      column_lookup()     = if expr.repr == :int
                              then "int_col_lookup(" & native_var_ref_name(expr.var) & ", " & native_expr(expr.key) & ")"
                              else "get_int(" & native_expr(expr) & ")",
      _                   = "get_int(" & native_expr(expr) & ")";


    String native_get_int_val_array_at_expr(ArrayVar array, Int32Var size, IntExpr idx) {
      array_str = native_var_ref_name(array);
      size_str  = native_var_ref_name(size);
      idx_str   = native_expr(idx);
      args_str  = "(" & array_str & ", " & size_str & ", " & idx_str & ")";

      return match (array.repr)
        int8    |
        nat8    |
        int16   |
        int32   |
        int     = "int_array_at" & args_str,
        _       = "get_int(array_at" & args_str & ")";
    }
  }


  String native_expr(Int32Var var, Bool parenthesized) = native_var_ref_name(var);

  String native_expr(Int32NatOp expr, Bool parenthesized) {
    return match (expr)
      bool_to_bit(e?)         = "(" & native_expr(e, false) & " ? 1 : 0)",
      get_size(e?)            = "get_size(" & native_expr(e) & ")",
      get_count()             = native_get_count_expr(expr.table_var, expr.table, expr.args, expr.symmetric),
      table_lookup()          = native_table_lookup_expr(expr.table, expr.args, expr.symmetric),
      cast_int32(e?)          = "cast_int32(" & native_expr(e, false) & ")",
      add32(e1?, e2?)         = native_nary_op(" + ", (e1, e2), parenthesized),
      value_to_surr()         = native_call_expr(native_value_store_method_prefix(expr.store_type) & "_value_to_surr", (expr.store, expr.value)),
      get_unknown_arg()       = native_get_unknown_arg_expr(expr.iter, expr.arg),
      get_arg_by_assoc_surr() = native_var_ref_name(expr.table) & ".arg" & _print_(expr.arg + 1) & "(" & native_expr(expr.surr, false) & ")",
      get_assoc_surr()        = native_var_ref_name(expr.table) & ".surrogate(" & append((native_expr(v, false) : v <- expr.args), ", ") & ")";

      // get_unknown_arg()     = if expr.iter.arity == 1
      //                           then native_var_ref_name(expr.iter) & ".Get()"
      //                           else native_var_ref_name(expr.iter) & ".Get" & printed(expr.arg+1) & "()",
      // get_col_index()       = native_var_ref_name(expr.iter) & ".GetIdx()";

    String native_get_unknown_arg_expr(TableItVar iter, <0..2> arg) {
      method_name = it_var_method_prefix(iter) & "_get";
      method_name = method_name & "_" & printed(arg + 1) if arity(iter) != 1;
      return method_name & "(" & native_var_ref_name(iter) & ")";
    }

    String native_get_unknown_arg_expr(<ColumnItVar, SlaveColumnItVar> iter, <0..2> arg) {
      assert arg == 0;
      return it_var_method_prefix(iter) & "_get_idx(" & native_var_ref_name(iter) & ")";
    }
  }


  // table_lookup(table: AnyTableVar, args: Maybe[Int32Var]+, symmetric: Bool),
  String native_table_lookup_expr(AnyTableVar table, Maybe[Int32Var]+ args, Bool symmetric) {
    fn_names = if symmetric then sym_fn_names_by_args else fn_names_by_args;
    fn_name = fn_names((a != nothing : a <- args));
    args_list = append((native_var_ref_name(value(a)) : a <- args, a != nothing), ", ");
    return native_var_ref_name(table) & "." & fn_name & "(" & args_list & ")";

    [Bool+ -> String] fn_names_by_args = [
      (true,  false)        -> "Lookup1",
      (false, true)         -> "Lookup2",
      (true,  true,  false) -> "Lookup12",
      (true,  false, true)  -> "Lookup13",
      (false, true,  true)  -> "Lookup23"
    ];

    [Bool+ -> String] sym_fn_names_by_args = [
      (true,  false)        -> "Lookup",
      (false, true)         -> "Lookup",
      (true,  false, true)  -> "Lookup_13_23",
      (false, true,  true)  -> "Lookup_13_23",
      (true,  true,  false) -> "Lookup12"
    ];
  }


  String native_get_count_expr(AnyTableVar table_var, AnyTable table, Maybe[Int32Var]+ args, Bool symmetric) {
    fn_names = if symmetric then sym_fn_names_by_args else fn_names_by_args;
    fn_name = native_table_method_prefix(table) & "_" & fn_names((a != nothing : a <- args));
    call_args = (table_var) & values(args);
    return native_call_expr(fn_name, call_args);

    [Bool+ -> String] fn_names_by_args = [
      (false)               -> "size",
      (false, false)        -> "size",
      (true,  false)        -> "count_1",
      (false, true)         -> "count_2",
      (false, false, false) -> "size",
      (true,  false, false) -> "count_1",
      (false, true,  false) -> "count_2",
      (false, false, true)  -> "count_3",
      (true,  true,  false) -> "count_12",
      (true,  false, true)  -> "count_13",
      (false, true,  true)  -> "count_23"
    ];

    [Bool+ -> String] sym_fn_names_by_args = [
      (false, false)        -> "size",
      (true,  false)        -> "count",
      (false, true)         -> "count",
      (false, false, false) -> "size",
      (true,  false, false) -> "count_1_2",
      (false, true,  false) -> "count_1_2",
      (false, false, true)  -> "count_3",
      (true,  true,  false) -> "count_12",
      (true,  false, true)  -> "count_13_23",
      (false, true,  true)  -> "count_13_23"
    ];
  }

  String native_expr(FloatExpr expr) = native_expr(expr, false);

  String native_expr(FloatVar var, Bool parenthesized) = native_var_ref_name(var);

  String native_expr(FloatNatOp expr, Bool parenthesized) =
    float_value(e?)       = native_float_value_expr(e, parenthesized),
    int_to_float(e?)      = parenthesize("(double) " & native_expr(e, true), parenthesized),
    neg_float(e?)         = "-" & native_expr(e, true),
    add_floats(e1?, e2?)  = native_nary_op(" + ", (e1, e2), parenthesized),
    sub_floats(e1?, e2?)  = native_nary_op(" - ", (e1, e2), parenthesized),
    mult_floats(e1?, e2?) = native_nary_op(" * ", (e1, e2), parenthesized),
    div_floats(e1?, e2?)  = native_nary_op(" / ", (e1, e2), parenthesized),
    exp_floats(e1?, e2?)  = "float_pow(" & native_expr(e1, false) & ", " & native_expr(e2, false) & ")",
    square_root(e?)       = "float_sqrt(" & native_expr(e, false) & ")";


  String native_float_value_expr(ObjExpr expr, Bool parenthesized) =
    at()            = "get_float_at(" & native_expr(expr.seq) & ", " & native_expr(expr.idx) & ")",
    lookup_field()  = if expr.repr == just(:float) and expr.record :: OptTagRecExpr
                        then native_ptr_expr(expr.record) & "->" & opt_rec_field_name(untag(expr.field))
                        else "get_float(" & native_expr(expr) & ")",
    array_at()      = if expr.array.repr == :float
                        then "float_array_at(" & native_var_ref_name(expr.array) & ", " & native_var_ref_name(expr.size) & ", " & native_expr(expr.idx) & ")"
                        else "get_float(" & native_expr(expr) & ")",
    column_lookup() = if expr.repr == :float
                        then "float_col_lookup(" & native_var_ref_name(expr.var) & ", " & native_expr(expr.key) & ")"
                        else "get_float(" & native_expr(expr) & ")",
    _               = "get_float(" & native_expr(expr) & ")";


  String native_expr(FloatLit literal, Bool parenthesized) {
    res = string((nat(ascii_0 + d) : d <- literal.mantissa));
    res = "-" & res if literal.negative;
    res = res & "e" & printed(literal.dec_exp) if literal.dec_exp != 0;
    return res;
  }


  String native_expr(OptTagRecExpr expr) =
    opt_tag_rec_var()     |
    opt_tag_rec_fn_arg()  = native_var_name(expr),
    cast_opt_tag_rec()    = native_expr(expr.expr);


  String native_ptr_expr(OptTagRecExpr expr) {
    type_name = opt_tag_rec_name(expr.tag, expr.index);
    expr_str = native_expr(expr);
    return "((" & type_name & " *) get_opt_tag_rec_ptr(" & expr_str & "))";
  }


  String native_expr(
    <ElemVar, VecVar, ArrayVar, ItVar, StreamVar, AnyClsVar, AnyTableVar, AnyValueStoreId, AnyAutoVar, AnyDBVar> var
  ) = native_var_ref_name(var);

  String native_expr(<blank_obj>) = "make_blank_obj()";
  String native_expr(<null_obj>)  = "make_null_obj()";

  // String native_expr(ClsVar v) = native_var_ref_name(v);

  String native_nary_op(String op, AnyTypeExpr+ exprs, Bool parenthesized) {
    expr = append((native_expr(e, true) : e <- exprs), op);
    expr = "(" & expr & ")" if |exprs| > 1 and parenthesized;
    return expr;
  }
}