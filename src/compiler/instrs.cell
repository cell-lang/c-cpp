implicit prg_data : PrgData, context : NativeContext, debug_mode : Bool, break_target : Maybe[String] {
  String* native_code(Instr* instrs, Maybe[Nat] block_id) =
    join((native_code(instr, block_id) : instr <- instrs));


  String* native_code(Instr instr, Maybe[Nat] block_id) =
    init_stream(v?)       = (native_call("init", (v))),
    append()              = (native_call("append", (instr.stream, instr.obj))),
    array_alloc()         = array_alloc_native_code(instr.var, instr.size),
    array_write()         = array_write_native_code(instr.var, instr.idx, instr.value),
    array_append()        = array_append_native_code(instr.array_var, instr.size_var, instr.capacity_var, instr.value),
    array_set_var()       = (native_assignment_code(instr.target, instr.source)),
    write_rec_field()     = write_rec_field_native_code(instr.var, instr.label, instr.value, instr.optional),
    finish_init()         = { fn_name = opt_tag_rec_name(instr.var.tag, instr.var.index) & "_finish_init";
                              return (native_call(instr.var, fn_name, (native_ptr_var_name(instr.var))));
                            },
    get_seq_iter()        = (native_call("get_seq_iter", (instr.var, instr.src))),
    get_set_iter()        = (native_call("get_set_iter", (instr.var, instr.src))),
    get_bin_rel_iter()    = (native_get_bin_rel_iter_code(instr.var, instr.src, instr.args)),
    get_tern_rel_iter()   = (native_get_tern_rel_iter_code(instr.var, instr.src, instr.args)),
    move_forward(v?)      = (native_call(append_if_nonempty(it_var_method_prefix(v), "_") & "move_forward", (v))),
    set_var()             = native_set_var_code(instr.var, instr.value),
    set_bvar()            |
    set_ivar()            |
    set_ivar32()          |
    set_fvar()            = (native_assignment_code(instr.var, instr.value)),
    set_tvar()            = native_set_tvar_code(instr.var, instr.value),
    set_rc_var()          = set_rc_var_native_code(instr.value, instr.var),
    init_memb_var()       = (native_var_ref_name(instr.var) & " = " & native_const(instr.new_state) & ";"),
    reset_memb_var()      = (native_var_ref_name(instr.var) & " = " & native_const(instr.new_state) & ";"),
    clear_loc_var(v?)     = (native_var_ref_name(v) & " = make_null_obj();"),
    nullify_var(v?)       = (native_var_ref_name(v) & " = NULL;"),
    terminate()           = (if instr.hard_fail then "internal_fail();" else "soft_fail(NULL);"),
    add_ref(v?)           = undefined,
    release(v?)           = undefined,
    print_obj()           = (native_call("print", (instr.obj))),
    ret_val(e?)           = ("return " & native_expr(e) & ";"),
    no_op                 = (),
    repeat(body?)         = native_repeat_code(body, block_id),
    foreach()             = native_foreach_code(instr.iter, instr.body, block_id),
    break_loop            = (if break_target == nothing then "break;" else "goto " & value(break_target) & ";"),
    execute_block(body?)  = { new_block_id = new_unique_id(:unused);
                              body_code = native_code(body, just(new_block_id));
                              block_exit_point = block_label(new_block_id) & ":;";
                              return ("{") & indent_lines(body_code) & ("}", block_exit_point);
                            },
    exit_block            = ("goto " & block_label(value_unsafe(block_id)) & ";"),
    switch_on_nat()       = native_nat_switch_code(instr.value, instr.cases, block_id),
    symb_switch()         = native_symb_switch_code(instr.value, instr.cases, instr.else, block_id),
    call_proc()           = native_call_proc_code(if instr.var? then just(instr.var) else nothing, instr.name, instr.args, instr.cls_args, instr.rel_auto_args, instr.react_auto_args, block_id),
    call_cls()            = (native_cls_call_code(instr.cls_var, instr.var, instr.args)),
    push_call_info()      = (native_push_call_info_code(instr.fn_name, instr.args) if debug_mode),
    pop_call_info         = ("pop_call_info();" if debug_mode),
    log_runtime_failure() = native_log_runtime_failure_code(instr.is_assert, instr.file, instr.line, instr.text, instr.vars),
    branch()              = native_branch_code(instr.cond, instr.when_true, instr.when_false, block_id),
    _                     = auto_instr_native_code(instr, block_id);


  String* native_set_tvar_code(TupleVar var, LowLevelTupleExpr value) {
    var_name = native_var_ref_name(var);
    return match (value)
      tuple_var()     = (var_name & " = " & native_var_ref_name(value) & ";"),
      tuple_expr(as?) = (native_call(var_name, make_tuple_proc_name((low_level_repr(a) : a <- as)), as)),
      obj_to_tuple()  = (native_call(var_name, obj_to_tuple_proc_name(value.args_reprs), (value.obj_expr)));
  }


  String* set_rc_var_native_code(RefObjExpr value, WriteObjVar var) =
    mk_record() = native_mk_record_code(value.fields, if var :: WriteObjVar then var else undefined),
    copy_rel()  = native_copy_rel_code(var, value.rel_auto_id, value.tables, value.applied_perm),
    _           = (native_code(value, var));


  String* set_rc_var_native_code(RefObjExpr value, LocOptTagRecVar var) {
    return match (value)
      inst_opt_tag_rec()  = inst_code(value.tag, value.repr_idx, var),
      _                   = undefined;

    String* inst_code(Symbol tag, Nat repr_idx, LocOptTagRecVar var) {
      repr = prg_data.opt_reprs(tag)(repr_idx);
      opt_labels = [l : l f <- untag(repr), f.optional];
      ptr_var_name = native_ptr_var_name(var);
      rec_type_name = opt_tag_rec_name(tag, repr_idx);
      inst_code = (ptr_var_name & " = (" & rec_type_name & " *) new_obj(sizeof(" & rec_type_name & "));");
      opt_flags_code = (
        ptr_var_name & "->" & opt_rec_field_nonempty_test_var(l) & " = false;"
        : l <- isort(opt_labels)
      );
      return inst_code & opt_flags_code;
    }
  }


  String* write_rec_field_native_code(OptTagRecVar var, Symbol label, AnyTypeExpr value, Bool optional) {
    path = native_ptr_var_name(var) & "->";
    return (
      native_assignment_code(path & opt_rec_field_name(label), value),
      native_assignment_code(path & opt_rec_field_nonempty_test_var(label), true) if optional
    );
  }


  String* array_alloc_native_code(ArrayVar var, Int32Expr size) {
    elt_type = native_elt_type(var);
    var_name = native_var_name(var);
    return if size != 0
      then (var_name & " = " & native_alloc_fn(var.repr) & "(" & native_expr(size) & ");")
      else (var_name & " = NULL;");
  }


  String* array_write_native_code(ArrayVar var, Int32Expr idx, AnyTypeExpr value) {
    idx_str = native_expr(idx, false);
    value_str = native_expr(value);
    value_str = match (var.repr)
      int8    |
      nat8    = "as_byte(" & value_str & ")",
      int16   = "as_short(" & value_str & ")",
      int32   = "as_int(" & value_str & ")",
      _       = value_str;
    return (native_var_name(var) & "[" & idx_str & "] = " & value_str & ";");


  }


  String* array_append_native_code(ArrayVar array_var, Int32Var size_var, Int32Var capacity_var, AnyTypeExpr value) =
    (native_call(array_var, "array_append", (array_var, native_var_ref_name(size_var) & "++", capacity_var, value)));


  String native_cls_call_code(AnyClsVar cls_var, WriteObjVar var, AtomicExpr+ args) {
    cls_var_name = native_var_name(cls_var);

    return native_var_ref_name(var) & " = " & cls_var_name & ".fn_ptr_" & _print_(|args|) &
      "(" & append((native_expr(a) & ", " : a <- args)) & cls_var_name & ".capt_vars, " &
      cls_var_name & ".capt_cls, " & cls_var_name & ".capt_auto, env);";
  }


  String native_push_call_info_code(<FnId, ProcSymbol, MethodSymbol> fn_name, ObjExpr* args) {
    fn_name_str = printed(user_repr(fn_name));
    args_strs = (native_expr(a) : a <- args);
    return native_call("push_call_info_wrapper", (fn_name_str) & args_strs);
  }


  String native_get_bin_rel_iter_code(BinRelItVar var, AtomicExpr src, (Maybe[AtomicExpr], Maybe[AtomicExpr]) args) =
    match (args)
      (nothing,   nothing)    = native_call("get_bin_rel_iter", (var, src)),
      (just(a1?), nothing)    = native_call("get_bin_rel_iter_1", (var, src, a1)),
      (nothing,   just(a2?))  = native_call("get_bin_rel_iter_2", (var, src, a2));


  String native_get_tern_rel_iter_code(TernRelItVar var, AtomicExpr src, (Maybe[AtomicExpr], Maybe[AtomicExpr], Maybe[AtomicExpr]) args) =
    match (args)
      (nothing,   nothing,   nothing)     = native_call("get_tern_rel_iter", (var, src)),
      (just(a1?), nothing,   nothing)     = native_call("get_tern_rel_iter_by", (var, src, 0, a1)),
      (nothing,   just(a2?), nothing)     = native_call("get_tern_rel_iter_by", (var, src, 1, a2)),
      (nothing,   nothing,   just(a3?))   = native_call("get_tern_rel_iter_by", (var, src, 2, a3)),
      (just(a1?), just(a2?), nothing)     = native_call("get_tern_rel_iter_by", (var, src, 0, a1, a2)),
      (just(a1?), nothing,   just(a3?))   = native_call("get_tern_rel_iter_by", (var, src, 2, a3, a1)),
      (nothing,   just(a2?), just(a3?))   = native_call("get_tern_rel_iter_by", (var, src, 1, a2, a3));


  String* native_repeat_code(Instr+ body, Maybe[Nat] block_id) {
    head = body(0);
    if head :: <branch(cond: BoolExpr, when_true: (<break_loop>), when_false: ())> {
      cond_str = native_expr(neg(head.cond));
      body_text = indent_lines(native_code(tail(body), block_id, break_target = nothing)) & ("}");
      return ("while (" & cond_str & ") {",) & body_text;
    }
    else {
      body_text = indent_lines(native_code(body, block_id, break_target = nothing)) & ("}");
      return ("for ( ; ; ) {") & body_text;
    }
  }


  String* native_foreach_code(SeqIter iter, Instr* body, Maybe[Nat] block_id) {
    seq_name        = native_var_ref_name(iter.seq);
    src_array_name  = native_var_ref_name(iter.src_array);
    count_var_name  = native_var_ref_name(iter.count_var);
    idx_var_name    = native_var_ref_name(iter.idx_var);
    it_var_name     = native_var_ref_name(iter.it_var);

    src_repr = low_level_repr(iter.it_var);

    unique_id = printed(new_unique_id(:unused));
    buffer_var_name = "buffer_" & unique_id;

    method_name = match (src_repr)
      bool    = "get_seq_next_frag_bool",
      int     = "get_seq_next_frag_int64",
      float   = "get_seq_next_frag_double",
      _       = "get_seq_next_frag_obj";

    ## TRY TO TUNE THESE TO SEE IF MEMORY CONSUMPTION CAN BE REDUCED
    buff_size = match (src_repr)
      bool    = 1024,
      int     = 1024,
      float   = 1024,
      _       = 1024;

    buff_size_str = printed(buff_size);

    end_var_name = "end_" & unique_id;
    offset_var_name = "offset_" & unique_id;

    label = "label_" & unique_id;
    may_break = body != () and may_break(body);
    body_code = native_code(body, block_id, break_target = if may_break then just(label) else nothing);

    ## BUG BUG BUG: USING A DOUBLE LOOP, WHICH WILL MALFUNCTION IF THERE'S A BREAK IN THE BODY
    ## RIGHT NOT IT DOESN'T MATTER BECAUSE EVERY SEQUENCE IS REPRESENTED AS AN ARRAY
    ## BUT DOES THE break_target THING FIX THE PROBLEM?
    return (
      idx_var_name & " = 0;",
      "do {",
      "  uint32 " & end_var_name & ";",
      "  " & native_type(src_repr) & " " & buffer_var_name & "[" & buff_size_str & "];",
      "  " & src_array_name & " = " & method_name & "(" & seq_name & ", " & idx_var_name & ", " & buffer_var_name & ", " & buff_size_str & ", &" & end_var_name & ");",
      "  while (" & idx_var_name & " < " & end_var_name & ") {",
      "    " & it_var_name & " = " & src_array_name & "[" & idx_var_name & "];"
    ) & indent_lines(body_code, 2) & (
      "    " & idx_var_name & "++;",
      "  }",
      "} while (" & idx_var_name & " < " & count_var_name & ");",
      "assert(" & idx_var_name & " == " & count_var_name & ");",
      label & ":;" if may_break
    );
  }


  String* gen_cache_clearing_code(ImplArg arg) {
    code = ();
    for fn_id <- isort(lookup(prg_data.cached_semi_consts_by_impl_arg, arg, [])) {
      cache_var_name = memo_var_name(fn_id);
      code = (code | "env." & cache_var_name & " = make_blank_obj();");
    }
    return code;
  }


  String* native_set_var_code(<WriteObjVar, LocOptTagRecVar> var, ObjExpr value) {
    assert not var :: <QualMembVar, QualSignalVar>;

    if var :: <MembVar, SignalVar> {
      return (
        native_call("remove_from_pool", (:mem_pool, var)),
        native_call(var, "copy_to_pool", (:mem_pool, value))
      );
    }
    else if var :: PrevVarValue {
      return (native_call(var, "copy_from_pool", (value)));
    }
    else
      return (native_assignment_code(var, value));
  }

  String* native_set_var_code(ImplArg var, ObjExpr value) =
    (native_assignment_code(var, value)) & gen_cache_clearing_code(var);


  ## BUG BUG BUG: IF THERE IS INSIDE ONE OF THE CASES A BREAK STATEMENT MEANT TO
  ## TERMINATE AN OUTER LOOP, THAT BREAK WILL TERMINATE THE SWITCH/CASE INSTEAD.
  String* native_nat_switch_code(IntExpr value, Instr*+ cases, Maybe[Nat] block_id) {
    cases_code = (
      ("case " & printed(i) & ": {",) & indent_lines((native_code(c, block_id) | "break;", "}"))
      : c @ i <- cases
    );
    default_code = ("default:", "  internal_fail();");
    switch_body = join(cases_code) & default_code;
    return ("switch ((int) (" & native_expr(value) & ")) {",) & indent_lines(switch_body) & ("}");
  }


  ## BUG BUG BUG: IF THERE IS INSIDE ONE OF THE CASES A BREAK STATEMENT MEANT TO
  ## TERMINATE AN OUTER LOOP, THAT BREAK WILL TERMINATE THE SWITCH/CASE INSTEAD.
  String* native_symb_switch_code(ObjExpr value, [+([+SymbObj], Instr+)] cases, Instr* else, Maybe[Nat] block_id) {
    value_str = match (value)
      get_tag(tag_obj?)   = "get_tag_id(" & native_expr(tag_obj) & ")",
      _                   = "get_symb_id(" & native_expr(value) & ")";

    body_code = (
      ("" if i > 0) &
      ("case " & symb_id_name(a) & ":" & if j == |as| - 1 then " {" else "" : a @ j <- isort(as)) &
      indent_lines(native_code(is, block_id)) &
      ("  break;" if in(falls_through, code_outcomes(is)), "}")
      : as, is @ i <- isort(cases)
    );

    if else != () {
      default_code = indent_lines(native_code(else, block_id));
      body_code = (body_code | ("", "default:") & default_code & ("  break;")) if else != ();
    }

    return ("switch (" & value_str & ") {",) & indent_lines(join(body_code)) & ("}");
  }


  String native_code(RefObjExpr expr, WriteObjVar var) =
    mk_set_from_stream()        = native_call(var, "build_set",         (expr.stream)),
    mk_set()                    = native_call(var, "build_set",         (expr.elems, expr.size)),
    mk_set_from_array()         = native_call(var, "build_set",         (expr.array, expr.size)),
    mk_seq()                    = native_mk_seq_code(expr.array, expr.size, var),
    build_const_int_seq()       = native_build_const_int_seq_code(expr.seq_id, var),
    mk_map_from_streams()       = native_call(var, "build_map",         (expr.key_stream, expr.value_stream)),
    mk_map()                    = native_call(var, "build_map",         (expr.keys, expr.values, expr.size)),
    mk_bin_rel_from_streams()   = native_call(var, "build_bin_rel",     expr.streams),
    mk_bin_rel()                = native_call(var, "build_bin_rel",     (expr.cols | expr.size)),
    mk_bin_rel_from_arrays()    = native_mk_bin_rel(var, expr.col1, expr.col2, expr.size, expr.is_map),
    mk_tern_rel_from_streams()  = native_call(var, "build_tern_rel",    expr.streams),
    mk_tern_rel()               = native_call(var, "build_tern_rel",    (expr.cols | expr.size)),
    mk_tern_rel_from_arrays()   = native_call(var, "build_tern_rel",    (expr.col1, expr.col2, expr.col3, expr.size)),
    mk_tagged_obj()             = native_mk_tagged_obj_code(expr.tag, expr.obj, var),
    mk_record()                 = undefined,
    get_seq_slice()             = native_call(var, "get_seq_slice",     (expr.seq, expr.idx_first, expr.len)),
    append_to_seq()             = native_call(var, "append",            (expr.seq, expr.new_elem)),
    update_seq_at()             = native_call(var, "update_seq_at",     (expr.seq, expr.idx, expr.value)),
    join_seqs()                 = native_call(var, "concat",            (expr.left, expr.right)),
    join_int_seqs(e1?, e2?)     = native_call(var, "concat_ints",       (e1, e2)),
    join_float_seqs(e1?, e2?)   = native_call(var, "concat_floats",     (e1, e2)),
    rev_seq()                   = native_call(var, "rev_seq",           (expr.seq)),
    internal_sort()             = native_call(var, "internal_sort",     (expr.set)),
    insert_elt()                = native_call(var, "set_insert",        (expr.set, expr.elt)),
    remove_elt()                = native_call(var, "set_remove",        (expr.set, expr.elt)),
    set_key_value()             = native_call(var, "set_key_value",     (expr.map, expr.key, expr.value)),
    drop_key()                  = native_call(var, "drop_key",          (expr.map, expr.key)),
    parse_value()               = native_call(var, "parse_value",       (expr.value)),
    print_value()               = native_call(var, "print_value",       (expr.value)),
    _                           = auto_expr_native_code(expr, var);


  String native_mk_seq_code(ArrayVar array, Int32Expr size, WriteObjVar var) {
    fn_name = match (array.repr)
      object  = "build_seq",
      _       = "build_seq_" & native_type(array.repr);
    return native_call(var, fn_name, (array, size));
  }


  String native_mk_bin_rel(WriteObjVar var, ArrayVar col1, ArrayVar col2, Int32Expr size, Bool is_map) {
    ctor_name = if is_map then "build_map" else "build_bin_rel";
    return native_call(var, ctor_name, (col1, col2, size));
  }


  String native_build_const_int_seq_code(Nat seq_id, ObjVar var) {
    type, len = prg_data.int_seqs_types_and_lengths(seq_id);

    seq_name = const_int_seq_name(seq_id);
    len_str = _print_(len);

    if type == "uint8" and len <= 8 {
      coded_seq = append((hex_string(d, 2) : d <- reverse(prg_data.int_seqs(seq_id))));
      return native_var_ref_name(var) & " = build_inline_const_seq_uint8(0x" & coded_seq & ", " & len_str & ");";
    }

    if (type == "int8" or type == "int16") and len <= 4 {
      coded_seq = append((hex_string(mod(d + 65536, 65536), 4) : d <- reverse(prg_data.int_seqs(seq_id))));
      return native_var_ref_name(var) & " = build_inline_const_seq_int16(0x" & coded_seq & ", " & len_str & ");";
    }

    if type == "int32" and len <= 2 {
      coded_seq = append((hex_string(mod(d + 4294967296, 4294967296), 8) : d <- reverse(prg_data.int_seqs(seq_id))));
      return native_var_ref_name(var) & " = build_inline_const_seq_int32(0x" & coded_seq & ", " & len_str & ");";
    }

    return native_var_ref_name(var) & " = build_const_seq_" & type & "(" & seq_name & ", " & len_str & ");";


    String hex_string(Int d, Nat len) {
      chs : Nat*;

      assert d >= 0;

      chs = (0 : _ < len);
      rem = d;
      for i < len {
        chs(len - i - 1) := hex_digit(mod(rem, 16));
        rem = rem / 16;
      }
      return string(chs);
    }


    Nat hex_digit(Int d) {
      assert d >= 0 and d < 16;
      return nat(if d <= 9 then d + `0` else d - 10 + `A`);
    }
  }

  ///////////////////////////////////////////////////////////////////////////////

  String native_mk_tagged_obj_code(ObjExpr tag, ObjExpr value, WriteObjVar var) {
    tag_expr = match (tag)
      object(<+> s?)  = symb_id_name(s),
      _               = "get_symb_id(" & native_expr(tag) & ")";
    return match (value)
      int_obj(e?) = native_call(var, "make_tag_int", (tag_expr, e)),
      _           = native_call(var, "make_tag_obj", (tag_expr, value));
  }


  String* native_mk_record_code([+SymbObj -> AtomicExpr] fields, WriteObjVar var) {
    ord_labels, index = prg_data.symbols_sets_info([untag(l) : l _ <- fields], !);
    label_set_name = const_symb_seq_name(index);
    values_strs = (native_expr(fields(object(l), !)) : l <- ord_labels);

    id = new_unique_id(:unused);
    var_name = "labels_" & _print_(id);

    code = ("OBJ " & var_name & "[" & _print_(|fields|) & "];");
    code = code & (var_name & "[" & _print_(i) & "] = " & vs & ";" : vs @ i <- values_strs);
    code = (code | native_call(var, "build_record", (label_set_name, var_name, |fields|)));

    return code;
  }


  // String *native_load_state_code(AnyWriteVar var, AnyTypeExpr arg, LocDBVar auto_var, DBSymbol auto_type) {
  //   auto_type_name = native_name(auto_type);
  //   updater_name = updater_var_ref_name(auto_var);

  //   return (
  //     "{ " & auto_type_name & " instance = N E W " & auto_type_name & "(env);",
  //     "  bool succeeded = " & native_call("AutoMisc.Load", (arg, "instance", updater_name)),
  //     "  " & native_var_ref_name(var) & " = SymbObj.Get(succeeded);",
  //     "  if (succeeded) {",
  //     "    " & native_var_ref_name(auto_var) & " = instance;",
  //     "    " & updater_name & " = instance.NewUpdater();",
  //     "  }",
  //     "}"
  //   );
  // }


  String* native_call_proc_code(Maybe[AnyWriteVar] var, ObjFnName name, AnyTypeExpr* args, AnyLambdaExpr* cls_args, (LocDBVar, DBSymbol)* rel_auto_args, LocAutoVar* react_auto_args, Maybe[Nat] block_id) {
    //## MOVE TO auto-instrs.cell
    if name == proc_symbol(:load) {
      assert var != nothing and |args| == 1 and |rel_auto_args| == 1 and cls_args == () and react_auto_args == ();
      db_var, db_type = only_unsafe(rel_auto_args);
      native_fn_name = load_state_entry_point_name(db_type);
      native_args = (only_unsafe(args), native_var_ref_name(db_var), updater_var_ref_name(db_var), "env");
      return (native_call(value_unsafe(var), native_fn_name, native_args));
    }

    //## MOVE TO auto-instrs.cell
    if name == proc_symbol(:save) {
      assert var != nothing and |args| == 1 and |rel_auto_args| == 1 and cls_args == () and react_auto_args == ();
      db_var, db_type = only_unsafe(rel_auto_args);
      native_fn_name = save_state_entry_point_name(db_type);
      native_args = (only_unsafe(args), native_var_ref_name(db_var), updater_var_ref_name(db_var));
      return (native_call(value_unsafe(var), native_fn_name, native_args));
    }

    cls_setup_code, cls_args_refs = unzip((gen_cls_info(c) : c <- cls_args));
    rel_args = join(((native_var_ref_name(v), updater_var_ref_name(v)) : v, _ <- rel_auto_args));
    react_args = (native_var_ref_name(v) : v <- react_auto_args);
    args_list = args & cls_args_refs & rel_args & react_args;
    is_builtin_proc = name :: ProcSymbol and builtin_procs_map(name, _);
    args_list = (args_list | "env") if not name :: ConvFnId and not is_builtin_proc;
    name_str = native_fn_name(name);
    call_code = if var != nothing
      then native_call(value(var), name_str, args_list)
      else native_call(name_str, args_list);
    return (join(cls_setup_code) | call_code);


    (String*, AnyClsVar) gen_cls_info(AnyClsVar cls) = ((), cls);


    (String*, AnyClsVar) gen_cls_info(LambdaExpr lambda) {
      id = new_unique_id(:unused);
      var = cls_var(id);
      name = native_expr(var);

      fn_name = "lambda_" & printed(index_first(lambda, prg_data.ord_lambda_exprs));
      code = (
        "CLS " & name & ";",
        name & ".fn_ptr_" & _print_(lambda.cls.arity) & " = " & fn_name & ";"
      );

      if lambda.capt_vars != () {
        if |lambda.capt_vars| == 1 and only(lambda.capt_vars) :: ObjVar {
          code = (code | name & ".capt_vars = &" & native_expr(only(lambda.capt_vars)) & ";");
        }
        else {
          var_name = "capt_vars_" & printed(id);
          code = (code | "OBJ " & var_name & "[" & printed(|lambda.capt_vars|) & "];");
          for v @ i <- lambda.capt_vars
            code = (code | var_name & "[" & printed(i) & "] = " & native_expr(v) & ";");
          code = (code | name & ".capt_vars = " & var_name & ";");
        }
      }
      else
        code = (code | name & ".capt_vars = 0;");

      if lambda.capt_cls_vars != () {
        if |lambda.capt_cls_vars| != 1 {
          var_name = "capt_cls_" & printed(id);
          code = (code | "CLS " & var_name & "[" & printed(|lambda.capt_cls_vars|) & "];");
          for v @ i <- lambda.capt_cls_vars
            code = (code | var_name & "[" & printed(i) & "] = " & native_expr(v) & ";");
          code = (code | name & ".capt_cls = " & var_name & ";");
        }
        else
          code = (code | name & ".capt_cls = &" & native_expr(only(lambda.capt_cls_vars)) & ";");
      }
      else
        code = (code | name & ".capt_cls = 0;");

      capt_auto_str = if lambda.capt_auto != nothing then auto_or_db_arg_name else "0";
      code = (code | name & ".capt_auto = " & capt_auto_str & ";");

      return (code, var);
    }
  }


  String* native_branch_code(BoolExpr cond, Instr+ when_true, Instr* when_false, Maybe[Nat] block_id) {
    conds = (cond);
    bodies = (when_true);
    else_code = when_false;
    loop {
      break if |else_code| != 1;
      else_instr = only(else_code);
      maybe_branch = match (else_instr)
        branch()  = just(else_instr),
        _         = nothing;
      break if maybe_branch == nothing;
      branch = value(maybe_branch);
      conds = (conds | branch.cond);
      bodies = (bodies | branch.when_true);
      else_code = branch.when_false;
    }

    code = ();
    for c @ i <- conds {
      opt_else = if i > 0 then "else " else "";
      if_line = opt_else & "if (" & native_expr(c) & ") {";
      body = indent_lines(native_code(bodies(i), block_id));
      code = code & (if_line) & body & ("}");
    }

    if else_code != ()
      code = code & ("else {") & indent_lines(native_code(else_code, block_id)) & ("}");

    return code;
  }


  String* native_log_runtime_failure_code(Bool is_assert, String file, NzNat line, Maybe[String] text, (<StdVar, ImplArg>, ObjExpr)* vars) {
    vars_dump = (
      "dump_var(" & printed(user_repr(v)) & ", " & native_code(e) & ");"
      : v, e <- vars
    );
    filename_str = _print_(file); ## WHAT HAPPENS WHEN WE HAVE NON-ASCII CHARACTERS?
    if is_assert {
      text_arg = if text != nothing then _print_(value(text)) else "NULL";
      msg_print_instr = native_call("print_assertion_failed_msg", (filename_str, line, text_arg));
      return (msg_print_instr) & vars_dump;
    }
    else {
      msg_print_instr = native_call("print_fail_reached_msg", (filename_str, line));
      return (msg_print_instr) & vars_dump;
    }
  }
}
