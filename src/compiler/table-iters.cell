implicit prg_data : PrgData, context : NativeContext, debug_mode : Bool, break_target : Maybe[String] {
  String* native_foreach_code(UnaryTableIter iter, Instr* body, Maybe[Nat] block_id) {
    table_name = native_deref_var_name(iter.table_var);

    unique_id = printed(new_unique_id(:unused));
    left_var = "left_" & unique_id;
    bitmap_var = "bitmap_" & unique_id;
    word_idx_var = "word_idx_" & unique_id;
    word_var = "word_" & unique_id;
    bit_idx_var = "bit_idx_" & unique_id;

    label = "label_" & unique_id;

    code = (
      "uint32 " & left_var & " = " & table_name & ".count;",
      "uint64 *" & bitmap_var & " = " & table_name & ".bitmap;",
      "for (uint32 " & word_idx_var & "=0 ; " & left_var & " > 0 ; " & word_idx_var & "++) {",
      "  uint64 " & word_var & " = " & bitmap_var & "[" & word_idx_var & "];",
      "  uint32 " & bit_idx_var & " = 0;",
      "  " & label & ":",
      "    if (" & word_var & " & 1 != 0) {",
      "      " & left_var & "--;",
      "      uint32 " & native_var_ref_name(iter.var) & " = 64 * " & word_idx_var & " + " & bit_idx_var & ";" if iter.var?
    );

    code = code & indent_lines(native_code(body, block_id), 3);

    code = (code |
      "    }",
      "    " & word_var & " >>= 1;",
      "    if (" & word_var & " != 0) {",
      "      " & bit_idx_var & "++;",
      "      goto " & label & ";",
      "    }",
      "}"
    );

    return code;
  }


  String* native_foreach_code(BinTableIter iter, Instr* body, Maybe[Nat] block_id) {
    body_text = native_code(body, block_id);
    arg1, arg2 = iter.args;
    if iter.table.keys == [] {
      return match (arg1, arg2)
        bound(v?),  _         = native_bin_table_foreach_code_1(iter.table_var, v, arg2, false, body_text),
        _,          bound(v?) = native_bin_table_foreach_code_2(iter.table_var, arg1, v, body_text, "bin_table_count_2", "bin_table_range_restrict_2"),
        _,          _         = native_bin_table_foreach_code(iter.table_var, arg1, arg2, false, body_text);
    }
    else if iter.table.keys == [[0]] {
      return match (arg1, arg2)
        bound(v?),  _         = native_single_or_double_key_bin_table_foreach_code_1(iter.table_var, v, arg2, true, body_text),
        _,          bound(v?) = native_bin_table_foreach_code_2(iter.table_var, arg1, v, body_text, "single_key_bin_table_count_2", "single_key_bin_table_range_restrict_2"),
        _,          _         = native_single_or_double_key_bin_table_foreach_code(iter.table_var, arg1, arg2, body_text);
    }
    else {
      assert iter.table.keys == [[0], [1]];
      return match (arg1, arg2)
        bound(v?),  _         = native_single_or_double_key_bin_table_foreach_code_1(iter.table_var, v, arg2, false, body_text),
        _,          bound(v?) = native_double_key_bin_table_foreach_code_2(iter.table_var, arg1, v, body_text),
        _,          _         = native_single_or_double_key_bin_table_foreach_code(iter.table_var, arg1, arg2, body_text);
    }


    String* native_double_key_bin_table_foreach_code_2(AnyTableVar table_var, TableArgStatus arg1, Int32Var arg2, String* body_text) {
      unique_id = printed(new_unique_id(:unused));

      arg1_var = match (arg1)
        read(v?)  = native_var_ref_name(v),
        ignored   = "arg1_" & unique_id,
        bound()   = undefined;

      return (
        "uint32 " & native_call(arg1_var, "double_key_bin_table_lookup_2", (table_var, arg2)),
        "if (" & arg1_var & " != 0xFFFFFFFF) {"
      ) & indent_lines(body_text) & (
        "}"
      );
    }


    String* native_single_or_double_key_bin_table_foreach_code_1(AnyTableVar table_var, Int32Var arg1, TableArgStatus arg2, Bool single_key, String* body_text) {
      unique_id = printed(new_unique_id(:unused));

      arg2_var = match (arg2)
        read(v?)  = native_var_ref_name(v),
        ignored   = "arg2_" & unique_id,
        bound()   = undefined;

      lookup_method = if single_key then "single_key_bin_table_lookup_1" else "double_key_bin_table_lookup_1";

      return (
        "uint32 " & native_call(arg2_var, lookup_method, (table_var, arg1)),
        "if (" & arg2_var & " != 0xFFFFFFFF) {"
      ) & indent_lines(body_text) & (
        "}"
      );
    }


    String* native_single_or_double_key_bin_table_foreach_code(AnyTableVar table_var, TableArgStatus arg1, TableArgStatus arg2, String* body_text) {
      table_var_name = native_deref_var_name(table_var);

      unique_id = printed(new_unique_id(:unused));
      left_var = "left_" & unique_id;
      forward_var = "forward_" & unique_id;

      arg1_var = match (arg1)
        read(v?)  = native_var_ref_name(v),
        ignored   = "arg1_" & unique_id,
        bound()   = undefined;

      arg2_var = match (arg2)
        read(v?)  = native_var_ref_name(v),
        ignored   = "arg2_" & unique_id,
        bound()   = undefined;

      return (
        "uint32 " & left_var & " = " & table_var_name & ".count;",
        "uint32 *" & forward_var & " = " & table_var_name & ".forward_array;",
        "for (uint32 " & arg1_var & "=0 ; " & left_var & " > 0 ; " & arg1_var & "++) {",
        "  uint32 " & arg2_var & " = " & forward_var & "[" & arg1_var & "];",
        "  if (" & arg2_var & " != 0xFFFFFFFF) {"
      ) & indent_lines(body_text, 2) & (
        "    " & left_var & "--;",
        "  }",
        "}"
      );
    }
  }


  String* native_bin_table_foreach_code_1(AnyTableVar table_var, Int32Var arg1, TableArgStatus arg2, Bool symmetric, String* body_text) {
    unique_id = printed(new_unique_id(:unused));
    buffer_var = "buffer_" & unique_id;
    count_var = "count_" & unique_id;
    read_var = "read_" & unique_id;
    array_var = "array_" & unique_id;
    idx_var = "idx_" & unique_id;

    label = "label_" & unique_id;

    count_1_method = if symmetric then "sym_bin_table_count" else "bin_table_count_1";
    range_restrict_1_method = if symmetric then "sym_bin_table_range_restrict" else "bin_table_range_restrict_1";

    code = (
      "uint32 " & buffer_var & "[64];",
      "uint32 " & native_call(count_var, count_1_method, (table_var, arg1)),
      "uint32 " & read_var & " = 0;",
      "while (" & read_var & " < " & count_var & ") {",
      "  UINT32_ARRAY " & native_call(array_var, range_restrict_1_method, (table_var, arg1, read_var, buffer_var, 64)),
      "  " & read_var & " += " & array_var & ".size;",
      "  uint32 " & idx_var & " = 0;",
      "  " & label & ":"
    );

    code = match (arg2)
      read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
      ignored   = code,
      bound()   = undefined;

    code = code & indent_lines(body_text, 2);

    code = (code |
      "    " & idx_var & "++;",
      "    if (" & idx_var & " < " & array_var & ".size)",
      "      goto " & label & ";",
      "}"
    );

    return code;
  }


  String* native_bin_table_foreach_code_2(AnyTableVar table_var, TableArgStatus arg1, Int32Var arg2, String* body_text, String count_2_method, String restrict_2_method) {
    unique_id = printed(new_unique_id(:unused));
    buffer_var = "buffer_" & unique_id;
    count_var = "count_" & unique_id;
    read_var = "read_" & unique_id;
    array_var = "array_" & unique_id;
    idx_var = "idx_" & unique_id;

    label = "label_" & unique_id;

    code = (
      "uint32 " & buffer_var & "[64];",
      "uint32 " & native_call(count_var, count_2_method, (table_var, arg2)),
      "uint32 " & read_var & " = 0;",
      "while (" & read_var & " < " & count_var & ") {",
      "  UINT32_ARRAY " & native_call(array_var, restrict_2_method, (table_var, arg2, read_var, buffer_var, 64)),
      "  " & read_var & " += " & array_var & ".size;",
      "  uint32 " & idx_var & " = 0;",
      "  " & label & ":"
    );

    code = match (arg1)
      read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
      ignored   = code,
      bound()   = undefined;

    code = code & indent_lines(body_text, 2);

    code = (code |
      "    " & idx_var & "++;",
      "    if (" & idx_var & " < " & array_var & ".size)",
      "      goto " & label & ";",
      "}"
    );

    return code;
  }


  String* native_bin_table_foreach_code(AnyTableVar table_var, TableArgStatus arg1, TableArgStatus arg2, Bool symmetric, String* body_text) {
    table_var_str = native_var_ref_name(table_var);

    unique_id = printed(new_unique_id(:unused));
    count_var = "count_" & unique_id;
    read_var = "read_" & unique_id;
    count_1_var = "count_1_" & unique_id;
    read_1_var = "read_1_" & unique_id;
    buffer_var = "buffer_" & unique_id;
    array_var = "array_" & unique_id;
    idx_var = "idx_" & unique_id;

    label_1 = "label_1_" & unique_id;
    label_2 = "label_2_" & unique_id;

    arg_1_var = match (arg1)
      read(v?)  = native_var_ref_name(v),
      ignored   = "arg_1_" & unique_id,
      bound()   = undefined;

    ## BUG BUG BUG: THIS SEEMS WRONG FOR SYMMETRIC TABLES. DOESN'T THIS ITERATE ONLY
    ## THROUGH THE TUPLES FOR WHICH THE GIVEN ARGUMENT IS THE LOWER ONE IN THE PAIR?

    size_method = if symmetric then "sym_bin_table_size" else "bin_table_size";
    count_1_method = if symmetric then "sym_bin_table_count_lower" else "bin_table_count_1";
    range_restrict_1_method = if symmetric then "sym_bin_table_range_restrict_lower" else "bin_table_range_restrict_1";

    code = (
      "uint32 " & native_call(count_var, size_method, (table_var)),
      "uint32 " & read_var & " = 0;",
      "for (uint32 " & arg_1_var & "=0 ; " & read_var & " < " & count_var & " ; " & arg_1_var & "++) {",
      "  uint32 " & native_call(count_1_var, count_1_method, (table_var, arg_1_var)),
      "  if (" & count_1_var & " > 0) {",
      "    " & read_var & " += " & count_1_var & ";",
      "    uint32 " & buffer_var & "[64];",
      "    uint32 " & read_1_var & " = 0;",
      "    " & label_1 & ":",
      "      UINT32_ARRAY " & native_call(array_var, range_restrict_1_method, (table_var, arg_1_var, read_1_var, buffer_var, 64)),
      "      " & read_1_var & " += " & array_var & ".size;",
      "      uint32 " & idx_var & " = 0;",
      "      " & label_2 & ":"
    );

    code = match (arg2)
      read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
      ignored   = code,
      bound()   = undefined;

    code = code & indent_lines(body_text, 4);

    code = (code |
      "      if (++" & idx_var & " < " & array_var & ".size)",
      "        goto " & label_2 & ";",
      "    if (" & read_1_var & " < " & count_1_var & ")",
      "      goto " & label_1 & ";",
      "  }",
      "}"
    );

    return code;
  }


  String* native_foreach_code(SymBinTableIter iter, Instr* body, Maybe[Nat] block_id) {
    body_text = native_code(body, block_id);
    arg1, arg2 = iter.args;
    return match (arg1, arg2)
      bound(v?),  _         = native_bin_table_foreach_code_1(iter.table_var, v, arg2, true, body_text),
      _,          _         = native_bin_table_foreach_code(iter.table_var, arg1, arg2, true, body_text);
  }


  String* native_foreach_code(MasterBinTableIter iter, Instr* body, Maybe[Nat] block_id) {
    arg1, arg2 = iter.args;
    maybe_surr_var = if iter.surr_var? then just(iter.surr_var) else nothing;
    return match (arg1, arg2)
      bound(),    bound()     = undefined,
      bound(v?),  _           = foreach_code_1(iter.table_var, iter.table, v, arg2, maybe_surr_var, body, block_id),
      _,          bound(v?)   = foreach_code_2(iter.table_var, iter.table, arg1, v, maybe_surr_var, body, block_id),
      _,          _           = foreach_code(iter.table_var, iter.table, arg1, arg2, maybe_surr_var, body, block_id);


    String* foreach_code_1(AnyTableVar table_var, MasterBinTable table, Int32Var arg1, TableArgStatus arg2, Maybe[Int32Var] maybe_surr_var, Instr* body, Maybe[Nat] block_id) {
      table_var_str = native_var_ref_name(table_var);
      arg1_str = native_var_ref_name(arg1);

      unique_id = printed(new_unique_id(:unused));
      buffer_var = "buffer_" & unique_id;
      surrs_var = "surrs_array_" & unique_id;
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      inner_loop_label = "label_" & unique_id;

      if maybe_surr_var != nothing {
        restrict_method_name = "master_bin_table_range_restrict_1_with_surrs";
        buffer_size_str = "128";
      }
      else {
        restrict_method_name = "master_bin_table_range_restrict_1";
        buffer_size_str = "64";
      }

      restrict_args = (table_var, arg1, read_var, buffer_var, 64);
      restrict_call = native_call(restrict_method_name, restrict_args);

      code = (
        "uint32 " & buffer_var & "[" & buffer_size_str & "];",
        "uint32 " & count_var & " = master_bin_table_count_1(" & table_var_str & ", " & arg1_str & ");",
        "uint32 " & read_var & " = 0;",
        "while (" & read_var & " < " & count_var & ") {",
        "  UINT32_ARRAY " & array_var & " = " & restrict_call,
        "  " & read_var & " += " & array_var & ".size;",
        "  uint32 *" & surrs_var & " = " & array_var & ".array + " & array_var & ".offset;" if maybe_surr_var != nothing,
        "  uint32 " & idx_var & " = 0;",
        "  " & inner_loop_label & ":"
      );

      code = match (arg2)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      if maybe_surr_var != nothing
        code = (code | "    " & native_var_ref_name(value(maybe_surr_var)) & " = " & surrs_var & "[" & idx_var & "];");

      code = code & indent_lines(native_code(body, block_id), 2);

      code = (code |
        "    " & idx_var & "++;",
        "    if (" & idx_var & " < " & array_var & ".size)",
        "      goto " & inner_loop_label & ";",
        "}"
      );

      return code;
    }


    String* foreach_code_2(AnyTableVar table_var, MasterBinTable table, TableArgStatus arg1, Int32Var arg2, Maybe[Int32Var] maybe_surr_var, Instr* body, Maybe[Nat] block_id) {
      table_var_str = native_var_ref_name(table_var);
      arg2_str = native_var_ref_name(arg2);

      unique_id = printed(new_unique_id(:unused));
      buffer_var = "buffer_" & unique_id;
      surrs_var = "surrs_array_" & unique_id;
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      inner_loop_label = "label_" & unique_id;

      if maybe_surr_var != nothing {
        restrict_method_name = "master_bin_table_range_restrict_2_with_surrs";
        buffer_size_str = "128";
      }
      else {
        restrict_method_name = "master_bin_table_range_restrict_2";
        buffer_size_str = "64";
      }

      restrict_args = (table_var, arg2, read_var, buffer_var, 64);
      restrict_call = native_call(restrict_method_name, restrict_args);

      code = (
        "uint32 " & buffer_var & "[" & buffer_size_str & "];",
        "uint32 " & count_var & " = master_bin_table_count_2(" & table_var_str & ", " & arg2_str & ");",
        "uint32 " & read_var & " = 0;",
        "while (" & read_var & " < " & count_var & ") {",
        "  UINT32_ARRAY " & array_var & " = " & restrict_call,
        "  " & read_var & " += " & array_var & ".size;",
        "  uint32 *" & surrs_var & " = " & array_var & ".array + " & array_var & ".offset;" if maybe_surr_var != nothing,
        "  uint32 " & idx_var & " = 0;",
        "  " & inner_loop_label & ":"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      if maybe_surr_var != nothing
        code = (code | "    " & native_var_ref_name(value(maybe_surr_var)) & " = " & surrs_var & "[" & idx_var & "];");

      code = code & indent_lines(native_code(body, block_id), 2);

      code = (code |
        "    " & idx_var & "++;",
        "    if (" & idx_var & " < " & array_var & ".size)",
        "      goto " & inner_loop_label & ";",
        "}"
      );

      return code;
    }


    String* foreach_code(AnyTableVar table_var, MasterBinTable table, TableArgStatus arg1, TableArgStatus arg2, Maybe[Int32Var] maybe_surr_var, Instr* body, Maybe[Nat] block_id) {
      table_var_str = native_var_ref_name(table_var);

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      slots_var = "slots_" & unique_id;
      slot_var = "slot_" & unique_id;
      surr_var = if maybe_surr_var != nothing then native_var_ref_name(value(maybe_surr_var)) else "surr_var_" & unique_id;

      code = (
        "uint32 " & count_var & " = master_bin_table_size(" & table_var_str & ");",
        "uint32 " & read_var & " = 0;",
        "uint64 *" & slots_var & " = master_bin_table_slots(" & table_var_str & ");",
        "for (uint32 " & surr_var & "=0 ; " & read_var & " < " & count_var & " ; " & surr_var & "++) {",
        "  uint64 " & slot_var & " = " & slots_var & "[" & surr_var & "];",
        "  if (!master_bin_table_slot_is_empty(" & slot_var & ")) {",
        "    " & read_var & "++;"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = unpack_arg1(" & slot_var & ");"),
        ignored   = code,
        bound()   = undefined;

      code = match (arg2)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = unpack_arg2(" & slot_var & ");"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(native_code(body, block_id), 2);

      code = (code | "  }", "}");

      return code;
    }
  }


  String* native_foreach_code(SlaveTernTableIter iter, Instr* body, Maybe[Nat] block_id) {
    body_text = native_code(body, block_id);
    arg1, arg2 = iter.args;
    return match (arg1, arg2)
      bound(v?),  _         = native_bin_table_foreach_code_1(iter.table_var, v, arg2, false, body_text),
      _,          bound(v?) = native_bin_table_foreach_code_2(iter.table_var, arg1, v, body_text, "bin_table_count_2", "bin_table_range_restrict_2"),
      _,          _         = native_bin_table_foreach_code(iter.table_var, arg1, arg2, false, body_text);
  }


  String* native_foreach_code(TernTableIter iter, Instr* body, Maybe[Nat] block_id) {
    body_text = native_code(body, block_id);
    arg1, arg2, arg3 = iter.args;
    return match (arg1, arg2, arg3)
      bound(v1?),   bound(v2?),   _           = native_foreach_code_12(iter.table_var, v1, v2, arg3, body_text),
      bound(v1?),   _,            bound(v3?)  = native_foreach_code_13(iter.table_var, v1, v3, arg2, body_text),
      _,            bound(v2?),   bound(v3?)  = native_foreach_code_23(iter.table_var, v2, v3, arg1, body_text),
      bound(v1?),   _,            _           = native_foreach_code_1(iter.table_var, v1, arg2, arg3, body_text),
      _,            bound(v2?),   _           = native_foreach_code_2(iter.table_var, v2, arg1, arg3, body_text),
      _,            _,            bound(v3?)  = native_foreach_code_3(iter.table_var, v3, arg1, arg2, body_text),
      _,            _,            _           = native_foreach_code(iter.table_var, arg1, arg2, arg3, body_text);


    String* native_foreach_code_12(AnyTableVar table_var, Int32Var var1, Int32Var var2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "uint32 " & native_call(assoc_surr_var, "master_bin_table_lookup_surr", (master_table_var_str, var1, var2)),
        "if (" & assoc_surr_var & " != 0xFFFFFFFF) {",
        "  uint32 " & count_var & " = bin_table_count_1(" & slave_table_var_str & ", " & assoc_surr_var & ");",
        "  uint32 " & read_var & " = 0;",
        "  while (" & read_var & " < " & count_var & ") {",
        "    uint32 " & buffer_var & "[64];",
        "    UINT32_ARRAY " & native_call(array_var, "bin_table_range_restrict_1", (slave_table_var_str, assoc_surr_var, read_var, buffer_var, 64)),
        "    " & read_var & " += " & array_var & ".size;",
        "    uint32 " & idx_var & " = 0;",
        "    " & label & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "      " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 3);

      code = (code |
        "      " & idx_var & "++;",
        "      if (" & idx_var & " < " & array_var & ".size)",
        "        goto " & label & ";",
        "  }",
        "}"
      );

      return code;
    }


    String* native_foreach_code_13(AnyTableVar table_var, Int32Var var1, Int32Var var3, TableArgStatus arg2, String* body_text) {
      table_var_str = native_var_ref_name(table_var);

      unique_id = printed(new_unique_id(:unused));

      iter_var = "iter_" & unique_id;
      iter_var_ptr = "&" & iter_var;
      batch_size_var = "batch_size_" & unique_id;
      arg2s_var = "arg2s_" & unique_id;
      idx_var = "idx_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "TERN_TABLE_ITER_13_OR_23 " & iter_var & ";",
        native_call("tern_table_iter_13_init", (table_var_str, iter_var_ptr, var1, var3)),
        "while (!tern_table_iter_13_done(" & iter_var_ptr & ")) {",
        "  uint32 " & arg2s_var & "[64];",
        "  uint32 " & native_call(batch_size_var, "tern_table_iter_13_read", (table_var_str, iter_var_ptr, var1, var3, arg2s_var, 64)),
        "  uint32 " & idx_var & " = 0;",
        "  " & label & ":"
      );

      code = match (arg2)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & arg2s_var & "[" & idx_var & "];"),
        ignored   = code;

      code = code & indent_lines(body_text, 2);

      code = (
        code |
        "    if (++" & idx_var & " < " & batch_size_var & ")",
        "      goto " & label & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_23(AnyTableVar table_var, Int32Var var2, Int32Var var3, TableArgStatus arg1, String* body_text) {
      table_var_str = native_var_ref_name(table_var);

      unique_id = printed(new_unique_id(:unused));

      iter_var = "iter_" & unique_id;
      iter_var_ptr = "&" & iter_var;
      batch_size_var = "batch_size_" & unique_id;
      arg1s_var = "arg1s_" & unique_id;
      idx_var = "idx_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "TERN_TABLE_ITER_13_OR_23 " & iter_var & ";",
        native_call("tern_table_iter_23_init", (table_var_str, iter_var_ptr, var2, var3)),
        "while (!tern_table_iter_23_done(" & iter_var_ptr & ")) {",
        "  uint32 " & arg1s_var & "[64];",
        "  uint32 " & native_call(batch_size_var, "tern_table_iter_23_read", (table_var_str, iter_var_ptr, var2, var3, arg1s_var, 64)),
        "  uint32 " & idx_var & " = 0;",
        "  " & label & ":"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & arg1s_var & "[" & idx_var & "];"),
        ignored   = code;

      code = code & indent_lines(body_text, 2);

      code = (
        code |
        "    if (++" & idx_var & " < " & batch_size_var & ")",
        "      goto " & label & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_1(AnyTableVar table_var, Int32Var var1, TableArgStatus arg2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));

      count_1_var = "count_1_" & unique_id;
      read_1_var = "read_1_" & unique_id;
      buffer_1_var = "buffer_1_" & unique_id;
      array_1_var = "array_1_" & unique_id;
      idx_1_var = "idx_1_" & unique_id;
      surrs_1_var = "surrs_1_" & unique_id;

      count_3_var = "count_3_" & unique_id;
      read_3_var = "read_3_" & unique_id;
      buffer_3_var = "buffer_3_" & unique_id;
      array_3_var = "array_3_" & unique_id;
      idx_3_var = "idx_3_" & unique_id;
      surrs_3_var = "surrs_3_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label_1 = "label_1_" & unique_id;
      outer_label = "outer_label_" & unique_id;
      inner_label = "inner_label_" & unique_id;

      code = (
        "uint32 " & native_call(count_1_var, "master_bin_table_count_1", (master_table_var_str, var1)),
        "uint32 " & read_1_var & " = 0;",
        "while (" & read_1_var & " < " & count_1_var & ") {",
        "  uint32 " & buffer_1_var & "[128];",
        "  UINT32_ARRAY " & native_call(array_1_var, "master_bin_table_range_restrict_1_with_surrs", (master_table_var_str, var1, read_1_var, buffer_1_var, 64)),
        "  " & read_1_var & " += " & array_1_var & ".size;",
        "  uint32 *" & surrs_1_var & " = " & array_1_var & ".array + " & array_1_var & ".offset;",
        "  uint32 " & idx_1_var & " = 0;",
        "  " & label_1 & ":",
        "    uint32 " & assoc_surr_var & " = " & surrs_1_var & "[" & idx_1_var & "];"
      );

      code = match (arg2)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & array_1_var & ".array[" & idx_1_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = (
        code |
        "    uint32 " & native_call(count_3_var, "bin_table_count_1", (slave_table_var_str, assoc_surr_var)),
        "    uint32 " & read_3_var & " = 0;",
        "    " & outer_label & ":",
        "      uint32 " & buffer_3_var & "[64];",
        "      UINT32_ARRAY " & native_call(array_3_var, "bin_table_range_restrict_1", (slave_table_var_str, assoc_surr_var, read_3_var, buffer_3_var, 64)),
        "      " & read_3_var & " += " & array_3_var & ".size;",
        "      uint32 " & idx_3_var & " = 0;",
        "      " & inner_label & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_3_var & ".array[" & idx_3_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 4);

      code = (code |
        "        if (++" & idx_3_var & " < " & array_3_var & ".size)",
        "          goto " & inner_label & ";",
        "      if (" & read_3_var & " < " & count_3_var & ")",
        "        goto " & outer_label & ";",
        "    if (++" & idx_1_var & " < " & array_1_var & ".size)",
        "      goto " & label_1 & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_2(AnyTableVar table_var, Int32Var var2, TableArgStatus arg1, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));

      count_2_var = "count_2_" & unique_id;
      read_2_var = "read_2_" & unique_id;
      buffer_2_var = "buffer_2_" & unique_id;
      array_2_var = "array_2_" & unique_id;
      idx_2_var = "idx_2_" & unique_id;
      surrs_2_var = "surrs_2_" & unique_id;

      count_3_var = "count_3_" & unique_id;
      read_3_var = "read_3_" & unique_id;
      buffer_3_var = "buffer_3_" & unique_id;
      array_3_var = "array_3_" & unique_id;
      idx_3_var = "idx_3_" & unique_id;
      surrs_3_var = "surrs_3_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      arg1_var, arg1_var_type_if_needed = match (arg1)
        read(v?)  = (native_var_ref_name(v), ""),
        ignored   = ("arg1_" & unique_id, "uint32 ");

      label_2 = "label_2_" & unique_id;
      outer_label = "outer_label_" & unique_id;
      inner_label = "inner_label_" & unique_id;

      code = (
        "uint32 " & native_call(count_2_var, "master_bin_table_count_2", (master_table_var_str, var2)),
        "uint32 " & read_2_var & " = 0;",
        "while (" & read_2_var & " < " & count_2_var & ") {",
        "  uint32 " & buffer_2_var & "[64];",
        "  UINT32_ARRAY " & native_call(array_2_var, "master_bin_table_range_restrict_2", (master_table_var_str, var2, read_2_var, buffer_2_var, 64)),
        "  " & read_2_var & " += " & array_2_var & ".size;",
        "  uint32 " & idx_2_var & " = 0;",
        "  " & label_2 & ":",
        "    " & arg1_var_type_if_needed & arg1_var & " = " & array_2_var & ".array[" & idx_2_var & "];",
        "    uint32 " & native_call(assoc_surr_var, "master_bin_table_lookup_surr", (master_table_var_str, arg1_var, var2)),
        "    uint32 " & native_call(count_3_var, "bin_table_count_1", (slave_table_var_str, assoc_surr_var)),
        "    uint32 " & read_3_var & " = 0;",
        "    " & outer_label & ":",
        "      uint32 " & buffer_3_var & "[64];",
        "      UINT32_ARRAY " & native_call(array_3_var, "bin_table_range_restrict_1", (slave_table_var_str, assoc_surr_var, read_3_var, buffer_3_var, 64)),
        "      " & read_3_var & " += " & array_3_var & ".size;",
        "      uint32 " & idx_3_var & " = 0;",
        "      " & inner_label & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_3_var & ".array[" & idx_3_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 4);

      code = (code |
        "        if (++" & idx_3_var & " < " & array_3_var & ".size)",
        "          goto " & inner_label & ";",
        "      if (" & read_3_var & " < " & count_3_var & ")",
        "        goto " & outer_label & ";",
        "    if (++" & idx_2_var & " < " & array_2_var & ".size)",
        "      goto " & label_2 & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_3(AnyTableVar table_var, Int32Var var3, TableArgStatus arg1, TableArgStatus arg2, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "uint32 " & native_call(count_var, "bin_table_count_2", (slave_table_var_str, var3)),
        "uint32 " & read_var & " = 0;",
        "while (" & read_var & " < " & count_var & ") {",
        "  uint32 " & buffer_var & "[64];",
        "  UINT32_ARRAY " & native_call(array_var, "bin_table_range_restrict_2", (slave_table_var_str, var3, read_var, buffer_var, 64)),
        "  " & read_var & " += " & array_var & ".size;",
        "  uint32 " & idx_var & " = 0;",
        "  " & label & ":",
        "    uint32 " & assoc_surr_var & " = " & array_var & ".array[" & idx_var & "];"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_1", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = match (arg2)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_2", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text);

      code = (code |
        "    " & idx_var & "++;",
        "    if (" & idx_var & " < " & array_var & ".size)",
        "      goto " & label & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code(AnyTableVar table_var, TableArgStatus arg1, TableArgStatus arg2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      count_1_var = "count_1_" & unique_id;
      read_1_var = "read_1_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label_1 = "label_1_" & unique_id;
      label_2 = "label_2_" & unique_id;

      code = (
        "uint32 " & native_call(count_var, "bin_table_size", (slave_table_var_str)),
        "uint32 " & read_var & " = 0;",
        "for (uint32 " & assoc_surr_var & "=0 ; " & read_var & " < " & count_var & " ; " & assoc_surr_var & "++) {",
        "  uint32 " & native_call(count_1_var, "bin_table_count_1", (slave_table_var_str, assoc_surr_var)),
        "  if (" & count_1_var & " > 0) {",
        "    " & read_var & " += " & count_1_var & ";"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_1", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = match (arg2)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_2", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = (
        code |
        "    uint32 " & buffer_var & "[64];",
        "    uint32 " & read_1_var & " = 0;",
        "    " & label_1 & ":",
        "      UINT32_ARRAY " & array_var & " = bin_table_range_restrict_1(" & slave_table_var_str & ", " & assoc_surr_var & ", " & read_1_var & ", " & buffer_var & ", 64);",
        "      " & read_1_var & " += " & array_var & ".size;",
        "      uint32 " & idx_var & " = 0;",
        "      " & label_2 & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 4);

      code = (code |
        "        " & idx_var & "++;",
        "        if (" & idx_var & " < " & array_var & ".size)",
        "          goto " & label_2 & ";",
        "      if (" & read_1_var & " < " & count_1_var & ")",
        "        goto " & label_1 & ";",
        "  }",
        "}"
      );

      return code;
    }
  }


  String* native_foreach_code(SemiSymTernTableIter iter, Instr* body, Maybe[Nat] block_id) {
    body_text = native_code(body, block_id);
    arg1, arg2, arg3 = iter.args;
    return match (arg1, arg2, arg3)
      bound(v1?),   bound(v2?),   _           = native_foreach_code_12(iter.table_var, v1, v2, arg3, body_text),
      bound(v1?),   _,            bound(v3?)  = native_foreach_code_13(iter.table_var, v1, v3, arg2, body_text),
      _,            bound(v2?),   bound(v3?)  = undefined,
      bound(v1?),   _,            _           = native_foreach_code_1(iter.table_var, v1, arg2, arg3, body_text),
      _,            bound(v2?),   _           = undefined,
      _,            _,            bound(v3?)  = native_foreach_code_3(iter.table_var, v3, arg1, arg2, body_text),
      _,            _,            _           = native_foreach_code(iter.table_var, arg1, arg2, arg3, body_text);


    String* native_foreach_code_12(AnyTableVar table_var, Int32Var var1, Int32Var var2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "uint32 " & native_call(assoc_surr_var, "sym_master_bin_table_lookup_surr", (master_table_var_str, var1, var2)),
        "if (" & assoc_surr_var & " != 0xFFFFFFFF) {",
        "  uint32 " & count_var & " = bin_table_count_1(" & slave_table_var_str & ", " & assoc_surr_var & ");",
        "  uint32 " & read_var & " = 0;",
        "  while (" & read_var & " < " & count_var & ") {",
        "    uint32 " & buffer_var & "[64];",
        "    UINT32_ARRAY " & native_call(array_var, "bin_table_range_restrict_1", (slave_table_var_str, assoc_surr_var, read_var, buffer_var, 64)),
        "    " & read_var & " += " & array_var & ".size;",
        "    uint32 " & idx_var & " = 0;",
        "    " & label & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "      " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 3);

      code = (code |
        "      " & idx_var & "++;",
        "      if (" & idx_var & " < " & array_var & ".size)",
        "        goto " & label & ";",
        "  }",
        "}"
      );

      return code;
    }


    String* native_foreach_code_13(AnyTableVar table_var, Int32Var var1, Int32Var var3, TableArgStatus arg2, String* body_text) {
      table_var_str = native_var_ref_name(table_var);

      unique_id = printed(new_unique_id(:unused));

      iter_var = "iter_" & unique_id;
      iter_var_ptr = "&" & iter_var;
      batch_size_var = "batch_size_" & unique_id;
      arg2s_var = "arg2s_" & unique_id;
      idx_var = "idx_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "TERN_TABLE_ITER_13_OR_23 " & iter_var & ";",
        native_call("tern_table_iter_13_init", (table_var_str, iter_var_ptr, var1, var3)),
        "while (!tern_table_iter_13_done(" & iter_var_ptr & ")) {",
        "  uint32 " & arg2s_var & "[64];",
        "  uint32 " & native_call(batch_size_var, "tern_table_iter_13_read", (table_var_str, iter_var_ptr, var1, var3, arg2s_var, 64)),
        "  uint32 " & idx_var & " = 0;",
        "  " & label & ":"
      );

      code = match (arg2)
        read(v?)  = (code | "    " & native_var_ref_name(v) & " = " & arg2s_var & "[" & idx_var & "];"),
        ignored   = code;

      code = code & indent_lines(body_text, 2);

      code = (
        code |
        "    if (++" & idx_var & " < " & batch_size_var & ")",
        "      goto " & label & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_1(AnyTableVar table_var, Int32Var var1, TableArgStatus arg2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));

      count_1_var = "count_1_" & unique_id;
      read_1_var = "read_1_" & unique_id;
      buffer_1_var = "buffer_1_" & unique_id;
      array_1_var = "array_1_" & unique_id;
      idx_1_var = "idx_1_" & unique_id;

      arg_2_var = match (arg2)
        read(v?)  = native_var_ref_name(v),
        ignored   = "arg_2_" & unique_id,
        bound()   = undefined;

      count_3_var = "count_3_" & unique_id;
      read_3_var = "read_3_" & unique_id;
      buffer_3_var = "buffer_3_" & unique_id;
      array_3_var = "array_3_" & unique_id;
      idx_3_var = "idx_3_" & unique_id;
      surrs_3_var = "surrs_3_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label_1 = "label_1_" & unique_id;
      outer_label = "outer_label_" & unique_id;
      inner_label = "inner_label_" & unique_id;

      code = (
        "uint32 " & native_call(count_1_var, "sym_master_bin_table_count", (master_table_var_str, var1)),
        "uint32 " & read_1_var & " = 0;",
        "while (" & read_1_var & " < " & count_1_var & ") {",
        "  uint32 " & buffer_1_var & "[64];",
        "  UINT32_ARRAY " & native_call(array_1_var, "sym_master_bin_table_range_restrict", (master_table_var_str, var1, read_1_var, buffer_1_var, 64)),
        "  " & read_1_var & " += " & array_1_var & ".size;",
        "  uint32 " & idx_1_var & " = 0;",
        "  " & label_1 & ":",
        "    uint32 " & arg_2_var & " = " & array_1_var & ".array[" & idx_1_var & "];",
        "    uint32 " & native_call(assoc_surr_var, "sym_master_bin_table_lookup_surr", (master_table_var_str, var1, arg_2_var))
      );

      code = (
        code |
        "    uint32 " & native_call(count_3_var, "bin_table_count_1", (slave_table_var_str, assoc_surr_var)),
        "    uint32 " & read_3_var & " = 0;",
        "    " & outer_label & ":",
        "      uint32 " & buffer_3_var & "[64];",
        "      UINT32_ARRAY " & native_call(array_3_var, "bin_table_range_restrict_1", (slave_table_var_str, assoc_surr_var, read_3_var, buffer_3_var, 64)),
        "      " & read_3_var & " += " & array_3_var & ".size;",
        "      uint32 " & idx_3_var & " = 0;",
        "      " & inner_label & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_3_var & ".array[" & idx_3_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 4);

      code = (code |
        "        if (++" & idx_3_var & " < " & array_3_var & ".size)",
        "          goto " & inner_label & ";",
        "      if (" & read_3_var & " < " & count_3_var & ")",
        "        goto " & outer_label & ";",
        "    if (++" & idx_1_var & " < " & array_1_var & ".size)", ## BUG BUG BUG: THIS BUG IS ALMOST SURELY REPEATED ELSEWHERE
        "      goto " & label_1 & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code_3(AnyTableVar table_var, Int32Var var3, TableArgStatus arg1, TableArgStatus arg2, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label = "label_" & unique_id;

      code = (
        "uint32 " & native_call(count_var, "bin_table_count_2", (slave_table_var_str, var3)),
        "uint32 " & read_var & " = 0;",
        "while (" & read_var & " < " & count_var & ") {",
        "  uint32 " & buffer_var & "[64];",
        "  UINT32_ARRAY " & native_call(array_var, "bin_table_range_restrict_2", (slave_table_var_str, var3, read_var, buffer_var, 64)),
        "  " & read_var & " += " & array_var & ".size;",
        "  uint32 " & idx_var & " = 0;",
        "  " & label & ":",
        "    uint32 " & assoc_surr_var & " = " & array_var & ".array[" & idx_var & "];"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_1", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = match (arg2)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_2", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 2);

      code = (code |
        "    " & idx_var & "++;",
        "    if (" & idx_var & " < " & array_var & ".size)",
        "      goto " & label & ";",
        "}"
      );

      return code;
    }


    String* native_foreach_code(AnyTableVar table_var, TableArgStatus arg1, TableArgStatus arg2, TableArgStatus arg3, String* body_text) {
      base_table_var_str = native_var_ref_name(table_var);
      slave_table_var_str = base_table_var_str & ".slave";
      master_table_var_str = base_table_var_str & ".master";

      unique_id = printed(new_unique_id(:unused));
      count_var = "count_" & unique_id;
      read_var = "read_" & unique_id;
      count_1_var = "count_1_" & unique_id;
      read_1_var = "read_1_" & unique_id;
      buffer_var = "buffer_" & unique_id;
      array_var = "array_" & unique_id;
      idx_var = "idx_" & unique_id;

      assoc_surr_var = "assoc_surr_" & unique_id;

      label_1 = "label_1_" & unique_id;
      label_2 = "label_2_" & unique_id;

      code = (
        "uint32 " & native_call(count_var, "bin_table_size", (slave_table_var_str)),
        "uint32 " & read_var & " = 0;",
        "for (uint32 " & assoc_surr_var & "=0 ; " & read_var & " < " & count_var & " ; " & assoc_surr_var & "++) {",
        "  uint32 " & native_call(count_1_var, "bin_table_count_1", (slave_table_var_str, assoc_surr_var)),
        "  if (" & count_1_var & " > 0) {",
        "    " & read_var & " += " & count_1_var & ";"
      );

      code = match (arg1)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_1", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = match (arg2)
        read(v?)  = (code | "    " & native_call(v, "master_bin_table_get_arg_2", (master_table_var_str, assoc_surr_var))),
        ignored   = code,
        bound()   = undefined;

      code = (
        code |
        "    uint32 " & buffer_var & "[64];",
        "    uint32 " & read_1_var & " = 0;",
        "    " & label_1 & ":",
        "      UINT32_ARRAY " & array_var & " = bin_table_range_restrict_1(" & slave_table_var_str & ", " & assoc_surr_var & ", " & read_1_var & ", " & buffer_var & ", 64);",
        "      " & read_1_var & " += " & array_var & ".size;",
        "      uint32 " & idx_var & " = 0;",
        "      " & label_2 & ":"
      );

      code = match (arg3)
        read(v?)  = (code | "        " & native_var_ref_name(v) & " = " & array_var & ".array[" & idx_var & "];"),
        ignored   = code,
        bound()   = undefined;

      code = code & indent_lines(body_text, 4);

      code = (code |
        "        " & idx_var & "++;",
        "        if (" & idx_var & " < " & array_var & ".size)",
        "          goto " & label_2 & ";",
        "      if (" & read_1_var & " < " & count_1_var & ")",
        "        goto " & label_1 & ";",
        "  }",
        "}"
      );

      return code;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////

// String native_unbound_table_arg_name(TableArgStatus arg, String default) =
//   read(v?)