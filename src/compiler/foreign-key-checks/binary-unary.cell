implicit table_var_aux_vars_map : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Maybe[Instr*] binary_unary_foreign_key_check_code(<0..1> origin_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type, Bool insertion_checked, Bool deletion_checked) {
    tables = effects_info.tables;

    foreign_key = foreign_key(origin, target, :binary_unary(origin_col_idx));
    err_rec_instr = record_foreign_key_violation(foreign_key, origin_type, target_type);

    return nothing if tables(origin, _) and |tables(origin)| != 1;

    // First we check if there's a deletion from the target, which is the most complicated case
    if tables(target, _) {
      target_effects_info = tables(target);
      return nothing if |target_effects_info| != 1;
      target_instr_id, target_action = only_pair(target_effects_info);
      assert target_action != :update; // The target is a unary table, so it's only insertions or deletions
      if is_deletion(target_action) {
        ## IS THERE ANYTHING THAT SHOULD BE DONE IF THE FOREIGN KEY IS NOT DELETE-CHECKED?
        if deletion_checked {
          check_expr = binary_unary_foreign_key_target_deletion_check_expr(origin_col_idx, origin, target, origin_type, target_type);
          return just((do_if(check_expr, (err_rec_instr, ret_val(false)))));
        }
      }
    }

    // No deletion from the target
    if tables(origin, _) {
      origin_effects_info = tables(origin);
      return nothing if |origin_effects_info| != 1;
      origin_instr_id, origin_action = only_pair(origin_effects_info);
      if origin_action == :insertion {
        if insertion_checked {
          check_expr = binary_unary_foreign_key_origin_insertion_check_expr(origin_col_idx, origin, target, origin_type, target_type);
          return just((do_if(check_expr, (err_rec_instr, ret_val(false)))));
        }
      }
      else if origin_action == :update {
        check_expr = binary_unary_foreign_key_origin_update_check_expr(origin_col_idx, origin, target, origin_type, target_type);
        return just((do_if(check_expr, (err_rec_instr, ret_val(false)))));
      }
    }

    return just(());
  }

  //////////////////////////////////////////////////////////////////////////////
  //////// Origin-based checks when there's no deletion from the target ////////
  //////////////////////////////////////////////////////////////////////////////

  BoolExpr binary_unary_foreign_key_origin_update_check_expr(Nat origin_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type) {
    ## BUG BUG BUG: WHAT IF THE UPDATE INVOLVES AN IMPLICIT DELETION ON THE COLUMN THAT IS NOT INVOLVED IN THE FOREIGN KEY?
    return binary_unary_foreign_key_origin_insertion_check_expr(origin_col_idx, origin, target, origin_type, target_type);
  }


  BoolExpr binary_unary_foreign_key_origin_insertion_check_expr(Nat origin_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type) {
    origin_aux_vars, maybe_origin_status_var = table_var_aux_vars_map(origin);
    origin_aux_var = cast_loc_int32_var(origin_aux_vars(origin_col_idx));
    check_expr = neg(unary_table_aux_contains(target, target_type, origin_aux_var));
    check_expr = and_then(value(maybe_origin_status_var), check_expr) if maybe_origin_status_var != nothing;
    return check_expr;
  }

  //////////////////////////////////////////////////////////////////////////////
  //////// Target-based checks when there is a deletion from the target ////////
  //////////////////////////////////////////////////////////////////////////////

  BoolExpr binary_unary_foreign_key_target_deletion_check_expr(Nat origin_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type) {
    target_del_args, maybe_target_status_var = table_var_aux_vars_map(target);
    target_del_arg = cast_opt_loc_int32_var(only_unsafe(target_del_args));

    match_args = (if i == origin_col_idx and target_del_arg != :none then just(target_del_arg) else nothing : i < 2);
    check_expr = neg(bin_table_aux_contains(origin, origin_type, match_args));

    if maybe_target_status_var != nothing {
      target_status_var = value(maybe_target_status_var);
      check_expr = and_then(target_status_var, check_expr);
    }

    return check_expr;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Int32Expr simplify_post_update_count_expr(Int32Expr expr) {
  addends = flatten_add32_exprs(expr);
  if |addends| > 1 {
    conds = [c : a <- addends, if32(c?, _, 0) ?= a];
    if |conds| == 1 {
      cond = only(conds);
      then_exprs = (match (a) if32(_, v?, 0) = v, _ = a : a <- addends);
      else_exprs = join((match (a) if32() = (),  _ = (a) : a <- addends));
      if then_exprs != () {
        then_expr = add32(then_exprs);
        if else_exprs != () {
          else_expr = add32(else_exprs);

          maybe_eq_vars = match (cond)
            are_eq(int_obj(upcast_int32(ivar32() v1?)), int_obj(upcast_int32(ivar32() v2?))) = just((v1, v2)),
            _                                                                                = nothing;
          if maybe_eq_vars != nothing {
            var1, var2 = value(maybe_eq_vars);
            then_exprs = (cast_int32_expr(replace_loc_int32_var(e, var1, var2)) : e <- then_exprs);
            then_exprs = remove_expr_pairs_that_cancel_out(then_exprs);
            then_expr = if then_exprs != () then add32(then_exprs) else 0;
          }

          return if32(cond, then_expr, else_expr);
        }
        else
          return if32(cond, then_expr, 0);
      }
      else {
        else_expr = add32(nonempty(else_exprs));
        return if32(neg(cond), else_expr, 0);
      }
    }
  }

  return expr;


  Int32Expr+ flatten_add32_exprs(Int32Expr expr) =
  add32(e1?, e2?)     = nonempty(flatten_add32_exprs(e1) & flatten_add32_exprs(e2)),
  _                   = (expr);


  AnyTypeExpr replace_loc_int32_var(AnyTypeExpr expr, LocInt32Var var_to_replace, LocInt32Var replacement_var) =
    ivar32()  = if expr == var_to_replace then replacement_var else expr,
    _         = rewrite_nested(expr, replace_loc_int32_var($, var_to_replace, replacement_var));


  Int32Expr* remove_expr_pairs_that_cancel_out(Int32Expr* exprs) {
    for expr @ i <- exprs {
      neg_expr = minus32(expr);
      for j = i + 1 .. |exprs|
        if exprs(j) == neg_expr {
          reduced_exprs = (e : e @ k <- exprs, k != i and k != j);
          return remove_expr_pairs_that_cancel_out(reduced_exprs);
        }
    }
    return exprs;
  }
}
