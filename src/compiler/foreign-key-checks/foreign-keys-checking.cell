implicit block : StaticBlock, table_var_aux_vars_map  : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Instr* foreign_keys_checking_code([TableVar] opt_table_vars, [TableVar] non_opt_table_vars) {
    assert disjoint(opt_table_vars, non_opt_table_vars);

    opt_foreign_keys = [];
    non_opt_foreign_keys = [];
    for key _ <- block.foreign_keys {
      origin = key.origin;
      target = key.target;

      // If one of the two tables is optimized, the other must be either optimized or left untouched
      assert not (in(origin, opt_foreign_keys) and in(target, non_opt_foreign_keys));
      assert not (in(origin, non_opt_foreign_keys) and in(target, opt_foreign_keys));

      if in(origin, opt_table_vars) or in(target, opt_table_vars)
        opt_foreign_keys = _insert_(opt_foreign_keys, key);

      if in(origin, non_opt_table_vars) or in(target, non_opt_table_vars)
        non_opt_foreign_keys = _insert_(non_opt_foreign_keys, key);
    }

    code = ();

    if opt_foreign_keys != [] {
      code = (code | :empty_line, comment("Checking foreign keys (optimized)"));
      for key <- opt_foreign_keys {
        info = block.foreign_keys(key);
        maybe_foreign_key_check_code = foreign_key_check_code(key, info.insertion_checked, info.deletion_checked);
        code = (code | :empty_line, comment(block_foreign_key_user_repr(key)));
        code = code & value_unsafe(maybe_foreign_key_check_code);
      }
    }

    if non_opt_foreign_keys != [] {
      code = (code | :empty_line, comment("Checking foreign keys (non-optimized)"));

      for key <- non_opt_foreign_keys {
        origin = key.origin;
        target = key.target;

        origin_type = block.tables(origin);
        target_type = block.tables(target);

        needs_comment = true;
        comment = comment(block_foreign_key_user_repr(key));

        if effects_info.tables(origin, _) {
          origin_instr_id, origin_action = only_pair(effects_info.tables(origin));
          if origin_action == :insertion or origin_action == :update {
            check_instr = check_foreign_key(key, origin_type, target_type, :forward);
            code = (code | :empty_line, comment, check_instr);
            needs_comment = false;
          }
        }

        if effects_info.tables(target, _) {
          target_instr_id, target_action = only_pair(effects_info.tables(target));
          if target_action == :update or is_deletion(target_action) {
            code = (code | :empty_line, comment) if needs_comment;
            check_instr = check_foreign_key(key, origin_type, target_type, :backward);
            code = (code | check_instr);
          }
        }
      }
    }

    return code;
  }


  Maybe[Instr*] foreign_key_check_code(BlockForeignKey key, Bool insertion_checked, Bool deletion_checked) {
    origin = key.origin;
    target = key.target;

    origin_type = block.tables(origin);
    target_type = block.tables(target);

    code = match (key.type)
      binary_unary(i?)      = binary_unary_foreign_key_check_code(i, origin, target, origin_type, target_type, insertion_checked, deletion_checked),
      _                     = nothing;

    return code;
  }
}

implicit block : StaticBlock {
  Bool foreign_key_checking_can_be_optimized(BlockForeignKey key) {
    return match (key.type)
      binary_unary()    = true,
      _                 = false;
  }
}


//   BoolExpr foreign_key_forward_check_expr(BlockForeignKey key) {
//     origin = key.origin;
//     target = key.target;

//     origin_type = block.tables(origin);
//     target_type = block.tables(target);
//     origin_aux_vars, maybe_origin_status_var = table_var_aux_vars_map(origin);

//     check_expr = base_check_expr(key.type, origin_type, origin_aux_vars, target, target_type);

//     if table_var_aux_vars_map(target, _) {
//       target_aux_vars, maybe_target_status_var = table_var_aux_vars_map(target);

//       extra_check = extra_check_expr(key.type, origin_type, origin_aux_vars, target_aux_vars, maybe_target_status_var, target, target_type);

//       if maybe_target_status_var != nothing {
//         target_status_var = value(maybe_target_status_var);
//         extra_check = or_else(neg(target_status_var), extra_check);
//       }

//       check_expr = and(check_expr, extra_check);
//     }

//     if maybe_origin_status_var != nothing {
//       origin_status_var = value(maybe_origin_status_var);
//       check_expr = and_then(origin_status_var, check_expr);
//     }

//     return check_expr;
//   }


//   BoolExpr std_base_check_expr(ForeignKeyType key_type, OptAuxTableVar+ origin_aux_vars, TableVar target, AnyTable target_type, AnyTable origin_type) {
//     assert not origin_type :: <SlaveTernTable, SlaveColumn>;

//     args_set = match (key_type)
//       unary_unary             = ((just(cast_int32_var(origin_aux_vars(0))))),
//       binary_unary(i?)        |
//       ternary_unary(i?)       = ((just(cast_int32_var(origin_aux_vars(i))))),
//       ternary_binary          = ((just(cast_int32_var(origin_aux_vars(0))), just(cast_int32_var(origin_aux_vars(1))))),
//       sym_binary_unary        |
//       sym_ternary_unary_12    = ((just(cast_int32_var(origin_aux_vars(j)))) : j < 2),
//       sym_ternary_unary_3     = ((just(cast_int32_var(origin_aux_vars(2))))),
//       ## BUG BUG BUG: ASSUMING THAT THE TWO SYMMETRIC SURROGATES HAVE BEEN ORDERED. THIS IS CURRENTLY NOT TRUE
//       ## IMPLEMENT IT AND ADD A DEBUG MODE CHECK TO VERIFY IT
//       sym_ternary_sym_binary  = ((just(cast_int32_var(origin_aux_vars(0))), just(cast_int32_var(origin_aux_vars(1))))),

//       unary_binary()          |
//       unary_ternary()         |
//       binary_ternary          |
//       unary_sym_binary        |
//       unary_sym_ternary_12    |
//       unary_sym_ternary_3     |
//       sym_binary_sym_ternary  = undefined;

//     return neg(and((table_contains(target, target_type, as) : as <- args_set)));
//   }


//   BoolExpr std_extra_check_expr(ForeignKeyType key_type, OptAuxTableVar+ origin_aux_vars, OptAuxTableVar+ target_aux_vars, TableVar target, AnyTable target_type, AnyTable origin_type) {
//     neg_extra_check = match (key_type)
//       unary_unary             = are_eq(cast_int32_var(origin_aux_vars(0)), cast_int32_var(target_aux_vars(0))),
//       binary_unary(i?)        |
//       ternary_unary(i?)       = are_eq(cast_int32_var(origin_aux_vars(i)), cast_int32_var(target_aux_vars(0))),
//       ternary_binary          = and((are_eq(cast_int32_var(origin_aux_vars(j)), cast_int32_var(target_aux_vars(j))) : j < 2)),
//       sym_binary_unary        |
//       sym_ternary_unary_12    = or((are_eq(cast_int32_var(origin_aux_vars(j)), cast_int32_var(target_aux_vars(0))) : j < 2)),
//       sym_ternary_unary_3     = are_eq(cast_int32_var(origin_aux_vars(2)), cast_int32_var(target_aux_vars(0))),
//       ## ASSUMING THAT THE TWO SYMMETRIC SURROGATES HAVE BEEN ORDERED. THIS IS CURRENTLY NOT TRUE
//       ## IMPLEMENT IT AND ADD A DEBUG MODE CHECK TO VERIFY IT
//       sym_ternary_sym_binary  = and((are_eq(cast_int32_var(origin_aux_vars(j)), cast_int32_var(target_aux_vars(j))) : j < 2)),

//       unary_binary()          |
//       unary_ternary()         |
//       binary_ternary          |
//       unary_sym_binary        |
//       unary_sym_ternary_12    |
//       unary_sym_ternary_3     |
//       sym_binary_sym_ternary  = undefined; // Statically checked

//     return neg(neg_extra_check);
//   }


//   BoolExpr slave_ternary_to_binary_base_check_expr(<SlaveTernTable, SlaveColumn> origin_type, OptAuxTableVar+ origin_aux_vars, TableVar target, AnyTable target_type) {
//     assert |origin_aux_vars| == 2 or |origin_aux_vars| == 3;
//     neg_expr = if |origin_aux_vars| == 3
//       then table_contains(target, target_type, (just(cast_int32_var(origin_aux_vars(i))) : i <- (0, 1)))
//       else master_bin_table_contains_assoc_surr(target, cast_master_bin_table(target_type), cast_int32_var(origin_aux_vars(0)));
//     return neg(neg_expr);
//   }


//   BoolExpr slave_ternary_to_unary_base_check_expr(SlaveTernTable origin_type, OptAuxTableVar+ origin_aux_vars, TableVar target, AnyTable target_type) {
//     assert |origin_aux_vars| == 2 or |origin_aux_vars| == 3;
//     return neg(table_contains(target, target_type, (just(cast_int32_var(last(origin_aux_vars))))));
//   }


//   BoolExpr base_check_expr(ForeignKeyType key_type, AnyTable origin_type, OptAuxTableVar+ origin_aux_vars, TableVar target, AnyTable target_type) =
//     unary_unary                                   |
//     binary_unary()                                |
//     sym_binary_unary,         _                   = std_base_check_expr(key_type, origin_aux_vars, target, target_type, origin_type),

//     ternary_binary,           table()             = std_base_check_expr(key_type, origin_aux_vars, target, target_type, origin_type),
//     ternary_binary,           slave_tern_table()  |
//                               slave_column()      = slave_ternary_to_binary_base_check_expr(origin_type, origin_aux_vars, target, target_type),


//     ternary_unary(i?),        table()             = std_base_check_expr(key_type, origin_aux_vars, target, target_type, origin_type),
//     ternary_unary(2),         slave_tern_table()  = slave_ternary_to_unary_base_check_expr(origin_type, origin_aux_vars, target, target_type),

//     sym_ternary_unary_12,     _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT
//     sym_ternary_unary_3,      _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT
//     sym_ternary_sym_binary,   _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT

//     unary_binary()                                |
//     unary_ternary()                               |
//     binary_ternary                                |
//     unary_sym_binary                              |
//     unary_sym_ternary_12                          |
//     unary_sym_ternary_3                           |
//     sym_binary_sym_ternary,   _                   = undefined; // Statically checked


//     // ## ASSUMING THAT THE TWO SYMMETRIC SURROGATES HAVE BEEN ORDERED. THIS IS CURRENTLY NOT TRUE
//     // ## IMPLEMENT IT AND ADD A DEBUG MODE CHECK TO VERIFY IT



//   BoolExpr slave_ternary_to_master_extra_check_expr(ForeignKeyType key_type, OptAuxTableVar+ origin_aux_vars, OptAuxTableVar+ target_aux_vars, TableVar target, AnyTable target_type, <SlaveTernTable, SlaveColumn> origin_type) {
//     ## BUG BUG BUG: HERE I MUST MAKE SURE THE TARGET IS THE ACTUAL MASTER. IN THEORY A SLAVE TABLE COULD HAVE A SECOND FOREIGN KEY TO A BINARY TABLE OTHER THAN ITS MASTER
//     assert target == origin_type.master;
//     assert |origin_aux_vars| == 2 or |origin_aux_vars| == 3;
//     assert |target_aux_vars| == 3;

//     if |origin_aux_vars| == 2 {
//       origin_assoc_surr_var = cast_int32_var(origin_aux_vars(0));
//       target_assoc_surr_var = cast_int32_var(target_aux_vars(2));
//       return neg(are_eq(origin_assoc_surr_var, target_assoc_surr_var));
//     }
//     else
//       return or((neg(are_eq(cast_int32_var(origin_aux_vars(i)), cast_int32_var(target_aux_vars(i)))) : i <- (0, 1)));
//   }


//   BoolExpr slave_ternary_to_unary_extra_check_expr(OptAuxTableVar+ origin_aux_vars, OptAuxTableVar+ target_aux_vars, Maybe[LocBoolVar] maybe_target_status_var, TableVar target, AnyTable target_type, SlaveTernTable origin_type) {
//     ## BUG BUG BUG: THIS FUNCTION IS PROBABLY BUGGY, BUT TRY TO TRIGGER THE BUG BEFORE TRYING TO FIX IT
//     assert |origin_aux_vars| == 2 and |target_aux_vars| == 1;

//     origin_aux_var = cast_int32_var(origin_aux_vars(1));
//     target_aux_var = cast_int32_var(target_aux_vars(0));
//     return neg(are_eq(origin_aux_var, target_aux_var));
//   }


//   BoolExpr extra_check_expr(ForeignKeyType key_type, AnyTable origin_type, OptAuxTableVar+ origin_aux_vars, OptAuxTableVar+ target_aux_vars, Maybe[LocBoolVar] maybe_target_status_var, TableVar target, AnyTable target_type) =
//     unary_unary                                   |
//     binary_unary()                                |
//     sym_binary_unary,         _                   = std_extra_check_expr(key_type, origin_aux_vars, target_aux_vars, target, target_type, origin_type),

//     ternary_binary,           table()             = std_extra_check_expr(key_type, origin_aux_vars, target_aux_vars, target, target_type, origin_type),
//     ternary_binary,           slave_tern_table()  |
//                               slave_column()      = slave_ternary_to_master_extra_check_expr(key_type, origin_aux_vars, target_aux_vars, target, target_type, origin_type),

//     ternary_unary(i?),        table()             = std_extra_check_expr(key_type, origin_aux_vars, target_aux_vars, target, target_type, origin_type),
//     ternary_unary(2),         slave_tern_table()  = slave_ternary_to_unary_extra_check_expr(origin_aux_vars, target_aux_vars, maybe_target_status_var, target, target_type, origin_type),

//     sym_ternary_unary_12,     _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT
//     sym_ternary_unary_3,      _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT
//     sym_ternary_sym_binary,   _                   = undefined, ## IMPLEMENT IMPLEMENT IMPLEMENT

//     unary_binary()                                |
//     unary_ternary()                               |
//     binary_ternary                                |
//     unary_sym_binary                              |
//     unary_sym_ternary_12                          |
//     unary_sym_ternary_3                           |
//     sym_binary_sym_ternary,   _                   = undefined; // Statically checked

//   //////////////////////////////////////////////////////////////////////////////

//   BoolExpr foreign_key_backward_check_expr(BlockForeignKey key) {
//     origin = key.origin;
//     target = key.target;

//     origin_type = block.tables(origin);
//     target_type = block.tables(target);
//     target_aux_vars, maybe_target_status_var = table_var_aux_vars_map(target);

//     check_expr = match (key.type)
//       unary_unary             = undefined,
//       unary_binary(i?)        = undefined,
//       unary_ternary(i?)       = undefined,
//       binary_unary(i?)        = binary_unary_foreign_key_backward_check_expr(i, origin, target, origin_type, target_type),
//       ternary_unary(i?)       = undefined,
//       binary_ternary          = undefined,
//       ternary_binary          = undefined,
//       unary_sym_binary        = undefined,
//       unary_sym_ternary_12    = undefined,
//       unary_sym_ternary_3     = undefined,
//       sym_binary_unary        = undefined,
//       sym_ternary_unary_12    = undefined,
//       sym_ternary_unary_3     = undefined,
//       sym_binary_sym_ternary  = undefined,
//       sym_ternary_sym_binary  = undefined;

//     // check_expr = base_check_expr(key.type, origin_type, origin_aux_vars, target, target_type);

//     // if table_var_aux_vars_map(target, _) {
//     //   target_aux_vars, maybe_target_status_var = table_var_aux_vars_map(target);

//     //   extra_check = extra_check_expr(key.type, origin_type, origin_aux_vars, target_aux_vars, maybe_target_status_var, target, target_type);

//     //   if maybe_target_status_var != nothing {
//     //     target_status_var = value(maybe_target_status_var);
//     //     extra_check = or_else(neg(target_status_var), extra_check);
//     //   }

//     //   check_expr = and(check_expr, extra_check);
//     // }

//     // if maybe_origin_status_var != nothing {
//     //   origin_status_var = value(maybe_origin_status_var);
//     //   check_expr = and_then(origin_status_var, check_expr);
//     // }

//     return check_expr;
//   }


//   BoolExpr binary_unary_foreign_key_backward_check_expr(Nat origin_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type) {
//     target_del_args, maybe_target_status_var = table_var_aux_vars_map(target);
//     target_del_arg = cast_opt_loc_int32_var(only_unsafe(target_del_args));

//     args = (if i == origin_col_idx and target_del_arg != :none then just(target_del_arg) else nothing : i < 2);
//     check_expr = table_contains(origin, origin_type, args);

//     if effects_info.tables(origin, _) {
//       instr_id, action = only_pair(effects_info.tables(origin));
//       origin_aux_vars, maybe_origin_status_var = table_var_aux_vars_map(origin);
//       assert |origin_aux_vars| == 2;

//       if action == :insertion or action == :update {
//         if target_del_arg != :none {
//           // insert origin(x, y); delete target(x')
//           // origin(x, _) -> target(x) | origin(_, y) -> target(y)
//           origin_aux_var = cast_int32_var(origin_aux_vars(origin_col_idx));
//           extra_check_expr = are_eq(origin_aux_var, target_del_arg);
//         }
//         else
//           extra_check_expr = true;

//         if maybe_origin_status_var != nothing {
//           origin_status_var = value(maybe_origin_status_var);
//           extra_check_expr = and_then(origin_status_var, extra_check_expr);
//         }

//         check_expr = or_else(check_expr, extra_check_expr);
//       }
//       else {
//         // origin_del_args = match (action) deletion(as?) = as;
//         if target_del_arg != :none {
//           checked_origin_del_arg = cast_opt_loc_int32_var(origin_aux_vars(origin_col_idx));
//           unchecked_origin_del_arg = cast_opt_loc_int32_var(origin_aux_vars(if origin_col_idx == 0 then 1 else 0));

//           if checked_origin_del_arg != :none {
//             if unchecked_origin_del_arg != :none {
//               // delete origin(x, y), delete target(x') : origin(x, _) -> target(x)
//               // delete origin(x, y), delete target(y') : origin(_, y) -> target(y)

//               args = (maybe(checked_origin_del_arg, i == origin_col_idx) : i < 2);
//               get_count_expr = get_count(origin, origin_type, args);

//               extra_check_expr = neg(are_eq(get_count_expr, 1));
//             }
//             else {
//               // delete origin(x, *), delete target(x') : origin(x, _) -> target(x)
//               // delete origin(*, y), delete target(y') : origin(_, y) -> target(y)

//               extra_check_expr = are_eq(checked_origin_del_arg, target_del_arg);
//             }
//           }
//           else {
//             if unchecked_origin_del_arg != :none {
//               // delete origin(*, y), delete target(x') : origin(x, _) -> target(x);
//               // delete origin(x, *), delete target(y') : origin(_, y) -> target(y);

//               // |origin(x', y)| == |origin(x', *)|
//               // |origin(x, y')| == |origin(*, y')|
//               args1 = (just(if i == origin_col_idx then target_del_arg else unchecked_origin_del_arg) : i < 2);
//               args2 = (maybe(target_del_arg, i == origin_col_idx) : i < 2);
//               count_expr_1 = get_count(origin, origin_type, args1);
//               count_expr_2 = get_count(origin, origin_type, args2);
//               extra_check_expr = neg(are_eq(count_expr_1, count_expr_2));
//             }
//             else {
//               // delete origin(*, *), delete target(x') : origin(x, _) -> target(x);
//               // delete origin(*, *), delete target(y') : origin(_, y) -> target(y);

//               extra_check_expr = false;
//             }
//           }
//         }
//         else {
//           // delete origin(_, _), delete target(*) : origin(x, _)

//           args = (if a != :none then just(cast_loc_int32_var(a)) else nothing : a <- origin_aux_vars);
//           extra_check_expr = are_eq(
//             get_count(origin, origin_type, args),
//             get_count(origin, origin_type, (nothing, nothing))
//           );
//         }

//         if maybe_origin_status_var != nothing {
//           origin_status_var = value(maybe_origin_status_var);
//           extra_check_expr = and_then(origin_status_var, extra_check_expr);
//         }

//         check_expr = and_then(check_expr, extra_check_expr);
//       }
//     }

//     return check_expr;
//   }

////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// Nat order(BlockForeignKey key) =
//   match (key.type)
//     unary_unary             = 0,
//     unary_binary(i?)        = i,
//     unary_ternary(i?)       = i,

//     binary_unary(i?)        = i,
//     binary_ternary          = 0,

//     ternary_unary(i?)       = i,
//     ternary_binary          = 0,

//     unary_sym_binary        = 0,
//     sym_binary_unary        = 0,

//     unary_sym_ternary_12    = 0,
//     unary_sym_ternary_3     = 2,

//     sym_ternary_unary_12    = 0,
//     sym_ternary_unary_3     = 2,

//     sym_binary_sym_ternary  = 0,
//     sym_ternary_sym_binary  = 0;
