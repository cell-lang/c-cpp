implicit block : StaticBlock, table_var_aux_vars_map  : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Instr* foreign_keys_checking_code([TableVar] opt_table_vars, [TableVar] non_opt_table_vars) {
    assert disjoint(opt_table_vars, non_opt_table_vars);

    opt_foreign_keys = [];
    non_opt_foreign_keys = [];
    for key _ <- block.foreign_keys {
      origin = key.origin;
      target = key.target;

      // If one of the two tables is optimized, the other must be either optimized or left untouched
      assert not (in(origin, opt_foreign_keys) and in(target, non_opt_foreign_keys));
      assert not (in(origin, non_opt_foreign_keys) and in(target, opt_foreign_keys));

      if in(origin, opt_table_vars) or in(target, opt_table_vars)
        opt_foreign_keys = _insert_(opt_foreign_keys, key);

      if in(origin, non_opt_table_vars) or in(target, non_opt_table_vars)
        non_opt_foreign_keys = _insert_(non_opt_foreign_keys, key);
    }

    code = ();

    if opt_foreign_keys != [] {
      code = (code | :empty_line, comment("Checking foreign keys (optimized)"));
      for key <- opt_foreign_keys {
        info = block.foreign_keys(key);
        maybe_foreign_key_check_code = foreign_key_check_code(key, info.insertion_checked, info.deletion_checked);
        code = (code | :empty_line, comment(block_foreign_key_user_repr(key)));
        code = code & value_unsafe(maybe_foreign_key_check_code);
      }
    }

    if non_opt_foreign_keys != [] {
      code = (code | :empty_line, comment("Checking foreign keys (non-optimized)"));

      for key <- non_opt_foreign_keys {
        origin = key.origin;
        target = key.target;

        origin_type = block.tables(origin);
        target_type = block.tables(target);

        info = block.foreign_keys(key);

        needs_comment = true;
        comment = comment(block_foreign_key_user_repr(key));

        if effects_info.tables(origin, _) {
          origin_instr_id, origin_action = only_pair(effects_info.tables(origin));
          if (origin_action == :insertion and info.insertion_checked) or origin_action == :update {
            check_instr = check_foreign_key(key, origin_type, target_type, :forward);
            code = (code | :empty_line, comment, check_instr);
            needs_comment = false;
          }
        }

        if effects_info.tables(target, _) {
          target_instr_id, target_action = only_pair(effects_info.tables(target));
          if target_action == :update or (is_deletion(target_action) and info.deletion_checked) {
            code = (code | :empty_line, comment) if needs_comment;
            check_instr = check_foreign_key(key, origin_type, target_type, :backward);
            code = (code | check_instr);
          }
        }
      }
    }

    return code;
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit block : StaticBlock, table_var_aux_vars_map : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Maybe[Instr*] foreign_key_check_code(BlockForeignKey key, Bool insertion_checked, Bool deletion_checked) {
    origin = key.origin;
    target = key.target;

    origin_type = block.tables(origin);
    target_type = block.tables(target);

    code = match (key.type)
      unary_binary(i?)      = unary_binary_foreign_key_check_code(i, origin, target, origin_type, target_type, insertion_checked, deletion_checked),
      binary_unary(i?)      = binary_unary_foreign_key_check_code(i, origin, target, origin_type, target_type, insertion_checked, deletion_checked),
      ternary_binary        = ternary_binary_foreign_key_check_code(origin, target, origin_type, target_type, insertion_checked, deletion_checked),
      binary_ternary        = binary_ternary_foreign_key_check_code(origin, target, origin_type, target_type, insertion_checked, deletion_checked),
      _                     = nothing;

    return code;
  }

  //////////////////////////////////////////////////////////////////////////////

  ## BAD BAD BAD: INEFFICIENT, foreign_key_check_code(..) ENDS UP BEING CALLED MULTIPLE TIMES WITH THE SAME ARGUMENTS
  Bool foreign_key_checking_can_be_optimized(BlockForeignKey key, Bool insertion_checked, Bool deletion_checked) =
    foreign_key_check_code(key, insertion_checked, deletion_checked) != nothing;
}
