implicit table_var_aux_vars_map : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Maybe[Instr*] ternary_binary_foreign_key_check_code(TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type, Bool insertion_checked, Bool deletion_checked) {
    assert target_type :: MasterBinTable; ## THIS IS PROBABLY WRONG, TRY TO FALSIFY IT

    tables = effects_info.tables;

    // First we check if there's a deletion (including an implicit one caused by an update
    // statement) from the target, which is the most complicated case
    if tables(target, _) {
      target_instr_id, target_action = only_pair(tables(target));

      if target_action == :update {
        target_keys = keys(target_type);
        return nothing if target_keys != []; ## CAN WE DO ANY BETTER HERE?
      }
      else if is_deletion(target_action) {
        return nothing; ## IMPLEMENT IMPLEMENT IMPLEMENT
      }
    }

    // No deletion from the target, either implicit or explicit

    if tables(origin, _) {
      origin_instr_id, origin_action = only_pair(tables(origin));
      if origin_action == :insertion {
        if insertion_checked {
          check_expr, code = ternary_binary_foreign_key_origin_insertion_check_expr(origin, target, origin_type, target_type);
          return just((code | do_if(check_expr, ret_val(false))));
        }
      }
      else if origin_action == :update {
        origin_keys = keys(origin_type);
        if origin_keys == [] or origin_keys == [[0, 1]] {
          check_expr, code = ternary_binary_foreign_key_origin_insertion_check_expr(origin, target, origin_type, target_type);
          return just((code | do_if(check_expr, ret_val(false))));
        }
        return nothing;
      }
    }

    return just(());
  }

  //////////////////////////////////////////////////////////////////////////////

  (BoolExpr, Instr*) ternary_binary_foreign_key_origin_insertion_check_expr(TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type) {
    origin_aux_vars, maybe_origin_status_var = table_var_aux_vars_map(origin);
    if |origin_aux_vars| == 3 {
      arg1_aux_var = cast_loc_int32_var(origin_aux_vars(0));
      arg2_aux_var = cast_loc_int32_var(origin_aux_vars(1));
      expr = neg(bin_table_aux_contains(target, target_type, (just(arg1_aux_var), just(arg2_aux_var))));
      expr = and_then(value(maybe_origin_status_var), expr) if maybe_origin_status_var != nothing;
      code = ();
    }
    else {
      assert |origin_aux_vars| == 2;
      assoc_surr_aux_var = cast_loc_int32_var(origin_aux_vars(0));
      contains_expr, code = bin_table_aux_contains_surr(target, cast_master_bin_table(target_type), assoc_surr_aux_var);
      expr = neg(contains_expr);
      if maybe_origin_status_var != nothing {
        origin_status_var = value(maybe_origin_status_var);
        expr = and_then(origin_status_var, expr);
        code = opt_do_if(origin_status_var, code);
      }
    }
    return (expr, code);
  }
}
