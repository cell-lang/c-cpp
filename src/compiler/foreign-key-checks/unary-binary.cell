implicit table_var_aux_vars_map : [TableVar -> (OptAuxTableVar+, Maybe[LocBoolVar])], effects_info : EffectsInfo {
  Maybe[Instr*] unary_binary_foreign_key_check_code(<0..1> target_col_idx, TableVar origin, TableVar target, AnyTable origin_type, AnyTable target_type, Bool insertion_checked, Bool deletion_checked) {
    assert target_col_idx == 0 or target_col_idx == 1;

    other_col_idx = if target_col_idx == 0 then 1 else 0;
    tables = effects_info.tables;

    foreign_key = foreign_key(origin, target, :unary_binary(target_col_idx));
    err_rec_instr = record_foreign_key_violation(foreign_key, origin_type, target_type);

    code = ();

    if insertion_checked {
      // Checking insertions into the origin
      origin_elt_aux_vars = unary_table_insertion_aux_vars(origin, cast_table(origin_type));
      return nothing if origin_elt_aux_vars == nothing;
      origin_elt_aux_vars = value(origin_elt_aux_vars);
      for origin_elt_aux_var, maybe_status_var <- origin_elt_aux_vars {
        cond_args = (if i == target_col_idx then just(origin_elt_aux_var) else nothing : i < 2);
        violation_cond = neg(bin_table_aux_contains(target, target_type, cond_args));
        violation_cond = and_then(value(maybe_status_var), violation_cond) if maybe_status_var != :nothing;
        code = (code | do_if(violation_cond, (err_rec_instr, ret_val(false))));
      }
    }

    // Figure out the set of values in the target column that need to be checked for deletion
    if tables(target, _) {
      target_effects_info = tables(target);
      return nothing if |target_effects_info| != 1;
      target_instr_id, target_action = only_pair(target_effects_info);
      target_aux_vars, maybe_target_status_var = table_var_aux_vars_map(target);
      assert |target_aux_vars| == 2;
      target_aux_var = cast_opt_loc_int32_var(target_aux_vars(target_col_idx));
      other_aux_var = target_aux_vars(other_col_idx);

      if is_deletion(target_action) {
        if deletion_checked {
          if target_aux_var != :none {
            violation_cond = neg(unary_table_aux_contains(origin, origin_type, target_aux_var));
            if other_aux_var != :none and not is_key(target_type, target_col_idx)
              // The value is not necessarily being deleted from the target column, there may be other tuples that contain it
              violation_cond = and_then(bin_table_aux_contains(target, target_type, (just(target_aux_var))), violation_cond);
          }
          else {
            if other_aux_var != :none {
              if is_key(target_type, other_col_idx) {
                // The deletion is being done specifying only the other argument, so the table cannot be a column
                // and the other auxiliary variable must be a surrogate-containing variable
                refined_target_type = cast_any_surr_table(target_type);
                other_aux_var = cast_loc_int32_var(other_aux_var);

                tmp_var = new_unique_int32_var(:unused);
                lookup_expr = table_lookup(target, refined_target_type, (maybe(other_aux_var, i == other_col_idx) : i < 2));
                code = (code | set_ivar32(tmp_var, lookup_expr));
                violation_cond = neg(unary_table_aux_contains(origin, origin_type, tmp_var));
              }
              else
                return nothing;
            }
            else
              // Everything is being deleted, so the origin must be empty
              violation_cond = neg(unary_table_aux_is_empty(origin, origin_type));
          }

          violation_cond = and_then(value(maybe_target_status_var), violation_cond) if maybe_target_status_var != nothing;
          code = (code | do_if(violation_cond, (err_rec_instr, ret_val(false))));
        }
      }
      else if target_action == :update {
        keys = keys(target_type);
        assert keys == [] or keys == [[0]] or keys == [[0], [1]];

        if keys([other_col_idx]) {
          // Let's say the target column is the first one and there's a key on the second one
          // Let's say that a new tuple (x, y) is inserted using an update statement
          // All values in (?, y) are deleted, but there can be only one, since the second column is a key
          // If the value x is deleted it is also then replaced, so there's nothing to check there
          tmp_var = new_unique_int32_var(:unused);
          lookup_args = (if i == other_col_idx then just(cast_loc_int32_var(other_aux_var)) else nothing : i < 2);
          violation_cond = neg(unary_table_aux_contains(origin, origin_type, tmp_var));
          violation_cond = and_then(value(maybe_target_status_var), violation_cond) if maybe_target_status_var != nothing;
          check_instr = do_if(
            table_contains(target, target_type, lookup_args),
            ( set_ivar32(tmp_var, table_lookup(target, cast_any_surr_table(target_type), lookup_args)),
              do_if(violation_cond, (err_rec_instr, ret_val(false)))
            )
          );
          code = (code | check_instr);
        }
      }
    }

    return just(code);
  }
}
