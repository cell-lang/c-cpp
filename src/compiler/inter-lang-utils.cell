type Text = String, Text*;


Bool ends_with_empty_line(String* lines) {
  len = |lines|;
  return len == 0 or lines(len - 1) == "";
}

String* append_with_sep(String** chunks) {
  lines = ();
  for c <- chunks {
    if c != () {
      lines = (lines | "") if lines != ();
      lines = lines & c;
    }
  }
  return lines;
}


String* flatten(Text text) {
  return if is_str(text) then (text) else flatten(text, 0, ());

  String* flatten(Text* text, Nat indent_level, String* lines) {
    has_strings = (t <- text : is_str(t) and t != "" and (length(t) < 2 or take(t, 2) != "//"));
    next_indent_level = nat(indent_level + if has_strings then 1 else 0);
    new_lines = lines;
    for t <- text {
      if is_str(t)
        new_lines = (new_lines | indent_line(t, indent_level));
      else
        new_lines = flatten(t, next_indent_level, new_lines);
    }
    return new_lines;
  }

  String indent_line(String str, Nat indent_level) =
    if str != ""
      then string((` ` : _ < 2 * indent_level)) & str
      else "";

  True  is_str(String) = true;
  False is_str(Text*)  = false;
}


[LambdaExpr] lambda_exprs(CompiledPrg prg) {
  lambda_exprs = select_rec(prg, $ :: LambdaExpr);
  fail if not lambda_exprs :: [LambdaExpr];
  return lambda_exprs;
}


type AuxReactAutoVar = curr_time, PrevVarValue;


type VarTypesNotToDeclare = FnArg,
                            ImplArg,
                            CaptVar,
                            ElemVar,
                            AnyMembVar,
                            PendingStateVar,
                            AnySignalVar,
                            PendingInputVar,
                            AnyAutoVar,
                            MembBoolVar,
                            QualBoolVar,
                            MembIntVar,
                            update_expr_index,
                            MembObjVar,
                            LocAutoIntVar,
                            ProjdIntVar;


## BAD: THIS THING IS INCREDIBLY MESSY. I MUST IMPLEMENT A VERSION OF SELECT WITH A <STOP> GUARD
[AnyVar] vars_to_declare(Instr* instrs) {
  vars = select(
    instrs,
    $ :: <AnyVar, ClsDef> and not $ :: <VarTypesNotToDeclare, ClsDef>
  );
  fail if not vars :: [AnyVar];
  return vars - [:invalid_var]; ## THIS IS A REALLY, REALLY UGLY THING
}

////////////////////////////////////////////////////////////////////////////////

## BUG BUG BUG: DOESN'T TAKE INTO ACCOUNT THE FACT THAT THE COLUMNS MAY HAVE BEEN PERMUTATED
String block_foreign_key_user_repr(BlockForeignKey key) {
  args_names = ("a", "b", "c");

  src_args_list, tgt_args_list = match (key.type)
    unary_unary               = ("a", "a"),
    unary_binary(i?)          = (args_names(i), append((if j == i then args_names(i) else "_" : j < 2), ", ")),
    unary_ternary(i?)         = (args_names(i), append((if j == i then args_names(i) else "_" : j < 3), ", ")),
    binary_unary(i?)          = (append((if j == i then args_names(i) else "_" : j < 2), ", "), args_names(i)),
    ternary_unary(i?)         = (append((if j == i then args_names(i) else "_" : j < 3), ", "), args_names(i)),
    binary_ternary            = ("a, b", "a, b, _"),
    ternary_binary            = ("a, b, _", "a, b"),
    unary_sym_binary          = ("a", "a | _"),
    unary_sym_ternary_12      = ("a", "a | _, _"),
    unary_sym_ternary_3       = ("c", "_ | _, c"),
    sym_binary_unary          = ("a | _", "a"),
    sym_ternary_unary_12      = ("a | _, _", "a"),
    sym_ternary_unary_3       = ("_ | _, c", "c"),
    sym_binary_sym_ternary    = ("a | b", "a | b, _"),
    sym_ternary_sym_binary    = ("a | b, _", "a | b");

  return user_repr(original_rel_var(key.origin)) & "(" & src_args_list & ") -> " & user_repr(original_rel_var(key.target)) & "(" & tgt_args_list & ")";
}

////////////////////////////////////////////////////////////////////////////////

type AuxTableVar    = LocVar, LocIntVar, LocFloatVar, LocBoolVar, Int32Var;
type OptAuxTableVar = none, AuxTableVar;

type OptLocInt32Var = none, LocInt32Var;

type LocColValueAuxVar = LocVar, LocIntVar, LocFloatVar;
type OptLocColValueAuxVar = none, LocColValueAuxVar;


Int32Var+ cast_int32_var_seq(OptAuxTableVar+ vars) = if vars :: Int32Var+ then vars else undefined;
AuxTableVar cast_aux_table_var(OptAuxTableVar v) = if v != :none then v else undefined;
Int32Var cast_int32_var(<none>) = undefined;

LocInt32Var cast_loc_int32_var(AuxTableVar var) = if var :: LocInt32Var then var else undefined;
OptLocInt32Var cast_opt_loc_int32_var(OptAuxTableVar var) = if var :: OptLocInt32Var then var else undefined;

LocInt32Var+ cast_loc_int32_vars(OptAuxTableVar+ vars) = if vars :: LocInt32Var+ then vars else undefined;
OptLocInt32Var+ cast_opt_loc_int32_vars(OptAuxTableVar+ vars) = if vars :: OptLocInt32Var+ then vars else undefined;


[AuxTableVar] temp_table_col_vars_in_use(Instr* instrs) {
  vars = select(instrs, $ :: OptAuxTableVar);
  fail if not vars :: [AuxTableVar];
  return vars;
}

LocVar any_available_loc_var([AuxTableVar] unavailable_vars) {
  bare_id = 0;
  while unavailable_vars(lvar(bare_id))
    bare_id = nat(bare_id + 1);
  return lvar(bare_id);
}

LocIntVar any_available_loc_int_var([AuxTableVar] unavailable_vars) {
  bare_id = 0;
  while unavailable_vars(ivar(bare_id))
    bare_id = nat(bare_id + 1);
  return ivar(bare_id);
}

LocFloatVar any_available_loc_float_var([AuxTableVar] unavailable_vars) {
  bare_id = 0;
  while unavailable_vars(fvar(bare_id))
    bare_id = nat(bare_id + 1);
  return fvar(bare_id);
}

LocInt32Var any_available_loc_int32_var([AuxTableVar] unavailable_vars) {
  bare_id = 0;
  while unavailable_vars(ivar32(bare_id))
    bare_id = nat(bare_id + 1);
  return ivar32(bare_id);
}

LocBoolVar any_available_loc_bool_var([AuxTableVar] unavailable_vars) {
  bare_id = 0;
  while unavailable_vars(bvar(bare_id))
    bare_id = nat(bare_id + 1);
  return bvar(bare_id);
}

(LocVar, [AuxTableVar]) reserve_any_available_loc_var([AuxTableVar] unavailable_vars) {
  var = any_available_loc_var(unavailable_vars);
  return (var, _insert_(unavailable_vars, var));
}

(LocIntVar, [AuxTableVar]) reserve_any_available_loc_int_var([AuxTableVar] unavailable_vars) {
  var = any_available_loc_int_var(unavailable_vars);
  return (var, _insert_(unavailable_vars, var));
}

(LocFloatVar, [AuxTableVar]) reserve_any_available_loc_float_var([AuxTableVar] unavailable_vars) {
  var = any_available_loc_float_var(unavailable_vars);
  return (var, _insert_(unavailable_vars, var));
}

(LocInt32Var, [AuxTableVar]) reserve_any_available_loc_int32_var([AuxTableVar] unavailable_vars) {
  var = any_available_loc_int32_var(unavailable_vars);
  return (var, _insert_(unavailable_vars, var));
}

(OptLocInt32Var, [AuxTableVar]) reserve_any_available_loc_int32_var(Bool needed, [AuxTableVar] unavailable_vars) =
  if needed
    then reserve_any_available_loc_int32_var(unavailable_vars)
    else (:none, unavailable_vars);

(<LocVar, LocIntVar, LocFloatVar>, [AuxTableVar]) reserve_any_available_loc_var(ColumnRepr, [AuxTableVar] unavailable_vars) =
  object  = reserve_any_available_loc_var(unavailable_vars),
  int     = reserve_any_available_loc_int_var(unavailable_vars),
  float   = reserve_any_available_loc_float_var(unavailable_vars);

(<none, LocVar, LocIntVar, LocFloatVar>, [AuxTableVar]) reserve_any_available_loc_var(Bool needed, ColumnRepr repr, [AuxTableVar] unavailable_vars) =
  if needed
    then reserve_any_available_loc_var(repr, unavailable_vars)
    else (:none, unavailable_vars);

(Maybe[LocBoolVar], [AuxTableVar]) reserve_maybe_loc_bool_var(Bool needed, [AuxTableVar] unavailable_vars) {
  if needed {
    var = any_available_loc_bool_var(unavailable_vars);
    return (just(var), _insert_(unavailable_vars, var));
  }
  else
    return (nothing, unavailable_vars);
}

(LocInt32Var+, [AuxTableVar]) reserve_any_available_loc_int32_vars(NzNat count, [AuxTableVar] init_unavailable_vars) {
  unavailable_vars = init_unavailable_vars;
  vars = ();
  for i < count {
    var, unavailable_vars = reserve_any_available_loc_int32_var(unavailable_vars);
    vars = (vars | var);
  }
  return (nonempty(vars), unavailable_vars);
}

(OptLocInt32Var+, [AuxTableVar]) reserve_any_available_loc_int32_vars(Bool+ required, [AuxTableVar] init_unavailable_vars) {
  unavailable_vars = init_unavailable_vars;
  vars = ();
  for r <- required {
    if r
      var, unavailable_vars = reserve_any_available_loc_int32_var(unavailable_vars);
    else
      var = :none;
    vars = (vars | var);
  }
  return (nonempty(vars), unavailable_vars);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String parenthesize(String code, Bool parenthesized) = if parenthesized then "(" & code & ")" else code;


String uppercase_encoding(Nat n) {
  m = n;

  len = 1;
  size = 26;
  while m >= size {
    len = len + 1;
    m = m - size;
    size = 26 * size;
  }

  ds = ();
  for len {
    ds = (ds | _mod_(m, 26));
    m = m / 26;
  }
  ds = _rev_(ds);
  chs = (nat(`A` + d) : d <- ds);
  return :string(chs);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// Any replace(Any obj, (Any -> Bool) cond, (Any -> Any) eval) =
//   if cond(obj)
//     then eval(obj)
//     else match (obj)
//       +           = obj,
//       *           = obj, ## BAD
//       ^           = obj, ## BAD
//       {...}       = {replace(x, cond, eval) : x <- obj},
//       [...]       = [replace(x, cond, eval) : x <- obj],
//       (...)       = (replace(k, cond, eval) => replace(v, cond, eval) : v @ k <- obj),
//       tag @ iobj  = tag @ replace(iobj, cond, eval); ## SHOULD I EXTEND THE REPLACEMENT TO THE TAG AS WELL?

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[TupleArgRepr+] program_tuples_args_reprs(CompiledPrg prg) {
  some_reprs = select(prg, $ :: LowLevelRepr);
  fail if not some_reprs :: [LowLevelRepr];
  some_reprs = [ars : r <- some_reprs, tuple(ars?) ?= r];

  tuple_exprs = select(prg, $ :: LowLevelTupleExpr);
  fail if not tuple_exprs :: [LowLevelTupleExpr];
  more_reprs = [(low_level_repr(a) : a <- as) : e <- tuple_exprs, tuple_expr(as?) ?= e];

  reprs = [(
      match (r)
        opt_tag_rec_repr()  = :object,
        int                 |
        float               |
        object              = r
      : r <- rs
    ) : rs <- some_reprs | rs <- more_reprs
  ];

  return reprs;
}

////////////////////////////////////////////////////////////////////////////////

SymbObj+ program_symbols(CompiledPrg prg) {
  fixed_symbs = (object(a) : a <- special_symbols);
  other_symbs = select(prg, $ :: SymbObj) - set(fixed_symbs);
  fail if not other_symbs :: [SymbObj];
  // other_symbs = isort(other_symbs);
  other_symbs = sort_set(other_symbs, lower_than(bare_obj($a), bare_obj($b)));
  return nonempty(fixed_symbs & other_symbs);


  Atom+ special_symbols = (false, true, :void, :string, :date, :time, :nothing, :just, :success, :failure);


  Bool lower_than(Atom a1, Atom a2) {
    assert not in(a1, special_symbols) and not in(a2, special_symbols);

    chs1 = chars(_print_(a1));
    chs2 = chars(_print_(a2));

    len1 = |chs1|;
    len2 = |chs2|;

    return len1 < len2 if len1 != len2;

    for ch1 @ i <- chs1 {
      ch2 = chs2(i);
      return ch1 < ch2 if ch1 != ch2;
    }

    fail;
  }
}


(String, Nat)* int_seqs_types_and_lengths(CompiledPrg prg) =
  ((native_int_type(min(s), max(s)), |s|) : s <- prg.int_seqs);


[ImplArg -> [+FnId]] cached_semi_consts_by_impl_arg(CompiledPrg prg) {
  semi_consts = [p : p <- prg.procs, p.cached and p.impl_args != []];
  impl_args_by_fn = [cast_to_fn_symbol(p.name) -> p.impl_args : p <- semi_consts];
  return reverse_multi(impl_args_by_fn);

  FnId cast_to_fn_symbol(ObjFnName id) = if id :: FnId then id else undefined;
}


[[+Symbol] -> (Symbol+, Nat)] symbols_sets_info(CompiledPrg prg) {
  mk_rec_exprs = select(prg, match ($) mk_record() = true, _ = false);
  fail if not mk_rec_exprs :: [<mk_record(fields: [+SymbObj -> AtomicExpr])>];
  symbs_sets = [[untag(l) : l _ <- e.fields] : e <- mk_rec_exprs] &
               [keys(untag(r)) : _ rs <- prg.opt_reprs, r <- rs];
  ord_symbs_sets = isort(symbs_sets);

  symbols_map = [untag(s) -> i : s @ i <- program_symbols(prg)];
  return [ls -> {
      ord_labels = sort_set(ls, symbols_map($a, !) < symbols_map($b, !));
      return (nonempty(ord_labels), i);
    } : ls @ i <- ord_symbs_sets
  ];
}
