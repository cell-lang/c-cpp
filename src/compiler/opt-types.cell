implicit prg : CompiledPrg, context : <core> {
  String* native_opt_type_decls {
    structs_decls = ();
    all_methods = ();

    for s, rs <- isort(prg.opt_reprs)
      for r @ i <- rs {
        struct_decl, methods = native_tag_rec_type_decl(s, r, i);
        structs_decls = (structs_decls | "") if structs_decls != ();
        all_methods = (all_methods | "", 80 * "/", "");
        structs_decls = structs_decls & struct_decl;
        all_methods = all_methods & methods;
      }

    return structs_decls & all_methods;
  }


  (String*, String*) native_tag_rec_type_decl(Symbol tag, OptRecRepr repr, Nat idx) {
    struct_name       = opt_tag_rec_name(tag, idx);
    fields            = untag(repr);
    labels            = keys(fields);
    ord_labels, index = symbols_sets_info(labels, !);
    ord_mand_labels   = (l : l <- ord_labels, not fields(l, !).optional);
    ord_opt_labels    = (l : l <- ord_labels, fields(l, !).optional);
    opt_labels        = set(ord_opt_labels);
    has_opt_fields    = opt_labels != [];

    // Content variables declarations
    native_types  = (native_type(fields(l, !).repr) : l <- ord_labels);
    types_lengths = (length(s) : s <- native_types);
    max_type_len  = max(types_lengths);
    spaces        = (nat(max_type_len - l + 1) * " " : l <- types_lengths);
    vars_names    = (opt_rec_field_name(l) : l <- ord_labels);
    body          = (native_types(i) & spaces(i) & v & ";" : v @ i <- vars_names);

    // Test variables declarations
    set_test_labels = isort([l : l f <- fields, f.optional, not is_nullable(f.repr)]);
    if set_test_labels != () {
      test_vars_decls = ("bool " & opt_rec_field_nonempty_test_var(l) & ";" : l <- set_test_labels);
      body = (body | "") & test_vars_decls;
    }

    // // Actual labels array declaration
    // body = (body | "", "uint16[] labels;") if has_opt_fields;

    struct_decl = ("typedef struct {") & indent_lines(body) & ("} " & struct_name & ";",);

    // Methods
    reprs = [l -> fields(l, !).repr : l <- labels];
    let tag = tag, ord_labels = ord_labels, opt_labels = opt_labels, reprs = reprs {
      methods_defs = (
        finish_init_def(struct_name, ord_mand_labels, ord_opt_labels, idx),
        has_field_def(struct_name),
        lookup_field_def(struct_name),
        internal_order_def(struct_name, ord_mand_labels, ord_opt_labels),
        count_fields_def(struct_name),
        get_labels_def(struct_name, index)
      );
    }

    return (struct_decl, join(intermix(methods_defs, (""))));
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////// Methods generation //////////////////////////////

implicit context : <core>, tag : Symbol, ord_labels : Symbol+, opt_labels : [Symbol], reprs : [Symbol -> LowLevelRepr] {
  String* finish_init_def(String struct_name, Symbol* ord_mand_labels, Symbol* ord_opt_labels, Nat idx) {
    code = ("void " & struct_name & "_finish_init(" & struct_name & " *self) {");

    // if ord_opt_labels != () {
    //   code = (code | "  ushort mask = 0;");
    //   for l @ i <- ord_opt_labels {
    //     code = code & (
    //       "  if (" & set_check_expr(reprs(l, !), l, "", false) & ")",
    //       "    mask |= 1 << " & printed(i) & ";"
    //     );
    //   }
    //   mask = "mask";
    // }
    // else {
    //   mask = "0";
    // }

    // set_data_instr = "  data = OptTagRecObjData(" & symb_idx_name(tag) & ", " & mask & ");";
    // set_extra_data_instr = "  extraData = OptTagRecObjExtraData(" & printed(idx) & ");";

    // code = (code | set_data_instr, set_extra_data_instr);

    return (code | "", "}");
  }

  //////////////////////////////////////////////////////////////////////////////

  String* has_field_def(String struct_name) {
    has_field_exprs = (
      if opt_labels(l)
        then "(" & set_check_expr(reprs(l, !), l, "self->", false) & " & id == " & symb_idx_name(l) & ")"
        else "id == " & symb_idx_name(l)
      : l <- ord_labels
    );

    return (
      "bool " & struct_name & "_has_field(" & struct_name & " *self, uint16 id) {",
      "  return " & append(has_field_exprs, " | ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* lookup_field_def(String struct_name) {
    cases = ((
        "" if i != 0,
        "case " & symb_idx_name(l) & ":",
        "  return " & native_obj_expr(reprs(l, !), "self->" & opt_rec_field_name(l)) & ";"
      ) : l @ i <- ord_labels
    );

    return (
      "OBJ " & struct_name & "_lookup_field(" & struct_name & " *self, uint16 id) {",
      "  switch (id) {"
    ) & indent_lines(indent_lines(join(cases))) & (
      "  }",
      "  internal_fail();",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* internal_order_def(String struct_name, Symbol* ord_mand_labels, Symbol* ord_opt_labels) {
    // body = (struct_name & " otherOpt = (" & struct_name & ") other;");

    // if ord_opt_labels != () {
    //   body = (body | "");
    //   for l <- ord_opt_labels {
    //     repr = reprs(l, !);
    //     test_expr = set_check_expr(repr, l, "", true);
    //     other_test_expr = set_check_expr(repr, l, "otherOpt.", true);
    //     body = (body | "Debug.Assert(" & test_expr & " == " & other_test_expr & ");");
    //   }
    // }

    // for l @ i <- ord_mand_labels {
    //   field_name = opt_rec_field_name(l);
    //   comp_expr = comparison_expr(reprs(l, !), field_name, "otherOpt." & field_name);
    //   if i == |ord_labels| - 1 {
    //     body = (body | "return " & comp_expr & ";");
    //   }
    //   else {
    //     maybe_var_type = if i == 0 then "int " else "";
    //     body = (body |
    //       "",
    //       maybe_var_type & "res = " & comp_expr & ";",
    //       "if (res != 0)",
    //       "  return res;"
    //     );
    //   }
    // }

    // for l <- ord_opt_labels {
    //   repr = reprs(l, !);
    //   field_name = opt_rec_field_name(l);
    //   comp_expr = comparison_expr(repr, field_name, "otherOpt." & field_name);
    //   test_var_name = set_check_expr(repr, l, "", false);
    //   maybe_var_type = if ord_mand_labels == () then "int " else "";
    //   body = (body |
    //     "",
    //     "if (" & test_var_name & ") {",
    //     "  " & maybe_var_type & "res = " & comp_expr & ";",
    //     "  if (res != 0)",
    //     "    return res;",
    //     "}"
    //   );
    // }

    // body = (body | "", "return 0;") if ord_opt_labels != ();

    body = ("");

    signature_line = "int " & struct_name &"_internal_order(" & struct_name &" *self, OBJ other) {";
    return (signature_line) & indent_lines(body) & ("}");
  }

  //////////////////////////////////////////////////////////////////////////////

  String* count_fields_def(String struct_name) {
    opt_fields_bits = ("(" & set_check_expr(reprs(l, !), l, "self->", false) & " ? 1 : 0)" : l <- isort(opt_labels));
    count_fields_exprs = (printed(|ord_labels| - |opt_labels|)) & opt_fields_bits;

    return (
      "int " & struct_name & "_count_fields(" & struct_name & " *self) {",
      "  return " & append(count_fields_exprs, " + ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* get_labels_def(String struct_name, Nat symb_seq_index) {
    if opt_labels != [] {
      // body = (
      //   "if (labels == null) {",
      //   "  int count = CountFields();",
      //   "  labels = new ushort[count];",
      //   "  int idx = 0;"
      // );

      // for l <- ord_labels {
      //   label_code = ("  labels[idx++] = " & symb_idx_name(l) & ";");
      //   if opt_labels(l) {
      //     if_line = "  if (" & set_check_expr(reprs(l, !), l, "", false) & ")";
      //     label_code = (if_line) & indent_lines(label_code);
      //   }
      //   body = body & label_code;
      // }

      // body = (body | "}", "return labels;");

      body = ("");
    }
    else {
      body = ("return " & const_symb_seq_name(symb_seq_index) & ";");
    }

    signature_line = "uint16 *" & struct_name & "_get_fields_ids(" & struct_name & " *self) {";
    return (signature_line) & indent_lines(body) & ("}");
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String set_check_expr(LowLevelRepr repr, Symbol label, String path, Bool parenthesized) =
  if is_nullable(repr)
    then "is_blank_obj(" & path & opt_rec_field_name(label) & ")"
    else path & opt_rec_field_nonempty_test_var(label);


String native_obj_expr(LowLevelRepr repr, String expr) =
  bool    = "make_bool(" & expr & ")",
  int     = "make_int(" & expr & ")",
  float   = "make_float(" & expr & ")",
  symbol  |
  object  = expr;


String obj_data_expr(LowLevelRepr repr, String expr) =
  bool    = "BoolObjData(" & expr & ")",
  int     = expr,
  float   = "FloatObjData(" & expr & ")",
  symbol  |
  object  = expr & ".data";


String comparison_expr(LowLevelRepr repr, String expr1, String expr2) =
  bool    = "SymbObj.CompBools(" & expr1 & ", " & expr2 & ")",
  int     = "IntObj.Compare(" & expr1 & ", " & expr2 & ")",
  float   = "FloatObj.Compare(" & expr1 & ", " & expr2 & ")",
  symbol  |
  object  = expr1 & ".QuickOrder(" & expr2 & ")";
