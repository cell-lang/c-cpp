implicit prg : CompiledPrg, context : <core> {
  String* native_opt_type_decls {
    non_opt_fields_reprs = ();
    opt_fields_reprs = ();

    for s, rs <- isort(prg.opt_reprs)
      for r @ i <- rs
        if has_opt_fields(r)
          opt_fields_reprs = (opt_fields_reprs | (s, r, i));
        else
          non_opt_fields_reprs = (non_opt_fields_reprs | (s, r, i));

    structs_decls = ();
    all_methods = ();

    has_field_dispatcher = (
      "",
      80 * "/",
      "",
      "bool opt_repr_has_field(void *ptr, uint16 repr_id, uint16 field_id) {",
      "  switch (repr_id) {"
    );

    lookup_field_dispatcher = (
      "",
      80 * "/",
      "",
      "OBJ opt_repr_lookup_field(void *ptr, uint16 repr_id, uint16 field_id) {",
      "  switch (repr_id) {"
    );

    get_fields_count_dispatcher = (
      "",
      80 * "/",
      "",
      "uint32 opt_repr_get_fields_count(void *ptr, uint16 repr_id) {",
      "  switch (repr_id) {"
    );

    get_fields_dispatcher = (
      "",
      80 * "/",
      "",
      "uint16 *opt_repr_get_fields(uint16 repr_id, uint32 &count) {",
      "  switch (repr_id) {"
    );

    get_tag_id = (
      "",
      80 * "/",
      "",
      "uint16 opt_repr_get_tag_id(uint16 repr_id) {",
      "  static uint16 tag_ids[] = {"
    );

    for s, r, i @ gid <- non_opt_fields_reprs & opt_fields_reprs {
      struct_decl, methods = native_tag_rec_type_decl(s, r, i, gid);
      structs_decls = (structs_decls | "") if structs_decls != ();
      all_methods = (all_methods | "", 80 * "/", "");
      structs_decls = structs_decls & struct_decl;
      all_methods = all_methods & methods;

      struct_name = opt_tag_rec_name(s, i);

      has_field_dispatcher = (
        has_field_dispatcher |
        "    case " & _print_(gid) & ":",
        "      return " & struct_name & "_has_field((" & struct_name & " *) ptr, field_id);",
        ""
      );

      lookup_field_dispatcher = (
        lookup_field_dispatcher |
        "    case " & _print_(gid) & ":",
        "      return " & struct_name & "_lookup_field((" & struct_name & " *) ptr, field_id);",
        ""
      );

      get_fields_count_dispatcher = (
        get_fields_count_dispatcher |
        "    case " & _print_(gid) & ":",
        "      return " & struct_name & "_get_fields_count((" & struct_name & " *) ptr);",
        ""
      );

      get_fields_dispatcher = (
        get_fields_dispatcher |
        "    case " & _print_(gid) & ":",
        "      return " & struct_name & "_get_fields(count);",
        ""
      );

      get_tag_id = (get_tag_id | "    " & symb_id_name(s) & ",");
    }

    footer = (
      "    default:",
      "      internal_fail();",
      "  }",
      "}"
    );

    dispatchers = has_field_dispatcher        & footer &
                  lookup_field_dispatcher     & footer &
                  get_fields_count_dispatcher & footer &
                  get_fields_dispatcher       & footer;

    get_tag_id = (
      get_tag_id |
      "  };",
      "",
      "  return tag_ids[repr_id];",
      "}"
    );

    may_have_opt_fields = (
      "",
      80 * "/",
      "",
      "bool opt_repr_may_have_opt_fields(uint16 repr_id) {",
      "  return repr_id >= " & _print_(|non_opt_fields_reprs|) & ";",
      "}",
      "",
      80 * "/"
    );

    return structs_decls & all_methods & dispatchers & get_tag_id & may_have_opt_fields;
  }


  (String*, String*) native_tag_rec_type_decl(Symbol tag, OptRecRepr repr, Nat idx, Nat global_id) {
    struct_name       = opt_tag_rec_name(tag, idx);
    fields            = untag(repr);
    labels            = keys(fields);
    ord_labels, index = symbols_sets_info(labels, !);
    ord_mand_labels   = (l : l <- ord_labels, not fields(l, !).optional);
    ord_opt_labels    = (l : l <- ord_labels, fields(l, !).optional);
    opt_labels        = set(ord_opt_labels);
    has_opt_fields    = opt_labels != [];

    // Content variables declarations
    native_types  = (native_type(fields(l, !).repr) : l <- ord_labels);
    types_lengths = (length(s) : s <- native_types);
    max_type_len  = max(types_lengths);
    spaces        = (nat(max_type_len - l + 1) * " " : l <- types_lengths);
    vars_names    = (opt_rec_field_name(l) : l <- ord_labels);
    body          = (native_types(i) & spaces(i) & v & ";" : v @ i <- vars_names);

    // Test variables declarations
    set_test_labels = isort([l : l f <- fields, f.optional, not is_nullable(f.repr)]);
    if set_test_labels != () {
      test_vars_decls = ("bool " & opt_rec_field_nonempty_test_var(l) & ";" : l <- set_test_labels);
      body = (body | "") & test_vars_decls;
    }

    // // Actual labels array declaration
    // body = (body | "", "uint16[] labels;") if has_opt_fields;

    struct_decl = ("typedef struct {") & indent_lines(body) & ("} " & struct_name & ";",);

    // Methods
    reprs = [l -> fields(l, !).repr : l <- labels];
    let tag = tag, ord_labels = ord_labels, opt_labels = opt_labels, reprs = reprs {
      methods_defs = (
        finish_init_def(struct_name, ord_mand_labels, ord_opt_labels, idx, global_id),
        has_field_def(struct_name),
        lookup_field_def(struct_name),
        get_fields_count_def(struct_name),
        get_fields_def(struct_name, index)
      );
    }

    return (struct_decl, join(intermix(methods_defs, (""))));
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////// Methods generation //////////////////////////////

implicit context : <core>, tag : Symbol, ord_labels : Symbol+, opt_labels : [Symbol], reprs : [Symbol -> LowLevelRepr] {
  String* finish_init_def(String struct_name, Symbol* ord_mand_labels, Symbol* ord_opt_labels, Nat idx, Nat global_id) = (
    "OBJ " & struct_name & "_finish_init(" & struct_name & " *self) {",
    "  return make_opt_tag_rec(self, " & _print_(global_id) & ");",
    "}"
  );

  //////////////////////////////////////////////////////////////////////////////

  String* has_field_def(String struct_name) {
    has_field_exprs = (
      if opt_labels(l)
        then "(" & set_check_expr(reprs(l, !), l, "self->", false) & " & id == " & symb_id_name(l) & ")"
        else "id == " & symb_id_name(l)
      : l <- ord_labels
    );

    return (
      "bool " & struct_name & "_has_field(" & struct_name & " *self, uint16 id) {",
      "  return " & append(has_field_exprs, " | ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* lookup_field_def(String struct_name) {
    cases = ((
        "" if i != 0,
        "case " & symb_id_name(l) & ":",
        "  return " & native_obj_expr(reprs(l, !), "self->" & opt_rec_field_name(l)) & ";"
      ) : l @ i <- ord_labels
    );

    return (
      "OBJ " & struct_name & "_lookup_field(" & struct_name & " *self, uint16 id) {",
      "  switch (id) {"
    ) & indent_lines(indent_lines(join(cases))) & (
      "  }",
      "  internal_fail();",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* get_fields_count_def(String struct_name) {
    opt_fields_bits = ("(" & set_check_expr(reprs(l, !), l, "self->", false) & " ? 1 : 0)" : l <- isort(opt_labels));
    count_fields_exprs = (printed(|ord_labels| - |opt_labels|)) & opt_fields_bits;

    return (
      "uint32 " & struct_name & "_get_fields_count(" & struct_name & " *self) {",
      "  return " & append(count_fields_exprs, " + ") & ";",
      "}"
    );
  }

  //////////////////////////////////////////////////////////////////////////////

  String* get_fields_def(String struct_name, Nat symb_seq_index) = (
    "uint16 *" & struct_name & "_get_fields(uint32 &count) {",
    "  count = " & _print_(|ord_labels|) & ";",
    "  return " & const_symb_seq_name(symb_seq_index) & ";",
    "}"
  );
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String set_check_expr(LowLevelRepr repr, Symbol label, String path, Bool parenthesized) =
  if is_nullable(repr)
    then "is_blank_obj(" & path & opt_rec_field_name(label) & ")"
    else path & opt_rec_field_nonempty_test_var(label);


String native_obj_expr(LowLevelRepr repr, String expr) =
  bool    = "make_bool(" & expr & ")",
  int     = "make_int(" & expr & ")",
  float   = "make_float(" & expr & ")",
  symbol  |
  object  = expr;


String obj_data_expr(LowLevelRepr repr, String expr) =
  bool    = "BoolObjData(" & expr & ")",
  int     = expr,
  float   = "FloatObjData(" & expr & ")",
  symbol  |
  object  = expr & ".data";


String comparison_expr(LowLevelRepr repr, String expr1, String expr2) =
  bool    = "SymbObj.CompBools(" & expr1 & ", " & expr2 & ")",
  int     = "IntObj.Compare(" & expr1 & ", " & expr2 & ")",
  float   = "FloatObj.Compare(" & expr1 & ", " & expr2 & ")",
  symbol  |
  object  = expr1 & ".QuickOrder(" & expr2 & ")";
